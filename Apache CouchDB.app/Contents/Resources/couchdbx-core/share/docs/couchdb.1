.\" Man page generated from reStructuredText.
.
.TH "APACHECOUCHDB" "1" "August 07, 2018" "2.2" "Apache CouchDB"
.SH NAME
apachecouchdb \- Apache CouchDB 2.2.0
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
Welcome! This is the documentation for Apache CouchDB 2.2.0\&.
.SH TABLE OF CONTENTS
.SS Introduction
.sp
CouchDB is a database that completely embraces the web. Store your data with
JSON documents. Access your documents with your web browser, \fIvia HTTP\fP\&. \fIQuery\fP, \fIcombine\fP, and
\fItransform\fP your documents with \fIJavaScript\fP\&. CouchDB works well with modern web and mobile apps.  You
can distribute your data, efficiently using CouchDB’s \fIincremental
replication\fP\&. CouchDB supports master\-master setups with
\fIautomatic conflict\fP detection.
.sp
CouchDB comes with a suite of features, such as on\-the\-fly document
transformation and real\-time \fIchange notifications\fP, that make
web development a breeze. It even comes with an easy to use web administration
console, served directly out of CouchDB! We care a lot about \fI\%distributed
scaling\fP\&.  CouchDB is highly available and partition tolerant, but is also
\fIeventually consistent\fP\&. And we care \fIa lot\fP about
your data.  CouchDB has a fault\-tolerant storage engine that puts the safety
of your data first.
.sp
In this section you\(aqll learn about every basic bit of CouchDB, see upon what
conceptions and technologies it built and walk through short tutorial that
teach how to use CouchDB.
.SS Technical Overview
.SS Document Storage
.sp
A CouchDB server hosts named databases, which store \fBdocuments\fP\&.
Each document is uniquely named in the database, and CouchDB provides
a \fI\%RESTful\fP \fIHTTP API\fP for reading and updating (add, edit,
delete)  database documents.
.sp
Documents are the primary unit of data in CouchDB and consist of any number
of fields and attachments. Documents also include metadata that’s maintained
by the database system. Document fields are uniquely named and contain values
of \fIvarying types\fP (text, number, boolean, lists, etc),
and there is no set limit to text size or element count.
.sp
The CouchDB document update model is lockless and optimistic.
Document edits are made by client applications loading documents,
applying changes, and saving them back to the database. If another client
editing the same document saves their changes first, the client gets an edit
conflict error on save. To resolve the update conflict, the latest document
version can be opened, the edits reapplied and the update tried again.
.sp
Document updates (add, edit, delete) are all or nothing, either succeeding
entirely or failing completely. The database never contains partially saved
or edited documents.
.SS ACID Properties
.sp
The CouchDB file layout and commitment system features all \fIAtomic Consistent
Isolated Durable\fP (\fI\%ACID\fP) properties. On\-disk, CouchDB never overwrites
committed data or associated structures, ensuring the database file is always
in a consistent state. This is a "crash\-only" design where the CouchDB
server does not go through a shut down process, it\(aqs simply terminated.
.sp
Document updates (add, edit, delete) are serialized, except for binary blobs
which are written concurrently. Database readers are never locked out and
never have to wait on writers or other readers. Any number of clients can be
reading documents without being locked out or interrupted by concurrent
updates, even on the same document. CouchDB read operations use a
\fIMulti\-Version Concurrency Control\fP (\fI\%MVCC\fP) model where each client sees a
consistent snapshot of the database from the beginning to the end of the read
operation.
.sp
Documents are indexed in \fI\%B\-trees\fP by their name (DocID) and a Sequence ID.
Each update to a database instance generates a new sequential number.
Sequence IDs are used later for incrementally finding changes in a database.
These B\-tree indexes are updated simultaneously when documents are saved or
deleted. The index updates always occur at the end of the file (append\-only
updates).
.sp
Documents have the advantage of data being already conveniently packaged for
storage rather than split out across numerous tables and rows in most
database systems. When documents are committed to disk, the document fields
and metadata are packed into buffers, sequentially one document after another
(helpful later for efficient building of views).
.sp
When CouchDB documents are updated, all data and associated indexes are
flushed to disk and the transactional commit always leaves the database
in a completely consistent state. Commits occur in two steps:
.INDENT 0.0
.IP 1. 3
All document data and associated index updates are synchronously flushed
to disk.
.IP 2. 3
The updated database header is written in two consecutive, identical chunks
to make up the first 4k of the file, and then synchronously flushed to disk.
.UNINDENT
.sp
In the event of an OS crash or power failure during step 1,
the partially flushed updates are simply forgotten on restart. If such a
crash happens during step 2 (committing the header), a surviving copy of the
previous identical headers will remain, ensuring coherency of all previously
committed data. Excepting the header area, consistency checks or fix\-ups
after a crash or a power failure are never necessary.
.SS Compaction
.sp
Wasted space is recovered by occasional compaction. On schedule, or when the
database file exceeds a certain amount of wasted space, the compaction process
clones all the active data to a new file and then discards the old file.
The database remains completely online the entire time and all updates and
reads are allowed to complete successfully. The old database file is deleted
only when all the data has been copied and all users transitioned to the new
file.
.SS Views
.sp
ACID properties only deal with storage and updates, but we also need the ability
to show our data in interesting and useful ways. Unlike SQL databases where
data must be carefully decomposed into tables, data in CouchDB is stored in
semi\-structured documents. CouchDB documents are flexible and each has its
own implicit structure, which alleviates the most difficult problems and
pitfalls of bi\-directionally replicating table schemas and their contained data.
.sp
But beyond acting as a fancy file server, a simple document model for data
storage and sharing is too simple to build real applications on \-\- it simply
doesn\(aqt do enough of the things we want and expect. We want to slice and dice
and see our data in many different ways. What is needed is a way to filter,
organize and report on data that hasn\(aqt been decomposed into tables.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fIviews\fP
.UNINDENT
.UNINDENT
.SS View Model
.sp
To address this problem of adding structure back to unstructured and
semi\-structured data, CouchDB integrates a view model. Views are the method
of aggregating and reporting on the documents in a database, and are built
on\-demand to aggregate, join and report on database documents. Because views
are built dynamically and don’t affect the underlying document, you can have
as many different view representations of the same data as you like.
.sp
View definitions are strictly virtual and only display the documents from the
current database instance, making them separate from the data they display
and compatible with replication. CouchDB views are defined inside special
\fBdesign documents\fP and can replicate across database instances like
regular documents, so that not only data replicates in CouchDB,
but entire application designs replicate too.
.SS JavaScript View Functions
.sp
Views are defined using JavaScript functions acting as the map part in a
\fI\%map\-reduce system\fP\&. A \fIview function\fP takes a CouchDB document
as an argument and then does whatever computation it needs to do to determine
the data that is to be made available through the view, if any.
It can add multiple rows to the view based on a single document,
or it can add no rows at all.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fIviewfun\fP
.UNINDENT
.UNINDENT
.SS View Indexes
.sp
Views are a dynamic representation of the actual document contents of a
database, and CouchDB makes it easy to create useful views of data.
But generating a view of a database with hundreds of thousands or millions of
documents is time and resource consuming, it\(aqs not something the system
should do from scratch each time.
.sp
To keep view querying fast, the view engine maintains indexes of its views,
and incrementally updates them to reflect changes in the database.
CouchDB’s core design is largely optimized around the need for efficient,
incremental creation of views and their indexes.
.sp
Views and their functions are defined inside special "design" documents,
and a design document may contain any number of uniquely named view functions.
When a user opens a view and its index is automatically updated, all the views
in the same design document are indexed as a single group.
.sp
The view builder uses the database sequence ID to determine if the view group
is fully up\-to\-date with the database. If not, the view engine examines
all database documents (in packed sequential order) changed since the last
refresh. Documents are read in the order they occur in the disk file,
reducing the frequency and cost of disk head seeks.
.sp
The views can be read and queried simultaneously while also being refreshed.
If a client is slowly streaming out the contents of a large view,
the same view can be concurrently opened and refreshed for another client
without blocking the first client. This is true for any number of
simultaneous client readers, who can read and query the view while the index
is concurrently being refreshed for other clients without causing problems
for the readers.
.sp
As documents are processed by the view engine through your \(aqmap\(aq and \(aqreduce\(aq
functions, their previous row values are removed from the view indexes, if
they exist. If the document is selected by a view function, the function results
are inserted into the view as a new row.
.sp
When view index changes are written to disk, the updates are always appended
at the end of the file, serving to both reduce disk head seek times during
disk commits and to ensure crashes and power failures can not cause
corruption of indexes. If a crash occurs while updating a view index,
the incomplete index updates are simply lost and rebuilt incrementally from
its previously committed state.
.SS Security and Validation
.sp
To protect who can read and update documents, CouchDB has a simple reader
access and update validation model that can be extended to implement custom
security models.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fIapi/db/security\fP
.UNINDENT
.UNINDENT
.SS Administrator Access
.sp
CouchDB database instances have administrator accounts. Administrator
accounts can create other administrator accounts and update design documents.
Design documents are special documents containing view definitions and other
special formulas, as well as regular fields and blobs.
.SS Update Validation
.sp
As documents are written to disk, they can be validated dynamically by
JavaScript functions for both security and data validation. When the document
passes all the formula validation criteria, the update is allowed to continue.
If the validation fails, the update is aborted and the user client gets an
error response.
.sp
Both the user\(aqs credentials and the updated document are given as inputs to
the validation formula, and can be used to implement custom security models
by validating a user\(aqs permissions to update a document.
.sp
A basic "author only" update document model is trivial to implement,
where document updates are validated to check if the user is listed in an
"author" field in the existing document. More dynamic models are also possible,
like checking a separate user account profile for permission settings.
.sp
The update validations are enforced for both live usage and replicated
updates, ensuring security and data validation in a shared, distributed system.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fIvdufun\fP
.UNINDENT
.UNINDENT
.SS Distributed Updates and Replication
.sp
CouchDB is a peer\-based distributed database system. It allows users and servers
to access and update the same shared data while disconnected. Those changes can
then be replicated bi\-directionally later.
.sp
The CouchDB document storage, view and security models are designed to work
together to make true bi\-directional replication efficient and reliable.
Both documents and designs can replicate, allowing full database applications
(including application design, logic and data) to be replicated to laptops
for offline use, or replicated to servers in remote offices where slow or
unreliable connections make sharing data difficult.
.sp
The replication process is incremental. At the database level,
replication only examines documents updated since the last replication.
If replication fails at any step, due to network
problems or crash for example, the next replication restarts at the last
checkpoint.
.sp
Partial replicas can be created and maintained. Replication can be filtered
by a JavaScript function, so that only particular documents or those meeting
specific criteria are replicated. This can allow users to take subsets of a
large shared database application offline for their own use, while maintaining
normal interaction with the application and that subset of data.
.SS Conflicts
.sp
Conflict detection and management are key issues for any distributed edit
system. The CouchDB storage system treats edit conflicts as a common state,
not an exceptional one. The conflict handling model is simple and
"non\-destructive" while preserving single document semantics and allowing for
decentralized conflict resolution.
.sp
CouchDB allows for any number of conflicting documents to exist
simultaneously in the database, with each database instance deterministically
deciding which document is the "winner" and which are conflicts. Only the
winning document can appear in views, while "losing" conflicts are still
accessible and remain in the database until deleted or purged during
database compaction. Because conflict documents are still regular documents,
they replicate just like regular documents and are subject to the same
security and validation rules.
.sp
When distributed edit conflicts occur, every database replica sees the same
winning revision and each has the opportunity to resolve the conflict.
Resolving conflicts can be done manually or, depending on the nature of the
data and the conflict, by automated agents. The system makes decentralized
conflict resolution possible while maintaining single document database
semantics.
.sp
Conflict management continues to work even if multiple disconnected users or
agents attempt to resolve the same conflicts. If resolved conflicts result in
more conflicts, the system accommodates them in the same manner, determining
the same winner on each machine and maintaining single document semantics.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fIreplication/conflicts\fP
.UNINDENT
.UNINDENT
.SS Applications
.sp
Using just the basic replication model, many traditionally single server
database applications can be made distributed with almost no extra work.
CouchDB replication is designed to be immediately useful for basic database
applications, while also being extendable for more elaborate and full\-featured
uses.
.sp
With very little database work, it is possible to build a distributed
document management application with granular security and full revision
histories. Updates to documents can be implemented to exploit incremental
field and blob replication, where replicated updates are nearly as efficient
and incremental as the actual edit differences ("diffs").
.sp
The CouchDB replication model can be modified for other distributed update
models. If the storage engine is enhanced to allow multi\-document update
transactions, it is possible to perform Subversion\-like "all or nothing"
atomic commits when replicating with an upstream server, such that any single
document conflict or validation failure will cause the entire update to fail.
Like Subversion, conflicts would be resolved by doing a "pull" replication to
force the conflicts locally, then merging and  re\-replicating to the upstream
server.
.SS Implementation
.sp
CouchDB is built on the \fI\%Erlang OTP platform\fP, a functional,
concurrent programming language and development platform. Erlang was
developed for real\-time telecom applications with an extreme emphasis on
reliability and availability.
.sp
Both in syntax and semantics, Erlang is very different from conventional
programming languages like C or Java. Erlang uses lightweight "processes" and
message passing for concurrency, it has no shared state threading and all
data is immutable. The robust, concurrent nature of Erlang is ideal for a
database server.
.sp
CouchDB is designed for lock\-free concurrency, in the conceptual model and
the actual Erlang implementation. Reducing bottlenecks and avoiding locks
keeps the entire system working predictably under heavy loads. CouchDB can
accommodate many clients replicating changes, opening and updating documents,
and querying views whose indexes are simultaneously being refreshed for
other clients, without needing locks.
.sp
For higher availability and more concurrent users, CouchDB is designed for
"shared nothing" clustering. In a "shared nothing" cluster, each machine
is independent and replicates data with its cluster mates, allowing individual
server failures with zero downtime. And because consistency scans
and fix\-ups aren’t needed on restart,
if the entire cluster fails \-\- due to a power outage in a datacenter,
for example \-\- the entire CouchDB distributed system becomes immediately
available after a restart.
.sp
CouchDB is built from the start with a consistent vision of a distributed
document database system. Unlike cumbersome attempts to bolt distributed
features on top of the same legacy models and databases,
it is the result of careful ground\-up design, engineering and integration.
The document, view, security and replication models, the special purpose query
language, the efficient and robust disk layout and the concurrent and reliable
nature of the Erlang platform are all carefully integrated for a reliable
and efficient system.
.SS Why CouchDB?
.sp
Apache CouchDB is one of a new breed of database management systems.
This topic explains why there\(aqs a need for new systems as well as the
motivations behind building CouchDB.
.sp
As CouchDB developers, we\(aqre naturally very excited to be using CouchDB.
In this topic we\(aqll share with you the reasons for our enthusiasm.
We\(aqll show you how CouchDB\(aqs schema\-free document model is a better fit
for common applications, how the built\-in query engine is a powerful way
to use and process your data, and how CouchDB\(aqs design lends itself
to modularization and scalability.
.SS Relax
.sp
If there\(aqs one word to describe CouchDB, it is \fIrelax\fP\&. It is the byline
to CouchDB\(aqs official logo and when you start CouchDB, you see:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Apache CouchDB has started. Time to relax.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Why is relaxation important? Developer productivity roughly doubled in the
last five years. The chief reason for the boost is more powerful tools that
are easier to use. Take Ruby on Rails as an example. It is an infinitely
complex framework, but it\(aqs easy to get started with. Rails is a success
story because of the core design focus on ease of use. This is one reason why
CouchDB is relaxing: learning CouchDB and understanding its core concepts
should feel natural to most everybody who has been doing any work on the Web.
And it is still pretty easy to explain to non\-technical people.
.sp
Getting out of the way when creative people try to build specialized
solutions is in itself a core feature and one thing that CouchDB aims to get
right. We found existing tools too cumbersome to work with during development
or in production, and decided to focus on making CouchDB easy, even a pleasure,
to use.
.sp
Another area of relaxation for CouchDB users is the production setting.
If you have a live running application, CouchDB again goes out of its way
to avoid troubling you. Its internal architecture is fault\-tolerant,
and failures occur in a controlled environment and are dealt with gracefully.
Single problems do not cascade through an entire server system but stay
isolated in single requests.
.sp
CouchDB\(aqs core concepts are simple (yet powerful) and well understood.
Operations teams (if you have a team; otherwise, that\(aqs you) do not have to
fear random behavior and untraceable errors. If anything should go wrong,
you can easily find out what the problem is, but these situations are rare.
.sp
CouchDB is also designed to handle varying traffic gracefully. For instance,
if a website is experiencing a sudden spike in traffic, CouchDB will generally
absorb a lot of concurrent requests without falling over. It may take a little
more time for each request, but they all get answered. When the spike is over,
CouchDB will work with regular speed again.
.sp
The third area of relaxation is growing and shrinking the underlying hardware
of your application. This is commonly referred to as scaling. CouchDB enforces
a set of limits on the programmer. On first look, CouchDB might seem
inflexible, but some features are left out by design for the simple reason
that if CouchDB supported them, it would allow a programmer to create
applications that couldn\(aqt deal with scaling up or down.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
CouchDB doesn\(aqt let you do things that would get you in trouble later on.
This sometimes means you\(aqll have to unlearn best practices you might have
picked up in your current or past work.
.UNINDENT
.UNINDENT
.SS A Different Way to Model Your Data
.sp
We believe that CouchDB will drastically change the way you build
document\-based applications. CouchDB combines an intuitive document storage
model with a powerful query engine in a way that\(aqs so simple you\(aqll probably
be tempted to ask, “Why has no one built something like this before?”
.INDENT 0.0
.INDENT 3.5
Django may be built for the Web, but CouchDB is built of the Web. I\(aqve
never seen software that so completely embraces the philosophies behind
HTTP. CouchDB makes Django look old\-school in the same way that Django
makes ASP look outdated.
\(em Jacob Kaplan\-Moss, Django developer
.UNINDENT
.UNINDENT
.sp
CouchDB\(aqs design borrows heavily from web architecture and the concepts of
resources, methods, and representations. It augments this with powerful ways
to query, map, combine, and filter your data. Add fault tolerance, extreme
scalability, and incremental replication, and CouchDB defines a sweet spot
for document databases.
.SS A Better Fit for Common Applications
.sp
We write software to improve our lives and the lives of others. Usually this
involves taking some mundane information such as contacts, invoices,
or receipts and manipulating it using a computer application. CouchDB is a
great fit for common applications like this because it embraces the natural
idea of evolving, self\-contained documents as the very core of its data model.
.SS Self\-Contained Data
.sp
An invoice contains all the pertinent information about a single transaction
the seller, the buyer, the date, and a list of the items or services sold.
As shown in \fIintro/why\-01\fP, there\(aqs no abstract reference on this
piece of paper that points to some other piece of paper with the seller\(aqs
name and address. Accountants appreciate the simplicity of having everything
in one place. And given the choice, programmers appreciate that, too.
.INDENT 0.0
.INDENT 2.5
[image: Self-contained documents]
[image]
Figure 1. Self\-contained documents.UNINDENT
.UNINDENT
.sp
Yet using references is exactly how we model our data in a relational
database! Each invoice is stored in a table as a row that refers to other
rows in other tables one row for seller information, one for the buyer,
one row for each item billed, and more rows still to describe the item
details, manufacturer details, and so on and so forth.
.sp
This isn\(aqt meant as a detraction of the relational model, which is widely
applicable and extremely useful for a number of reasons. Hopefully, though, it
illustrates the point that sometimes your model may not “fit” your data
in the way it occurs in the real world.
.sp
Let\(aqs take a look at the humble contact database to illustrate a different
way of modeling data, one that more closely “fits” its real\-world counterpart
\-\- a pile of business cards. Much like our invoice example, a business card
contains all the important information, right there on the cardstock.
We call this “self\-contained” data, and it\(aqs an important concept
in understanding document databases like CouchDB.
.SS Syntax and Semantics
.sp
Most business cards contain roughly the same information \-\- someone\(aqs identity,
an affiliation, and some contact information. While the exact form of this
information can vary between business cards, the general information being
conveyed remains the same, and we\(aqre easily able to recognize it as a
business card. In this sense, we can describe a business card as a \fIreal\-world
document\fP\&.
.sp
Jan\(aqs business card might contain a phone number but no fax number,
whereas J. Chris\(aqs business card contains both a phone and a fax number. Jan
does not have to make his lack of a fax machine explicit by writing something
as ridiculous as “Fax: None” on the business card. Instead, simply omitting
a fax number implies that he doesn\(aqt have one.
.sp
We can see that real\-world documents of the same type, such as business cards,
tend to be very similar in \fIsemantics\fP \-\- the sort of information they carry,
but can vary hugely in \fIsyntax\fP, or how that information is structured. As human
beings, we\(aqre naturally comfortable dealing with this kind of variation.
.sp
While a traditional relational database requires you to model your data
\fIup front\fP, CouchDB\(aqs schema\-free design unburdens you with a powerful way to
aggregate your data \fIafter the fact\fP, just like we do with real\-world
documents. We\(aqll look in depth at how to design applications with this
underlying storage paradigm.
.SS Building Blocks for Larger Systems
.sp
CouchDB is a storage system useful on its own. You can build many applications
with the tools CouchDB gives you. But CouchDB is designed with a bigger picture
in mind. Its components can be used as building blocks that solve storage
problems in slightly different ways for larger and more complex systems.
.sp
Whether you need a system that\(aqs crazy fast but isn\(aqt too concerned with
reliability (think logging), or one that guarantees storage in two or more
physically separated locations for reliability, but you\(aqre willing to take a
performance hit, CouchDB lets you build these systems.
.sp
There are a multitude of knobs you could turn to make a system work better in
one area, but you\(aqll affect another area when doing so. One example would be
the CAP theorem discussed in \fIintro/consistency\fP\&. To give you an idea of
other things that affect storage systems, see
\fIFigure 2\fP and \fIFigure 3\fP\&.
.sp
By reducing latency for a given system (and that is true not only for storage
systems), you affect concurrency and throughput capabilities.
.INDENT 0.0
.INDENT 2.5
[image: Throughput, latency, or concurrency]
[image]
Figure 2. Throughput, latency, or concurrency.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 2.5
[image: Scaling: read requests, write requests, or data]
[image]
Figure 3. Scaling: read requests, write requests, or data.UNINDENT
.UNINDENT
.sp
When you want to scale out, there are three distinct issues to deal with:
scaling read requests, write requests, and data. Orthogonal to all three and
to the items shown in \fIFigure 2\fP and \fIFigure 3\fP are many more attributes like reliability or simplicity.
You can draw many of these graphs that show how different features or attributes
pull into different directions and thus shape the system they describe.
.sp
CouchDB is very flexible and gives you enough building blocks to create a
system shaped to suit your exact problem. That\(aqs not saying that CouchDB can
be bent to solve any problem \-\- CouchDB is no silver bullet \-\- but in the
area of data storage, it can get you a long way.
.SS CouchDB Replication
.sp
CouchDB replication is one of these building blocks. Its fundamental function
is to synchronize two or more CouchDB databases. This may sound simple,
but the simplicity is key to allowing replication to solve a number of
problems: reliably synchronize databases between multiple machines for
redundant data storage; distribute data to a cluster of CouchDB instances
that share a subset of the total number of requests that hit the cluster
(load balancing); and distribute data between physically distant locations,
such as one office in New York and another in Tokyo.
.sp
CouchDB replication uses the same REST API all clients use. HTTP is
ubiquitous and well understood. Replication works incrementally; that is,
if during replication anything goes wrong, like dropping your network
connection, it will pick up where it left off the next time it runs. It also
only transfers data that is needed to synchronize databases.
.sp
A core assumption CouchDB makes is that things can go wrong,
like network connection troubles, and it is designed for graceful error
recovery instead of assuming all will be well. The replication system\(aqs
incremental design shows that best. The ideas behind “things that can go
wrong” are embodied in the \fI\%Fallacies of Distributed Computing\fP:
.INDENT 0.0
.IP \(bu 2
The network is reliable.
.IP \(bu 2
Latency is zero.
.IP \(bu 2
Bandwidth is infinite.
.IP \(bu 2
The network is secure.
.IP \(bu 2
Topology doesn\(aqt change.
.IP \(bu 2
There is one administrator.
.IP \(bu 2
Transport cost is zero.
.IP \(bu 2
The network is homogeneous.
.UNINDENT
.sp
Existing tools often try to hide the fact that there is a network and that
any or all of the previous conditions don\(aqt exist for a particular system.
This usually results in fatal error scenarios when something finally goes
wrong. In contrast, CouchDB doesn\(aqt try to hide the network; it just handles
errors gracefully and lets you know when actions on your end are required.
.SS Local Data Is King
.sp
CouchDB takes quite a few lessons learned from the Web,
but there is one thing that could be improved about the Web: latency.
Whenever you have to wait for an application to respond or a website to
render, you almost always wait for a network connection that isn\(aqt as fast as
you want it at that point. Waiting a few seconds instead of milliseconds
greatly affects user experience and thus user satisfaction.
.sp
What do you do when you are offline? This happens all the time \-\- your DSL or
cable provider has issues, or your iPhone, G1, or Blackberry has no bars,
and no connectivity means no way to get to your data.
.sp
CouchDB can solve this scenario as well, and this is where scaling is
important again. This time it is scaling down. Imagine CouchDB installed on
phones and other mobile devices that can synchronize data with centrally
hosted CouchDBs when they are on a network. The synchronization is not bound
by user interface constraints like sub\-second response times. It is easier to
tune for high bandwidth and higher latency than for low bandwidth and very
low latency. Mobile applications can then use the local CouchDB to fetch
data, and since no remote networking is required for that,
latency is low by default.
.sp
Can you really use CouchDB on a phone? Erlang, CouchDB\(aqs implementation
language has been designed to run on embedded devices magnitudes smaller and
less powerful than today\(aqs phones.
.SS Wrapping Up
.sp
The next document \fIintro/consistency\fP further explores the distributed
nature of CouchDB. We should have given you enough bites to whet your interest.
Let\(aqs go!
.SS Eventual Consistency
.sp
In the previous document \fIintro/why\fP, we saw that CouchDB\(aqs flexibility
allows us to evolve our data as our applications grow and change. In this topic,
we\(aqll explore how working "with the grain" of CouchDB promotes simplicity in
our applications and helps us naturally build scalable, distributed systems.
.SS Working with the Grain
.sp
A \fIdistributed system\fP is a system that operates robustly over a wide network.
A particular feature of network computing is that network links can
potentially disappear, and there are plenty of strategies for managing this
type of network segmentation. CouchDB differs from others by accepting
eventual consistency, as opposed to putting absolute consistency ahead of raw
availability, like \fI\%RDBMS\fP or \fI\%Paxos\fP\&. What these systems have in common is
an awareness that data acts differently when many people are accessing it
simultaneously. Their approaches differ when it comes to which aspects of
\fIconsistency\fP, \fIavailability\fP, or \fIpartition\fP tolerance they prioritize.
.sp
Engineering distributed systems is tricky. Many of the caveats and "gotchas"
you will face over time aren\(aqt immediately obvious. We don\(aqt have all the
solutions, and CouchDB isn\(aqt a panacea, but when you work with CouchDB\(aqs
grain rather than against it, the path of least resistance leads you to
naturally scalable applications.
.sp
Of course, building a distributed system is only the beginning. A website
with a database that is available only half the time is next to worthless.
Unfortunately, the traditional relational database approach to consistency
makes it very easy for application programmers to rely on global state,
global clocks, and other high availability no\-nos, without even realizing
that they\(aqre doing so. Before examining how CouchDB promotes scalability,
we\(aqll look at the constraints faced by a distributed system. After we\(aqve seen
the problems that arise when parts of your application can\(aqt rely on being
in constant contact with each other, we\(aqll see that CouchDB provides an
intuitive and useful way for modeling applications around high availability.
.SS The CAP Theorem
.sp
The CAP theorem describes a few different strategies for distributing
application logic across networks. CouchDB\(aqs solution uses replication to
propagate application changes across participating nodes. This is a
fundamentally different approach from consensus algorithms and relational
databases, which operate at different intersections of consistency,
availability, and partition tolerance.
.sp
The CAP theorem, shown in \fIintro/consistency\-01\fP,
identifies three distinct concerns:
.INDENT 0.0
.IP \(bu 2
\fBConsistency\fP:
All database clients see the same data, even with concurrent updates.
.IP \(bu 2
\fBAvailability\fP:
All database clients are able to access some version of the data.
.IP \(bu 2
\fBPartition tolerance\fP:
The database can be split over multiple servers.
.UNINDENT
.sp
Pick two.
.INDENT 0.0
.INDENT 2.5
[image: The CAP theorem]
[image]
Figure 1. The CAP theorem.UNINDENT
.UNINDENT
.sp
When a system grows large enough that a single database node is unable to
handle the load placed on it, a sensible solution is to add more servers.
When we add nodes, we have to start thinking about how to partition data
between them. Do we have a few databases that share exactly the same data?
Do we put different sets of data on different database servers?
Do we let only certain database servers write data and let others handle
the reads?
.sp
Regardless of which approach we take, the one problem we\(aqll keep bumping into
is that of keeping all these database servers in sync. If you write some
information to one node, how are you going to make sure that a read request
to another database server reflects this newest information? These events
might be milliseconds apart. Even with a modest collection of database
servers, this problem can become extremely complex.
.sp
When it\(aqs absolutely critical that all clients see a consistent view of the
database, the users of one node will have to wait for any other nodes to come
into agreement before being able to read or write to the database.
In this instance, we see that availability takes a backseat to consistency.
However, there are situations where availability trumps consistency:
.INDENT 0.0
.INDENT 3.5
Each node in a system should be able to make decisions purely based on
local state. If you need to do something under high load with failures
occurring and you need to reach agreement, you\(aqre lost. If you\(aqre
concerned about scalability, any algorithm that forces you to run
agreement will eventually become your bottleneck. Take that as a given.
\(em Werner Vogels, Amazon CTO and Vice President
.UNINDENT
.UNINDENT
.sp
If availability is a priority, we can let clients write data to one node of
the database without waiting for other nodes to come into agreement.
If the database knows how to take care of reconciling these operations between
nodes, we achieve a sort of "eventual consistency" in exchange for high
availability. This is a surprisingly applicable trade\-off for many applications.
.sp
Unlike traditional relational databases, where each action performed is
necessarily subject to database\-wide consistency checks,
CouchDB makes it really simple to build applications that sacrifice immediate
consistency for the huge performance improvements that come with simple
distribution.
.SS Local Consistency
.sp
Before we attempt to understand how CouchDB operates in a cluster,
it\(aqs important that we understand the inner workings of a single CouchDB node.
The CouchDB API is designed to provide a convenient but thin wrapper around
the database core. By taking a closer look at the structure of the database
core, we\(aqll have a better understanding of the API that surrounds it.
.SS The Key to Your Data
.sp
At the heart of CouchDB is a powerful \fIB\-tree\fP storage engine.
A B\-tree is a sorted data structure that allows for searches, insertions,
and deletions in logarithmic time. As \fIintro/consistency\-02\fP
illustrates, CouchDB uses this B\-tree storage engine for all internal data,
documents, and views. If we understand one, we will understand them all.
.INDENT 0.0
.INDENT 2.5
[image: Anatomy of a view request]
[image]
Figure 2. Anatomy of a view request.UNINDENT
.UNINDENT
.sp
CouchDB uses MapReduce to compute the results of a view. MapReduce makes use
of two functions, "map" and "reduce", which are applied to each document in
isolation. Being able to isolate these operations means that view computation
lends itself to parallel and incremental computation. More important,
because these functions produce key/value pairs, CouchDB is able to insert
them into the B\-tree storage engine, sorted by key. Lookups by key,
or key range, are extremely efficient operations with a B\-tree,
described in \fIbig O\fP notation as \fBO(log N)\fP and \fBO(log N + K)\fP,
respectively.
.sp
In CouchDB, we access documents and view results by key or key range.
This is a direct mapping to the underlying operations performed on CouchDB\(aqs
B\-tree storage engine. Along with document inserts and updates,
this direct mapping is the reason we describe CouchDB\(aqs API as being a thin
wrapper around the database core.
.sp
Being able to access results by key alone is a very important restriction
because it allows us to make huge performance gains. As well as the massive
speed improvements, we can partition our data over multiple nodes,
without affecting our ability to query each node in isolation.
\fI\%BigTable\fP, \fI\%Hadoop\fP, \fI\%SimpleDB\fP, and \fI\%memcached\fP restrict object lookups
by key for  exactly these reasons.
.SS No Locking
.sp
A table in a relational database is a single data structure. If you want to
modify a table \-\- say, update a row \-\- the database system must ensure
that nobody else is trying to update that row and that nobody can read from
that row while it is being updated. The common way to handle this uses what\(aqs
known as a lock. If multiple clients want to access a table, the first client
gets the lock, making everybody else wait. When the first client\(aqs request is
processed, the next client is given access while everybody else waits,
and so on. This serial execution of requests, even when they arrived in
parallel, wastes a significant amount of your server\(aqs processing power.
Under high load, a relational database can spend more time figuring out who
is allowed to do what, and in which order, than it does doing any actual work.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Modern relational databases avoid locks by implementing MVCC under
the hood, but hide it from the end user, requiring them to coordinate
concurrent changes of single rows or fields.
.UNINDENT
.UNINDENT
.sp
Instead of locks, CouchDB uses \fIMulti\-Version Concurrency Control\fP (MVCC) to
manage concurrent access to the database. \fIintro/consistency\-03\fP
illustrates the differences between MVCC and traditional locking mechanisms.
MVCC means that CouchDB can run at full speed, all the time,
even under high load. Requests are run in parallel, making excellent use of
every last drop of processing power your server has to offer.
.INDENT 0.0
.INDENT 2.5
[image: MVCC means no locking]
[image]
Figure 3. MVCC means no locking.UNINDENT
.UNINDENT
.sp
Documents in CouchDB are versioned, much like they would be in a regular
version control system such as \fI\%Subversion\fP\&. If you want to change
a value in a document, you create an entire new version of that document
and save it over the old one. After doing this, you end up with two versions
of the same document, one old and one new.
.sp
How does this offer an improvement over locks? Consider a set of requests
wanting to access a document. The first request reads the document.
While this is being processed, a second request changes the document.
Since the second request includes a completely new version of the document,
CouchDB can simply append it to the database without having to wait for the
read request to finish.
.sp
When a third request wants to read the same document, CouchDB will point it
to the new version that has just been written. During this whole process,
the first request could still be reading the original version.
.sp
A read request will always see the most recent snapshot of your database at
the time of the beginning of the request.
.SS Validation
.sp
As application developers, we have to think about what sort of input we
should accept and what we should reject. The expressive power to do this type
of validation over complex data within a traditional relational database
leaves a lot to be desired. Fortunately, CouchDB provides a powerful way to
perform per\-document validation from within the database.
.sp
CouchDB can validate documents using JavaScript functions similar to those
used for MapReduce. Each time you try to modify a document,
CouchDB will pass the validation function a copy of the existing document,
a copy of the new document, and a collection of additional information,
such as user authentication details. The validation function now has the
opportunity to approve or deny the update.
.sp
By working with the grain and letting CouchDB do this for us,
we save ourselves a tremendous amount of CPU cycles that would otherwise have
been spent serializing object graphs from SQL, converting them into domain
objects, and using those objects to do application\-level validation.
.SS Distributed Consistency
.sp
Maintaining consistency within a single database node is relatively easy for
most databases. The real problems start to surface when you try to maintain
consistency between multiple database servers. If a client makes a write
operation on server \fIA\fP, how do we make sure that this is consistent with
server \fIB\fP, or \fIC\fP, or \fID\fP? For relational databases, this is a very complex
problem with entire books devoted to its solution. You could use
multi\-master, single\-master, partitioning, sharding, write\-through caches,
and all sorts of other complex techniques.
.SS Incremental Replication
.sp
CouchDB\(aqs operations take place within the context of a single document.
As CouchDB achieves eventual consistency between multiple databases by using
incremental replication you no longer have to worry about your database
servers being able to stay in constant communication. Incremental replication
is a process where document changes are periodically copied between servers.
We are able to build what\(aqs known as a \fIshared nothing\fP cluster of databases
where each node is independent and self\-sufficient, leaving no single point
of contention across the system.
.sp
Need to scale out your CouchDB database cluster? Just throw in another server.
.sp
As illustrated in \fIintro/consistency\-04\fP, with CouchDB\(aqs incremental
replication, you can synchronize your data between any two databases however
you like and whenever you like. After replication, each database is able
to work independently.
.sp
You could use this feature to synchronize database servers within a cluster
or between data centers using a job scheduler such as cron,
or you could use it to synchronize data with your laptop for offline work as
you travel. Each database can be used in the usual fashion,
and changes between databases can be synchronized later in both directions.
.INDENT 0.0
.INDENT 2.5
[image: Incremental replication between CouchDB nodes]
[image]
Figure 4. Incremental replication between CouchDB nodes.UNINDENT
.UNINDENT
.sp
What happens when you change the same document in two different databases and
want to synchronize these with each other? CouchDB\(aqs replication system
comes with automatic conflict detection and resolution. When CouchDB detects
that a document has been changed in both databases, it flags this document
as being in conflict, much like they would be in a regular version control
system.
.sp
This isn\(aqt as troublesome as it might first sound. When two versions of a
document conflict during replication, the winning version is saved as the
most recent version in the document\(aqs history. Instead of throwing the losing
version away, as you might expect, CouchDB saves this as a previous version
in the document\(aqs history, so that you can access it if you need to. This
happens automatically and consistently, so both databases will make exactly
the same choice.
.sp
It is up to you to handle conflicts in a way that makes sense for your
application. You can leave the chosen document versions in place,
revert to the older version, or try to merge the two versions and save the
result.
.SS Case Study
.sp
Greg Borenstein, a friend and coworker, built a small library for converting
Songbird playlists to JSON objects and decided to store these in CouchDB as
part of a backup application. The completed software uses CouchDB\(aqs MVCC and
document revisions to ensure that Songbird playlists are backed up robustly
between nodes.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
\fI\%Songbird\fP is a free software media player with an integrated web browser,
based on the Mozilla XULRunner platform. Songbird is available for Microsoft
Windows, Apple Mac OS X, Solaris, and Linux.
.UNINDENT
.UNINDENT
.sp
Let\(aqs examine the workflow of the Songbird backup application,
first as a user backing up from a single computer, and then using Songbird to
synchronize playlists between multiple computers. We\(aqll see how document
revisions turn what could have been a hairy problem into something that \fIjust
works\fP\&.
.sp
The first time we use this backup application, we feed our playlists to the
application and initiate a backup. Each playlist is converted to a JSON
object and handed to a CouchDB database. As illustrated in
\fIintro/consistency\-05\fP, CouchDB hands back the document ID and
revision of each playlist as it\(aqs saved to the database.
.INDENT 0.0
.INDENT 2.5
[image: Backing up to a single database]
[image]
Figure 5. Backing up to a single database.UNINDENT
.UNINDENT
.sp
After a few days, we find that our playlists have been updated and we want to
back up our changes. After we have fed our playlists to the backup
application, it fetches the latest versions from CouchDB,
along with the corresponding document revisions. When the application hands
back the new playlist document, CouchDB requires that the document revision
is included in the request.
.sp
CouchDB then makes sure that the document revision handed to it in the
request matches the current revision held in the database. Because CouchDB
updates the revision with every modification, if these two are out of sync it
suggests that someone else has made changes to the document between the time
we requested it from the database and the time we sent our updates. Making
changes to a document after someone else has modified it without first
inspecting those changes is usually a bad idea.
.sp
Forcing clients to hand back the correct document revision is the heart of
CouchDB\(aqs optimistic concurrency.
.sp
We have a laptop we want to keep synchronized with our desktop computer.
With all our playlists on our desktop, the first step is to
"restore from backup" onto our laptop. This is the first time we\(aqve done this,
so afterward our laptop  should hold an exact replica of our desktop playlist
collection.
.sp
After editing our Argentine Tango playlist on our laptop to add a few new
songs we\(aqve purchased, we want to save our changes. The backup application
replaces the playlist document in our laptop CouchDB database and a new
document revision is generated. A few days later, we remember our new songs
and want to copy the playlist across to our desktop computer. As illustrated
in \fIintro/consistency\-06\fP, the backup application copies the new document
and the new revision to the desktop CouchDB database. Both CouchDB databases
now have the same document revision.
.INDENT 0.0
.INDENT 2.5
[image: Synchronizing between two databases]
[image]
Figure 6. Synchronizing between two databases.UNINDENT
.UNINDENT
.sp
Because CouchDB tracks document revisions, it ensures that updates like these
will work only if they are based on current information. If we had made
modifications to the playlist backups between synchronization,
things wouldn\(aqt go as smoothly.
.sp
We back up some changes on our laptop and forget to synchronize. A few days
later, we\(aqre editing playlists on our desktop computer, make a backup,
and want to synchronize this to our laptop. As illustrated in
\fIintro/consistency\-07\fP, when our backup application tries to replicate
between the two databases, CouchDB sees that the changes being sent from our
desktop computer are modifications of out\-of\-date documents and helpfully
informs us that there has been a conflict.
.sp
Recovering from this error is easy to accomplish from an application
perspective. Just download CouchDB\(aqs version of the playlist and provide an
opportunity to merge the changes or save local modifications into a new
playlist.
.INDENT 0.0
.INDENT 2.5
[image: Synchronization conflicts between two databases]
[image]
Figure 7. Synchronization conflicts between two databases.UNINDENT
.UNINDENT
.SS Wrapping Up
.sp
CouchDB\(aqs design borrows heavily from web architecture and the lessons
learned deploying massively distributed systems on that architecture.
By understanding why this architecture works the way it does,
and by learning to spot which parts of your application can be easily
distributed and which parts cannot, you\(aqll enhance your ability to design
distributed and scalable applications, with CouchDB or without it.
.sp
We\(aqve covered the main issues surrounding CouchDB\(aqs consistency model and
hinted at some of the benefits to be had when you work \fIwith\fP CouchDB and not
against it. But enough theory \-\- let\(aqs get up and running and see what all the
fuss is about!
.SS cURL: Your Command Line Friend
.sp
The \fBcurl\fP utility is a command line tool available on Unix, Linux,
Mac OS X and Windows and many other platforms. \fBcurl\fP provides easy
access to the HTTP protocol (among others) directly from the
command\-line and is therefore an ideal way of interacting with CouchDB
over the HTTP REST API.
.sp
For simple \fBGET\fP requests you can supply the URL of the request. For
example, to get the database information:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
shell> curl http://127.0.0.1:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This returns the database information (formatted in the output below for
clarity):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "couchdb": "Welcome",
    "version": "2.0.0",
    "vendor": {
        "name": "The Apache Software Foundation"
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
For some URLs, especially those that include special characters such as
ampersand, exclamation mark, or question mark, you should quote the URL you
are specifying on the command line. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
shell> curl \(aqhttp://couchdb:5984/_uuids?count=5\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
On Microsoft Windows, use double\-quotes anywhere you see single\-quotes in
the following examples. Use doubled double\-quotes ("") anywhere you see
single quotes. For example, if you see:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
shell> curl \-X PUT \(aqhttp:/127.0.0.1:5984/demo/doc\(aq \-d \(aq{"motto": "I love gnomes"}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
you should replace it with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
shell> curl \-X PUT "http://127.0.0.1:5984/demo/doc" \-d "{""motto"": ""I love gnomes""}"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you prefer, \fB^"\fP and \fB\e"\fP may be used to escape the double\-quote
character in quoted strings instead.
.UNINDENT
.UNINDENT
.sp
You can explicitly set the HTTP command using the \fB\-X\fP command line option.
For example, when creating a database, you set the name of the database in the
URL you send using a PUT request:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
shell> curl \-X PUT http://127.0.0.1:5984/demo
{"ok":true}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
But to obtain the database information you use a \fBGET\fP request (with
the return information formatted for clarity):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
shell> curl \-X GET http://127.0.0.1:5984/demo
{
    "compact_running" : false,
    "doc_count" : 0,
    "db_name" : "demo",
    "purge_seq" : 0,
    "committed_update_seq" : 0,
    "doc_del_count" : 0,
    "disk_format_version" : 5,
    "update_seq" : 0,
    "instance_start_time" : "0",
    "disk_size" : 79
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For certain operations, you must specify the content type of request, which you
do by specifying the \fBContent\-Type\fP header using the \fB\-H\fP command\-line
option:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
shell> curl \-H \(aqContent\-Type: application/json\(aq http://127.0.0.1:5984/_uuids
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can also submit \(aqpayload\(aq data, that is, data in the body of the HTTP
request using the \fB\-d\fP option. This is useful if you need to submit JSON
structures, for example document data, as part of the request. For example, to
submit a simple document to the \fBdemo\fP database:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
shell> curl \-H \(aqContent\-Type: application/json\(aq \e
            \-X POST http://127.0.0.1:5984/demo \e
            \-d \(aq{"company": "Example, Inc."}\(aq
{"ok":true,"id":"8843faaf0b831d364278331bc3001bd8",
 "rev":"1\-33b9fbce46930280dab37d672bbc8bb9"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the above example, the argument after the \fB\-d\fP option is the JSON of the
document we want to submit.
.sp
The document can be accessed by using the automatically generated document ID
that was returned:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
shell> curl \-X GET http://127.0.0.1:5984/demo/8843faaf0b831d364278331bc3001bd8
{"_id":"8843faaf0b831d364278331bc3001bd8",
 "_rev":"1\-33b9fbce46930280dab37d672bbc8bb9",
 "company":"Example, Inc."}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The API samples in the \fIapi/basics\fP show the HTTP command, URL and any
payload information that needs to be submitted (and the expected return value).
All of these examples can be reproduced using \fBcurl\fP with the command\-line
examples shown above.
.SS Getting Started
.sp
In this document, we\(aqll take a quick tour of CouchDB\(aqs features.
We\(aqll create our first document and experiment with CouchDB views.
.SS All Systems Are Go!
.sp
We\(aqll have a very quick look at CouchDB\(aqs bare\-bones Application Programming
Interface (API) by using the command\-line utility curl. Please note that this
is not the only way of talking to CouchDB. We will show you plenty more
throughout the rest of the documents. What\(aqs interesting about curl is that it
gives you control over raw HTTP requests, and you can see exactly what is
going on "underneath the hood" of your database.
.sp
Make sure CouchDB is still running, and then do:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl http://127.0.0.1:5984/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This issues a GET request to your newly installed CouchDB instance.
.sp
The reply should look something like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "couchdb": "Welcome",
    "vendor": {
        "name": "The Apache Software Foundation"
    },
    "version": "2.0.0"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Not all that spectacular. CouchDB is saying "hello" with the running version
number.
.sp
Next, we can get a list of databases:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X GET http://127.0.0.1:5984/_all_dbs
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
All we added to the previous request is the _all_dbs string.
.sp
The response should look like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
["_replicator","_users"]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Oh, that\(aqs right, we didn\(aqt create any databases yet! All we see is an empty
list.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The curl command issues GET requests by default. You can issue POST requests
using \fBcurl \-X POST\fP\&. To make it easy to work with our terminal history,
we usually use the \fB\-X\fP option even when issuing GET requests.
If we want to send a POST next time, all we have to change is the method.
.sp
HTTP does a bit more under the hood than you can see in the examples here.
If you\(aqre interested in every last detail that goes over the wire,
pass in the \fB\-v\fP option (e.g., \fBcurl \-vX GET\fP), which will show you
the server curl tries to connect to, the request headers it sends,
and response headers it receives back. Great for debugging!
.UNINDENT
.UNINDENT
.sp
Let\(aqs create a database:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT http://127.0.0.1:5984/baseball
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB will reply with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"ok":true}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Retrieving the list of databases again shows some useful results this time:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X GET http://127.0.0.1:5984/_all_dbs
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
["baseball"]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
We should mention JavaScript Object Notation (JSON) here, the data format
CouchDB speaks. JSON is a lightweight data interchange format based on
JavaScript syntax. Because JSON is natively compatible with JavaScript, your
web browser is an ideal client for CouchDB.
.sp
Brackets (\fB[]\fP) represent ordered lists, and curly braces (\fB{}\fP)
represent key/value dictionaries. Keys must be strings, delimited by quotes
(\fB"\fP), and values can be strings, numbers, booleans, lists, or key/value
dictionaries. For a more detailed description of JSON, see Appendix E, JSON
Primer.
.UNINDENT
.UNINDENT
.sp
Let\(aqs create another database:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT http://127.0.0.1:5984/baseball
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB will reply with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"error":"file_exists","reason":"The database could not be created,
the file already exists."}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
We already have a database with that name, so CouchDB will respond with an
error. Let\(aqs try again with a different database name:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT http://127.0.0.1:5984/plankton
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB will reply with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"ok":true}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Retrieving the list of databases yet again shows some useful results:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X GET http://127.0.0.1:5984/_all_dbs
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB will respond with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
["baseball", "plankton"]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To round things off, let\(aqs delete the second database:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X DELETE http://127.0.0.1:5984/plankton
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB will reply with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"ok":true}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The list of databases is now the same as it was before:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X GET http://127.0.0.1:5984/_all_dbs
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB will respond with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
["baseball"]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For brevity, we\(aqll skip working with documents, as the next section covers a
different and potentially easier way of working with CouchDB that should
provide experience with this. As we work through the example,
keep in mind that "under the hood" everything is being done by the
application exactly as you have been doing here manually.
Everything is done using GET, PUT, POST, and DELETE with a URI.
.SS Welcome to Fauxton
.sp
After having seen CouchDB\(aqs raw API, let\(aqs get our feet wet by playing with
Fauxton, the built\-in administration interface. Fauxton provides full access
to all of CouchDB\(aqs features and makes it easy to work with some of the more
complex ideas involved. With Fauxton we can create and destroy databases; view
and edit documents; compose and run MapReduce views; and trigger replication
between databases.
.sp
To load Fauxton in your browser, visit:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
http://127.0.0.1:5984/_utils/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In later documents, we\(aqll focus on using CouchDB from
server\-side languages such as Ruby and Python. As such, this document is a great
opportunity to showcase an example of natively serving up a dynamic web
application using nothing more than CouchDB\(aqs integrated web server, something
you may wish to do with your own applications.
.sp
The first thing we should do with a fresh installation of CouchDB is run the
test suite to verify that everything is working properly. This assures us
that any problems we may run into aren\(aqt due to bothersome issues with our
setup. By the same token, failures in the Fauxton test suite are a red flag,
telling us to double\-check our installation before attempting to use a
potentially broken database server, saving us the confusion when nothing
seems to be working quite like we expect!
.sp
To validate your installation, click on the \fIVerify\fP link on the left\-hand
side, then press the green \fIVerify Installation\fP button. All tests should
pass with a check mark. If any fail, re\-check your installation steps.
.SS Your First Database and Document
.sp
Creating a database in Fauxton is simple. From the overview page,
click "Create Database." When asked for a name, enter hello\-world and click
the Create button.
.sp
After your database has been created, Fauxton will display a list of all its
documents. This list will start out empty, so let\(aqs
create our first document. Click the plus sign next to "All Documents" and
select the "New Doc" link. CouchDB will generate a UUID for you.
.sp
For demoing purposes, having CouchDB assign a UUID is fine. When you write
your first programs, we recommend assigning your own UUIDs. If you rely on
the server to generate the UUID and you end up making two POST requests
because the first POST request bombed out, you might generate two docs and
never find out about the first one because only the second one will be
reported back. Generating your own UUIDs makes sure that you\(aqll never end up
with duplicate documents.
.sp
Fauxton will display the newly created document, with its _id field. To create
a new field, simply use the editor to write valid JSON. Add a new field by
appending a comma to the \fB_id\fP value, then adding the text:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
"hello": "my new value"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Click the green Create Document button to finalize creating the
document.
.sp
You can experiment with other JSON values; e.g., \fB[1, 2, "c"]\fP or
\fB{"foo": "bar"}\fP\&.
.sp
You\(aqll notice that the document\(aqs _rev has been added. We\(aqll go into more detail
about this in later documents, but for now, the important thing to note is
that _rev acts like a safety feature when saving a document. As long as you
and CouchDB agree on the most recent _rev of a document, you can successfully
save your changes.
.sp
For clarity, you may want to display the contents of the document in the all
document view. To enable this, from the upper\-right corner of the window,
select Options, then check the Include Docs option. Finally, press the Run
Query button. The full document should be displayed along with the \fB_id\fP
and \fB_rev\fP values.
.SS Running a Query Using MapReduce
.sp
Traditional relational databases allow you to run any queries you like as
long as your data is structured correctly. In contrast,
CouchDB uses predefined map and reduce functions in a style known as
MapReduce. These functions provide great flexibility because they can adapt
to variations in document structure, and indexes for each document can be
computed independently and in parallel. The combination of a map and a reduce
function is called a view in CouchDB terminology.
.sp
For experienced relational database programmers, MapReduce can take some
getting used to. Rather than declaring which rows from which tables to
include in a result set and depending on the database to determine the most
efficient way to run the query, reduce queries are based on simple range
requests against the indexes generated by your map functions.
.sp
Map functions are called once with each document as the argument.
The function can choose to skip the document altogether or emit one or more
view rows as key/value pairs. Map functions may not depend on any information
outside of the document. This independence is what allows CouchDB views to be
generated incrementally and in parallel.
.sp
CouchDB views are stored as rows that are kept sorted by key. This makes
retrieving data from a range of keys efficient even when there are thousands
or millions of rows. When writing CouchDB map functions,
your primary goal is to build an index that stores related data under nearby
keys.
.sp
Before we can run an example MapReduce view, we\(aqll need some data to run it
on. We\(aqll create documents carrying the price of various supermarket items as
found at different shops. Let\(aqs create documents for apples, oranges,
and bananas. (Allow CouchDB to generate the _id and _rev fields.) Use Fauxton
to create documents that have a final JSON structure that looks like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "00a271787f89c0ef2e10e88a0c0001f4",
    "_rev": "1\-2628a75ac8c3abfffc8f6e30c9949fd6",
    "item": "apple",
    "prices": {
        "Fresh Mart": 1.59,
        "Price Max": 5.99,
        "Apples Express": 0.79
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
OK, now that that\(aqs done, let\(aqs create the document for oranges:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "00a271787f89c0ef2e10e88a0c0003f0",
    "_rev": "1\-e9680c5d9a688b4ff8dd68549e8e072c",
    "item": "orange",
    "prices": {
        "Fresh Mart": 1.99,
        "Price Max": 3.19,
        "Citrus Circus": 1.09
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And finally, the document for bananas:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "00a271787f89c0ef2e10e88a0c00048b",
    "_rev": "1\-60e25d93dc12884676d037400a6fa189",
    "item": "banana",
    "prices": {
        "Fresh Mart": 1.99,
        "Price Max": 0.79,
        "Banana Montana": 4.22
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Imagine we\(aqre catering a big luncheon, but the client is very price\-sensitive.
To find the lowest prices, we\(aqre going to create our first view,
which shows each fruit sorted by price. Click "All Documents" to return to the
hello\-world overview, and then from the "All Documents" plus sign, click "New
View" to create a new view.
.sp
Name the design document \fB_design/myDesignDoc\fP, and set the Index name
to \fBprices\fP\&.
.sp
Edit the map function, on the right, so that it looks like the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    var shop, price, value;
    if (doc.item && doc.prices) {
        for (shop in doc.prices) {
            price = doc.prices[shop];
            value = [doc.item, shop];
            emit(price, value);
        }
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This is a JavaScript function that CouchDB runs for each of our documents as
it computes the view. We\(aqll leave the reduce function blank for the time being.
.sp
Click "Run" and you should see result rows,
with the various items sorted by price. This map function could be even more
useful if it grouped the items by type so that all the prices for bananas were
next to each other in the result set. CouchDB\(aqs key sorting system allows any
valid JSON object as a key. In this case, we\(aqll emit an array of [item, price]
so that CouchDB groups by item type and price.
.sp
Let\(aqs modify the view function (click the wrench icon next to the Views >
prices Design Document on the left, then select Edit) so that it looks like
this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    var shop, price, key;
    if (doc.item && doc.prices) {
        for (shop in doc.prices) {
            price = doc.prices[shop];
            key = [doc.item, price];
            emit(key, shop);
        }
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Here, we first check that the document has the fields we want to use. CouchDB
recovers gracefully from a few isolated map function failures,
but when a map function fails regularly (due to a missing required field or
other JavaScript exception), CouchDB shuts off its indexing to prevent any
further resource usage. For this reason, it\(aqs important to check for the
existence of any fields before you use them. In this case,
our map function will skip the first "hello world" document we created
without emitting any rows or encountering any errors. The result of this
query should now be displayed.
.sp
Once we know we\(aqve got a document with an item type and some prices,
we iterate over the item\(aqs prices and emit key/values pairs. The key is an
array of the item and the price, and forms the basis for CouchDB\(aqs sorted
index. In this case, the value is the name of the shop where the item can be
found for the listed price.
.sp
View rows are sorted by their keys \-\- in this example, first by item,
then by price. This method of complex sorting is at the heart of creating
useful indexes with CouchDB.
.sp
MapReduce can be challenging, especially if you\(aqve spent years working with
relational databases. The important things to keep in mind are that map
functions give you an opportunity to sort your data using any key you choose,
and that CouchDB\(aqs design is focused on providing fast,
efficient access to data within a range of keys.
.SS Triggering Replication
.sp
Fauxton can trigger replication between two local databases,
between a local and remote database, or even between two remote databases.
We\(aqll show you how to replicate data from one local database to another,
which is a simple way of making backups of your databases as we\(aqre working
through the examples.
.sp
First we\(aqll need to create an empty database to be the target of replication.
Return to the Databases overview and create a database called
\fBhello\-replication\fP\&.  Now click "Replication" in the sidebar and choose
hello\-world as the source and hello\-replication as the target. Click
"Replicate" to replicate your database.
.sp
To view the result of your replication, click on the Databases tab again.
You should see the hello\-replication database has the same number of documents
as the hello\-world database, and it should take up roughly the same size as
well.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
For larger databases, replication can take much longer. It is important to
leave the browser window open while replication is taking place.
As an alternative, you can trigger replication via curl or some other HTTP
client that can handle long\-running connections. If your client closes the
connection before replication finishes, you\(aqll have to retrigger it.
Luckily, CouchDB\(aqs replication can take over from where it left off
instead of starting from scratch.
.UNINDENT
.UNINDENT
.SS Wrapping Up
.sp
Now that you\(aqve seen most of Fauxton\(aqs features, you\(aqll be prepared to dive in
and inspect your data as we build our example application in the next few
documents. Fauxton\(aqs pure JavaScript approach to managing CouchDB shows how
it\(aqs possible to build a fully featured web application using only CouchDB\(aqs
HTTP API and integrated web server.
.sp
But before we get there, we\(aqll have another look at CouchDB\(aqs HTTP API \-\- now
with a magnifying glass. Let\(aqs curl up on the couch and relax.
.SS The Core API
.sp
This document explores the CouchDB in minute detail. It shows all the
nitty\-gritty and clever bits. We show you best practices and guide you around
common pitfalls.
.sp
We start out by revisiting the basic operations we ran in the previous document
\fIintro/tour\fP, looking behind the scenes. We also show what Fauxton needs to
do behind its user interface to give us the nice features we saw earlier.
.sp
This document is both an introduction to the core CouchDB API as well as a
reference. If you can\(aqt remember how to run a particular request or why some
parameters are needed, you can always come back here and look things up (we
are probably the heaviest users of this document).
.sp
While explaining the API bits and pieces, we sometimes need to take a larger
detour to explain the reasoning for a particular request. This is a good
opportunity for us to tell you why CouchDB works the way it does.
.sp
The API can be subdivided into the following sections. We\(aqll explore them
individually:
.INDENT 0.0
.IP \(bu 2
\fI\%Server\fP
.IP \(bu 2
\fI\%Databases\fP
.IP \(bu 2
\fI\%Documents\fP
.IP \(bu 2
\fI\%Replication\fP
.IP \(bu 2
\fI\%Wrapping Up\fP
.UNINDENT
.SS Server
.sp
This one is basic and simple. It can serve as a sanity check to see if
CouchDB is running at all. It can also act as a safety guard for libraries
that require a certain version of CouchDB. We\(aqre using the \fI\%curl\fP utility
again:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl http://127.0.0.1:5984/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB replies, all excited to get going:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "couchdb": "Welcome",
    "version": "2.0.0",
    "vendor": {
        "name": "The Apache Software Foundation"
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You get back a JSON string, that, if parsed into a native object or data
structure of your programming language, gives you access to the welcome
string and version information.
.sp
This is not terribly useful, but it illustrates nicely the way CouchDB
behaves. You send an HTTP request and you receive a JSON string in the HTTP
response as a result.
.SS Databases
.sp
Now let\(aqs do something a little more useful: \fIcreate databases\fP\&.
For the strict, CouchDB is a \fIdatabase management system\fP (DMS). That means it
can hold multiple databases. A database is a bucket that holds "related data".
We\(aqll explore later what that means exactly. In practice, the terminology is
overlapping \-\- often people refer to a DMS as "a database" and also a database
within the DMS as "a database." We might follow that slight oddity, so don\(aqt
get confused by it. In general, it should be clear from the context if we are
talking about the whole of CouchDB or a single database within CouchDB.
.sp
Now let\(aqs make one! We want to store our favorite music albums,
and we creatively give our database the name albums. Note that we\(aqre now
using the \fB\-X\fP option again to tell curl to send a \fI\%PUT\fP request
instead of the default \fI\%GET\fP request:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT http://127.0.0.1:5984/albums
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB replies:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"ok":true}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
That\(aqs it. You created a database and CouchDB told you that all went well.
What happens if you try to create a database that already exists? Let\(aqs try
to create that database again:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT http://127.0.0.1:5984/albums
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB replies:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"error":"file_exists","reason":"The database could not be created, the file already exists."}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
We get back an error. This is pretty convenient. We also learn a little bit
about how CouchDB works. CouchDB stores each database in a single file.
Very simple.
.sp
Let\(aqs create another database, this time with curl\(aqs \fB\-v\fP (for "verbose")
option. The verbose option tells curl to show us not only the essentials \-\-
the HTTP response body \-\- but all the underlying request and response details:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-vX PUT http://127.0.0.1:5984/albums\-backup
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
curl elaborates:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
* About to connect() to 127.0.0.1 port 5984 (#0)
*   Trying 127.0.0.1... connected
* Connected to 127.0.0.1 (127.0.0.1) port 5984 (#0)
> PUT /albums\-backup HTTP/1.1
> User\-Agent: curl/7.16.3 (powerpc\-apple\-darwin9.0) libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3
> Host: 127.0.0.1:5984
> Accept: */*
>
< HTTP/1.1 201 Created
< Server: CouchDB (Erlang/OTP)
< Date: Sun, 05 Jul 2009 22:48:28 GMT
< Content\-Type: text/plain;charset=utf\-8
< Content\-Length: 12
< Cache\-Control: must\-revalidate
<
{"ok":true}
* Connection #0 to host 127.0.0.1 left intact
* Closing connection #0
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
What a mouthful. Let\(aqs step through this line by line to understand what\(aqs
going on and find out what\(aqs important. Once you\(aqve seen this output a few
times, you\(aqll be able to spot the important bits more easily.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
* About to connect() to 127.0.0.1 port 5984 (#0)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This is curl telling us that it is going to establish a TCP connection to the
CouchDB server we specified in our request URI. Not at all important,
except when debugging networking issues.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
*   Trying 127.0.0.1... connected
* Connected to 127.0.0.1 (127.0.0.1) port 5984 (#0)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
curl tells us it successfully connected to CouchDB. Again,
not important if you aren\(aqt trying to find problems with your network.
.sp
The following lines are prefixed with \fB>\fP and \fB<\fP characters.
The \fB>\fP means the line was sent to CouchDB verbatim (without the actual
\fB>\fP). The \fB<\fP means the line was sent back to curl by CouchDB.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> PUT /albums\-backup HTTP/1.1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This initiates an HTTP request. Its \fImethod\fP is \fI\%PUT\fP, the \fIURI\fP is
\fB/albums\-backup\fP, and the HTTP version is \fBHTTP/1.1\fP\&. There is also
\fBHTTP/1.0\fP, which is simpler in some cases, but for all practical reasons
you should be using \fBHTTP/1.1\fP\&.
.sp
Next, we see a number of \fIrequest headers\fP\&. These are used to provide
additional details about the request to CouchDB.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> User\-Agent: curl/7.16.3 (powerpc\-apple\-darwin9.0) libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The User\-Agent header tells CouchDB which piece of client software is doing
the HTTP request. We don\(aqt learn anything new: it\(aqs curl. This header is
often useful in web development when there are known errors in client
implementations that a server might want to prepare the response for.
It also helps to determine which platform a user is on. This information
can be used for technical and statistical reasons. For CouchDB, the
\fI\%User\-Agent\fP header is irrelevant.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> Host: 127.0.0.1:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fI\%Host\fP header is required by \fBHTTP 1.1\fP\&. It tells the server
the hostname that came with the request.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> Accept: */*
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fI\%Accept\fP header tells CouchDB that curl accepts any media type.
We\(aqll look into why this is useful a little later.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
An empty line denotes that the request headers are now finished and the rest
of the request contains data we\(aqre sending to the server. In this case,
we\(aqre not sending any data, so the rest of the curl output is dedicated to
the HTTP response.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
< HTTP/1.1 201 Created
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The first line of CouchDB\(aqs HTTP response includes the HTTP version
information (again, to acknowledge that the requested version could be
processed), an HTTP \fIstatus code\fP, and a \fIstatus code message\fP\&.
Different requests trigger different response codes. There\(aqs a whole range of
them telling the client (curl in our case) what effect the request had on the
server. Or, if an error occurred, what kind of error. \fI\%RFC 2616\fP (the HTTP 1.1
specification) defines clear behavior for response codes. CouchDB fully
follows the RFC.
.sp
The \fI\%201 Created\fP status code tells the client that the resource
the request was made against was successfully created. No surprise here,
but if you remember that we got an error message when we tried to create this
database twice, you now know that this response could include a different
response code. Acting upon responses based on response codes is a common
practice. For example, all response codes of \fI\%400 Bad Request\fP or larger
tell you that some error occurred. If you want to shortcut your logic and
immediately deal with the error, you could just check a >= \fB400\fP response
code.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
< Server: CouchDB (Erlang/OTP)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fI\%Server\fP header is good for diagnostics. It tells us which
CouchDB version and which underlying Erlang version we are talking to.
In general, you can ignore this header, but it is good to know it\(aqs there if
you need it.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
< Date: Sun, 05 Jul 2009 22:48:28 GMT
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fI\%Date\fP header tells you the time of the server. Since client
and server time are not necessarily synchronized, this header is purely
informational. You shouldn\(aqt build any critical application logic on top
of this!
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
< Content\-Type: text/plain;charset=utf\-8
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fI\%Content\-Type\fP header tells you which MIME type
the HTTP response body is and its encoding. We already know CouchDB returns
JSON strings. The appropriate \fI\%Content\-Type\fP header is
\fIapplication/json\fP\&. Why do we see \fItext/plain\fP?
This is where pragmatism wins over purity. Sending an
\fIapplication/json\fP \fI\%Content\-Type\fP header will make
a browser offer you the returned JSON for download instead of
just displaying it. Since it is extremely useful to be able to test CouchDB
from a browser, CouchDB sends a \fItext/plain\fP content type, so all
browsers will display the JSON as text.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
There are some extensions that make your browser JSON\-aware,
but they are not installed by default. For more information, look at
the popular \fI\%JSONView\fP extension, available for both Firefox and Chrome.
.UNINDENT
.UNINDENT
.sp
Do you remember the \fI\%Accept\fP request header and how it is set to
\fB*/*\fP to express interest in any MIME type? If you send \fBAccept:
application/json\fP in your request, CouchDB knows that you can deal with a pure
JSON response with the proper \fI\%Content\-Type\fP header and will
use it instead of \fItext/plain\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
< Content\-Length: 12
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fI\%Content\-Length\fP header simply tells us how many bytes
the response body has.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
< Cache\-Control: must\-revalidate
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This \fI\%Cache\-Control\fP header tells you, or any proxy server between
CouchDB and you, not to cache this response.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This empty line tells us we\(aqre done with the response headers and what
follows now is the response body.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"ok":true}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
We\(aqve seen this before.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
* Connection #0 to host 127.0.0.1 left intact
* Closing connection #0
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The last two lines are curl telling us that it kept the TCP connection it
opened in the beginning open for a moment, but then closed it after it
received the entire response.
.sp
Throughout the documents, we\(aqll show more requests with the \fB\-v\fP option,
but we\(aqll omit some of the headers we\(aqve seen here and include only those
that are important for the particular request.
.sp
Creating databases is all fine, but how do we get rid of one? Easy \-\- just
change the HTTP method:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> curl \-vX DELETE http://127.0.0.1:5984/albums\-backup
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This deletes a CouchDB database. The request will remove the file that the
database contents are stored in. There is no \fI"Are you sure?"\fP safety net or
any \fI"Empty the trash"\fP magic you\(aqve got to do to delete a database. Use this
command with care. Your data will be deleted without a chance to bring it
back easily if you don\(aqt have a backup copy.
.sp
This section went knee\-deep into HTTP and set the stage for discussing the
rest of the core CouchDB API. Next stop: documents.
.SS Documents
.sp
Documents are CouchDB\(aqs central data structure. The idea behind a document
is, unsurprisingly, that of a real\-world document \-\- a sheet of paper such as
an invoice, a recipe, or a business card. We already learned that CouchDB uses
the JSON format to store documents. Let\(aqs see how this storing works at the
lowest level.
.sp
Each document in CouchDB has an \fIID\fP\&. This ID is unique per database. You are
free to choose any string to be the ID, but for best results we recommend a
\fI\%UUID\fP (or \fI\%GUID\fP), i.e., a Universally (or Globally) Unique IDentifier.
UUIDs are random numbers that have such a low collision probability that
everybody can make thousands of UUIDs a minute for millions of years without
ever creating a duplicate. This is a great way to ensure two independent people
cannot create two different documents with the same ID. Why should you care
what somebody else is doing? For one, that somebody else could be you at a
later time or on a different computer; secondly, CouchDB replication lets you
share documents with others and using UUIDs ensures that it all works.
But more on that later; let\(aqs make some documents:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT http://127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af \-d \(aq{"title":"There is Nothing Left to Lose","artist":"Foo Fighters"}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB replies:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"ok":true,"id":"6e1295ed6c29495e54cc05947f18c8af","rev":"1\-2902191555"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The curl command appears complex, but let\(aqs break it down.
First, \fB\-X PUT\fP tells curl to make a \fI\%PUT\fP request.
It is followed by the URL that specifies your CouchDB IP address and port.
The resource part of the URL \fB/albums/6e1295ed6c29495e54cc05947f18c8af\fP
specifies the location of a document inside our albums database.
The wild collection of numbers and characters is a UUID. This UUID is your
document\(aqs ID. Finally, the \fB\-d\fP flag tells curl to use the following
string as the body for the \fI\%PUT\fP request. The string is a simple JSON
structure including \fBtitle\fP and \fBartist\fP attributes with their respective
values.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
If you don\(aqt have a UUID handy, you can ask CouchDB to give you one (in
fact, that is what we did just now without showing you). Simply send a
\fBGET /_uuids\fP request:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X GET http://127.0.0.1:5984/_uuids
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB replies:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"uuids":["6e1295ed6c29495e54cc05947f18c8af"]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Voilà, a UUID. If you need more than one, you can pass in the \fB?count=10\fP
HTTP parameter to request 10 UUIDs, or really, any number you need.
.UNINDENT
.UNINDENT
.sp
To double\-check that CouchDB isn\(aqt lying about having saved your document (it
usually doesn\(aqt), try to retrieve it by sending a GET request:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X GET http://127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
We hope you see a pattern here. Everything in CouchDB has an address, a URI,
and you use the different HTTP methods to operate on these URIs.
.sp
CouchDB replies:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"_id":"6e1295ed6c29495e54cc05947f18c8af","_rev":"1\-2902191555","title":"There is Nothing Left to Lose","artist":"Foo Fighters"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This looks a lot like the document you asked CouchDB to save, which is good.
But you should notice that CouchDB added two fields to your JSON structure.
The first is \fB_id\fP, which holds the UUID we asked CouchDB to save our document
under. We always know the ID of a document if it is included, which is very
convenient.
.sp
The second field is \fB_rev\fP\&. It stands for \fIrevision\fP\&.
.SS Revisions
.sp
If you want to change a document in CouchDB, you don\(aqt tell it to go and find
a field in a specific document and insert a new value. Instead, you load
the full document out of CouchDB, make your changes in the JSON structure
(or object, when you are doing actual programming), and save the entire new
revision (or version) of that document back into CouchDB. Each revision is
identified by a new \fB_rev\fP value.
.sp
If you want to update or delete a document, CouchDB expects you to include
the \fB_rev\fP field of the revision you wish to change. When CouchDB accepts
the change, it will generate a new revision number. This mechanism ensures that,
in case somebody else made a change without you knowing before you got to
request the document update, CouchDB will not accept your update because you
are likely to overwrite data you didn\(aqt know existed. Or simplified: whoever
saves a change to a document first, wins. Let\(aqs see what happens if we don\(aqt
provide a \fB_rev\fP field (which is equivalent to providing a outdated value):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT http://127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af \e
     \-d \(aq{"title":"There is Nothing Left to Lose","artist":"Foo Fighters","year":"1997"}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB replies:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"error":"conflict","reason":"Document update conflict."}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you see this, add the latest revision number of your document to the JSON
structure:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT http://127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af \e
     \-d \(aq{"_rev":"1\-2902191555","title":"There is Nothing Left to Lose","artist":"Foo Fighters","year":"1997"}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now you see why it was handy that CouchDB returned that \fB_rev\fP when we made
the initial request. CouchDB replies:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"ok":true,"id":"6e1295ed6c29495e54cc05947f18c8af","rev":"2\-8aff9ee9d06671fa89c99d20a4b3ae"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB accepted your write and also generated a new revision number.
The revision number is the \fIMD5 hash\fP of the transport representation of a
document with an \fBN\-\fP prefix denoting the number of times a document got
updated. This is useful for replication. See \fIreplication/conflicts\fP for
more information.
.sp
There are multiple reasons why CouchDB uses this revision system,
which is also called Multi\-Version Concurrency Control (\fI\%MVCC\fP). They all work
hand\-in\-hand, and this is a good opportunity to explain some of them.
.sp
One of the aspects of the HTTP protocol that CouchDB uses is that it is
stateless. What does that mean? When talking to CouchDB you need to make
requests. Making a request includes opening a network connection to CouchDB,
exchanging bytes, and closing the connection. This is done every time you
make a request. Other protocols allow you to open a connection, exchange bytes,
keep the connection open, exchange more bytes later \-\- maybe depending on the
bytes you exchanged at the beginning \-\- and eventually close the connection.
Holding a connection open for later use requires the server to do extra work.
One common pattern is that for the lifetime of a connection, the client has
a consistent and static view of the data on the server. Managing huge amounts
of parallel connections is a significant amount of work. HTTP connections are
usually short\-lived, and making the same guarantees is a lot easier.
As a result, CouchDB can handle many more concurrent connections.
.sp
Another reason CouchDB uses MVCC is that this model is simpler conceptually
and, as a consequence, easier to program. CouchDB uses less code to make this
work, and less code is always good because the ratio of defects per lines of
code is static.
.sp
The revision system also has positive effects on replication and storage
mechanisms, but we\(aqll explore these later in the documents.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
The terms \fIversion\fP and \fIrevision\fP might sound familiar (if you are
programming without version control, stop reading this guide right now and
start learning one of the popular systems). Using new versions for document
changes works a lot like version control, but there\(aqs an important
difference: \fBCouchDB does not guarantee that older versions are kept
around\fP\&.
.UNINDENT
.UNINDENT
.SS Documents in Detail
.sp
Now let\(aqs have a closer look at our document creation requests with the curl
\fB\-v\fP flag that was helpful when we explored the database API earlier.
This is also a good opportunity to create more documents that we can use in
later examples.
.sp
We\(aqll add some more of our favorite music albums. Get a fresh UUID from the
\fB/_uuids\fP resource. If you don\(aqt remember how that works, you can look it up
a few pages back.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-vX PUT http://127.0.0.1:5984/albums/70b50bfa0a4b3aed1f8aff9e92dc16a0 \e
     \-d \(aq{"title":"Blackened Sky","artist":"Biffy Clyro","year":2002}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
By the way, if you happen to know more information about your favorite
albums, don\(aqt hesitate to add more properties. And don\(aqt worry about not
knowing all the information for all the albums. CouchDB\(aqs schema\-less
documents can contain whatever you know. After all, you should relax and not
worry about data.
.UNINDENT
.UNINDENT
.sp
Now with the \fB\-v\fP option, CouchDB\(aqs reply (with only the important bits shown)
looks like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> PUT /albums/70b50bfa0a4b3aed1f8aff9e92dc16a0 HTTP/1.1
>
< HTTP/1.1 201 Created
< Location: http://127.0.0.1:5984/albums/70b50bfa0a4b3aed1f8aff9e92dc16a0
< ETag: "1\-e89c99d29d06671fa0a4b3ae8aff9e"
<
{"ok":true,"id":"70b50bfa0a4b3aed1f8aff9e92dc16a0","rev":"1\-e89c99d29d06671fa0a4b3ae8aff9e"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
We\(aqre getting back the \fI\%201 Created\fP HTTP status code in the response
headers, as we saw earlier when we created a database. The \fI\%Location\fP
header gives us a full URL to our newly created document. And there\(aqs a new
header. An \fI\%ETag\fP in HTTP\-speak identifies a specific version of a
resource. In this case, it identifies a specific version (the first one) of our
new document. Sound familiar? Yes, conceptually, an \fI\%ETag\fP is the same
as a CouchDB document revision number, and it shouldn\(aqt come as a surprise that
CouchDB uses revision numbers for ETags. ETags are useful for caching
infrastructures.
.SS Attachments
.sp
CouchDB documents can have attachments just like an email message can have
attachments. An attachment is identified by a name and includes its MIME type
(or \fI\%Content\-Type\fP) and the number of bytes the attachment
contains. Attachments can be any data. It is easiest to think about attachments
as files attached to a document. These files can be text, images, Word
documents, music, or movie files. Let\(aqs make one.
.sp
Attachments get their own URL where you can upload data. Say we want to add
the album artwork to the \fB6e1295ed6c29495e54cc05947f18c8af\fP document
(\fI"There is Nothing Left to Lose"\fP), and let\(aqs also say the artwork is in a file
\fIartwork.jpg\fP in the current directory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-vX PUT http://127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af/artwork.jpg?rev=2\-2739352689 \e
     \-\-data\-binary @artwork.jpg \-H "Content\-Type:image/jpg"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The \fB\-\-data\-binary\fP \fB@\fP option tells curl to read a file\(aqs contents into
the HTTP request body. We\(aqre using the \fB\-H\fP option to tell CouchDB that
we\(aqre uploading a JPEG file. CouchDB will keep this information around and
will send the appropriate header when requesting this attachment; in case of
an image like this, a browser will render the image instead of offering you
the data for download. This will come in handy later. Note that you need
to provide the current revision number of the document you\(aqre attaching
the artwork to, just as if you would update the document. Because, after
all, attaching some data is changing the document.
.UNINDENT
.UNINDENT
.sp
You should now see your artwork image if you point your browser to
\fI\%http://127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af/artwork.jpg\fP
.sp
If you request the document again, you\(aqll see a new member:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl http://127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB replies:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "6e1295ed6c29495e54cc05947f18c8af",
    "_rev": "3\-131533518",
    "title": "There is Nothing Left to Lose",
    "artist": "Foo Fighters",
    "year": "1997",
    "_attachments": {
        "artwork.jpg": {
            "stub": true,
            "content_type": "image/jpg",
            "length": 52450
        }
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB_attachments\fP is a list of keys and values where the values are JSON objects
containing the attachment metadata. \fBstub=true\fP tells us that this entry is
just the metadata. If we use the \fB?attachments=true\fP HTTP option when
requesting this document, we\(aqd get a \fI\%Base64\fP encoded string containing the
attachment data.
.sp
We\(aqll have a look at more document request options later as we explore more
features of CouchDB, such as replication, which is the next topic.
.SS Replication
.sp
CouchDB replication is a mechanism to synchronize databases. Much like \fI\%rsync\fP
synchronizes two directories locally or over a network, replication synchronizes
two databases locally or remotely.
.sp
In a simple \fI\%POST\fP request, you tell CouchDB the \fIsource\fP and the
\fItarget\fP of a replication and CouchDB will figure out which documents and new
document revisions are on \fIsource\fP that are not yet on \fItarget\fP, and will
proceed  to move the missing documents and revisions over.
.sp
We\(aqll take an in\-depth look at replication in the document
\fIreplication/intro\fP; in this document, we\(aqll just show you how to use it.
.sp
First, we\(aqll create a target database. Note that CouchDB won\(aqt automatically
create a target database for you, and will return a replication failure if
the target doesn\(aqt exist (likewise for the source, but that mistake isn\(aqt as
easy to make):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT http://127.0.0.1:5984/albums\-replica
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now we can use the database \fIalbums\-replica\fP as a replication target:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-vX POST http://127.0.0.1:5984/_replicate \e
     \-d \(aq{"source":"albums","target":"albums\-replica"}\(aq \e
     \-H "Content\-Type: application/json"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
CouchDB supports the option \fB"create_target":true\fP placed in the JSON
POSTed to the \fI_replicate\fP URL. It implicitly
creates the target database if it doesn\(aqt exist.
.UNINDENT
.UNINDENT
.sp
CouchDB replies (this time we formatted the output so you can read it more
easily):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "history": [
        {
            "start_last_seq": 0,
            "missing_found": 2,
            "docs_read": 2,
            "end_last_seq": 5,
            "missing_checked": 2,
            "docs_written": 2,
            "doc_write_failures": 0,
            "end_time": "Sat, 11 Jul 2009 17:36:21 GMT",
            "start_time": "Sat, 11 Jul 2009 17:36:20 GMT"
        }
    ],
    "source_last_seq": 5,
    "session_id": "924e75e914392343de89c99d29d06671",
    "ok": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB maintains a \fIsession history\fP of replications. The response for a
replication request contains the history entry for this \fIreplication session\fP\&.
It is also worth noting that the request for replication will stay open until
replication closes. If you have a lot of documents, it\(aqll take a while until
they are all replicated and you won\(aqt get back the replication response
until all documents are replicated. It is important to note that
replication replicates the database only as it was at the point in time
when replication was started. So, any additions, modifications,
or deletions subsequent to the start of replication will not be replicated.
.sp
We\(aqll punt on the details again \-\- the \fB"ok": true\fP at the end tells us all
went well. If you now have a look at the albums\-replica database,
you should see all the documents that you created in the albums database.
Neat, eh?
.sp
What you just did is called local replication in CouchDB terms. You created a
local copy of a database. This is useful for backups or to keep snapshots of
a specific state of your data around for later. You might want to do this
if you are developing your applications but want to be able to roll back to
a stable version of your code and data.
.sp
There are more types of replication useful in other situations. The source
and target members of our replication request are actually links (like in
HTML) and so far we\(aqve seen links relative to the server we\(aqre working on
(hence local). You can also specify a remote database as the target:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-vX POST http://127.0.0.1:5984/_replicate \e
     \-d \(aq{"source":"albums","target":"http://example.org:5984/albums\-replica"}\(aq \e
     \-H "Content\-Type:application/json"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Using a \fIlocal source\fP and a \fIremote target\fP database is called \fIpush
replication\fP\&. We\(aqre pushing changes to a remote server.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Since we don\(aqt have a second CouchDB server around just yet, we\(aqll just use
the absolute address of our single server, but you should be able to infer
from this that you can put any remote server in there.
.UNINDENT
.UNINDENT
.sp
This is great for sharing local changes with remote servers or buddies next
door.
.sp
You can also use a \fIremote source\fP and a \fIlocal target\fP to do a \fIpull
replication\fP\&. This is great for getting the latest changes from a server that
is used by others:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-vX POST http://127.0.0.1:5984/_replicate \e
     \-d \(aq{"source":"http://example.org:5984/albums\-replica","target":"albums"}\(aq \e
     \-H "Content\-Type:application/json"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Finally, you can run remote replication, which is mostly useful for management
operations:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-vX POST http://127.0.0.1:5984/_replicate \e
     \-d \(aq{"source":"http://example.org:5984/albums","target":"http://example.org:5984/albums\-replica"}\(aq \e
     \-H"Content\-Type: application/json"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
\fBCouchDB and REST\fP
.sp
CouchDB prides itself on having a \fI\%RESTful\fP API, but these replication
requests don\(aqt look very RESTy to the trained eye. What\(aqs up with that?
While CouchDB\(aqs core database, document, and attachment API are RESTful,
not all of CouchDB\(aqs API is. The replication API is one example. There are
more, as we\(aqll see later in the documents.
.sp
Why are there RESTful and non\-RESTful APIs mixed up here? Have the
developers been too lazy to go REST all the way? Remember, REST is an
architectural style that lends itself to certain architectures (such as the
CouchDB document API). But it is not a one\-size\-fits\-all. Triggering an
event like replication does not make a whole lot of sense in the REST world.
It is more like a traditional remote procedure call. And there is nothing
wrong with this.
.sp
We very much believe in the "use the right tool for the job" philosophy,
and REST does not fit every job. For support, we refer to Leonard Richardson
and Sam Ruby who wrote \fI\%RESTful Web Services\fP (O\(aqReilly), as they share our
view.
.UNINDENT
.UNINDENT
.SS Wrapping Up
.sp
This is still not the full CouchDB API, but we discussed the essentials in
great detail. We\(aqre going to fill in the blanks as we go. For now, we believe
you\(aqre ready to start building CouchDB applications.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fIComplete HTTP API Reference\fP:
.INDENT 0.0
.IP \(bu 2
\fIServer API Reference\fP
.IP \(bu 2
\fIDatabase API Reference\fP
.IP \(bu 2
\fIDocument API Reference\fP
.IP \(bu 2
\fIReplication API\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SS Security
.sp
In this document, we\(aqll look at the basic security mechanisms in CouchDB: the
\fIAdmin Party\fP, \fIBasic Authentication\fP, \fICookie Authentication\fP; how CouchDB
handles users and protects their credentials.
.SS Authentication
.SS The Admin Party
.sp
When you start out fresh, CouchDB allows any request to be made by anyone.
Create a database? No problem, here you go. Delete some documents? Same deal.
CouchDB calls this the \fIAdmin Party\fP\&. Everybody has privileges to do anything.
Neat.
.sp
While it is incredibly easy to get started with CouchDB that way,
it should be obvious that putting a default installation into the wild is
adventurous. Any rogue client could come along and delete a database.
.sp
A note of relief: by default, CouchDB will listen only on your loopback
network interface (\fB127.0.0.1\fP or \fBlocalhost\fP) and thus only you will be
able to make requests to CouchDB, nobody else. But when you start to open up
your CouchDB to the public (that is, by telling it to bind to your machine\(aqs
public IP address), you will want to think about restricting access so that
the next bad guy doesn\(aqt ruin your admin party.
.sp
In our previous discussions, we dropped some keywords about how things
without the \fIAdmin Party\fP work. First, there\(aqs \fIadmin\fP itself, which implies
some sort of super user. Then there are \fIprivileges\fP\&. Let\(aqs explore these terms
a little more.
.sp
CouchDB has the idea of an \fIadmin user\fP (e.g. an administrator, a super user,
or root) that is allowed to do anything to a CouchDB installation. By default,
everybody is an admin. If you don\(aqt like that, you can create specific admin
users with a username and password as their credentials.
.sp
CouchDB also defines a set of requests that only admin users are allowed to
do. If you have defined one or more specific admin users, CouchDB will ask for
identification for certain requests:
.INDENT 0.0
.IP \(bu 2
Creating a database (\fBPUT /database\fP)
.IP \(bu 2
Deleting a database (\fBDELETE /database\fP)
.IP \(bu 2
Setup a database security (\fBPUT /database/_security\fP)
.IP \(bu 2
Creating a design document (\fBPUT /database/_design/app\fP)
.IP \(bu 2
Updating a design document (\fBPUT /database/_design/app?rev=1\-4E2\fP)
.IP \(bu 2
Deleting a design document (\fBDELETE /database/_design/app?rev=2\-6A7\fP)
.IP \(bu 2
Triggering compaction (\fBPOST /database/_compact\fP)
.IP \(bu 2
Reading the task status list (\fBGET /_active_tasks\fP)
.IP \(bu 2
Restarting the server on the node\-local port
(\fI:post:\(gaPOST /_restart </_restart>\(ga\fP)
.IP \(bu 2
Reading the active configuration
(\fI:get:\(gaGET /_node/{node\-name}/_config </_config>\(ga\fP)
.IP \(bu 2
Updating the active configuration
(\fI:put:\(gaPUT /_node/{node\-name}/_config/section/key </_config/{section}/{key}>\(ga\fP)
.UNINDENT
.SS Creating New Admin User
.sp
Let\(aqs do another walk through the API using \fIcurl\fP to see how CouchDB behaves
when you add admin users.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> HOST="http://127.0.0.1:5984"
> curl \-X PUT $HOST/database
{"ok":true}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When starting out fresh, we can add a database. Nothing unexpected. Now let\(aqs
create an admin user. We\(aqll call her \fBanna\fP, and her password is \fBsecret\fP\&.
Note the double quotes in the following code; they are needed to denote a string
value for the \fIconfiguration API\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> curl \-X PUT $HOST/_node/$NODENAME/_config/admins/anna \-d \(aq"secret"\(aq
""
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
As per the \fI_config\fP API\(aqs behavior, we\(aqre getting
the previous value for the config item we just wrote. Since our admin user
didn\(aqt exist, we get an empty string.
.SS Hashing Passwords
.sp
Seeing the plain\-text password is scary, isn\(aqt it? No worries, CouchDB doesn\(aqt
show the plain\-text password anywhere. It gets hashed right away. The hash
is that big, ugly, long string that starts out with \fB\-hashed\-\fP\&.
How does that work?
.INDENT 0.0
.IP 1. 3
Creates a new 128\-bit UUID. This is our \fIsalt\fP\&.
.IP 2. 3
Creates a sha1 hash of the concatenation of the bytes of the plain\-text
password and the salt \fB(sha1(password + salt))\fP\&.
.IP 3. 3
Prefixes the result with \fB\-hashed\-\fP and appends \fB,salt\fP\&.
.UNINDENT
.sp
To compare a plain\-text password during authentication with the stored hash,
the same procedure is run and the resulting hash is compared to the stored
hash. The probability of two identical hashes for different passwords is too
insignificant to mention (c.f. \fI\%Bruce Schneier\fP). Should the stored hash fall
into the hands of an attacker, it is, by current standards, way too inconvenient
(i.e., it\(aqd take a lot of money and time) to find the plain\-text password from
the hash.
.sp
But what\(aqs with the \fB\-hashed\-\fP prefix? When CouchDB starts up, it reads a set
of \fI\&.ini\fP files with config settings. It loads these settings into an internal
data store (not a database). The config API lets you read the current
configuration as well as change it and create new entries. CouchDB is writing
any changes back to the \fI\&.ini\fP files.
.sp
The \fI\&.ini\fP files can also be edited by hand when CouchDB is not running.
Instead of creating the admin user as we showed previously, you could have
stopped CouchDB, opened your \fIlocal.ini\fP, added \fBanna = secret\fP to the
\fBadmins\fP, and restarted CouchDB. Upon reading the new line from
\fIlocal.ini\fP, CouchDB would run the hashing algorithm and write back the hash to
\fIlocal.ini\fP, replacing the plain\-text password. To make sure CouchDB only hashes
plain\-text passwords and not an existing hash a second time, it prefixes
the hash with \fB\-hashed\-\fP, to distinguish between plain\-text passwords and
hashed passwords. This means your plain\-text password can\(aqt start with the
characters \fB\-hashed\-\fP, but that\(aqs pretty unlikely to begin with.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Since \fI1.3.0 release\fP CouchDB uses \fB\-pbkdf2\-\fP prefix
by default to sign about using \fI\%PBKDF2\fP hashing algorithm instead of
\fISHA1\fP\&.
.UNINDENT
.UNINDENT
.SS Basic Authentication
.sp
Now that we have defined an admin, CouchDB will not allow us to create new
databases unless we give the correct admin user credentials. Let\(aqs verify:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> curl \-X PUT $HOST/somedatabase
{"error":"unauthorized","reason":"You are not a server admin."}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
That looks about right. Now we try again with the correct credentials:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> HOST="http://anna:secret@127.0.0.1:5984"
> curl \-X PUT $HOST/somedatabase
{"ok":true}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you have ever accessed a website or FTP server that was password\-protected,
the \fBusername:password@\fP URL variant should look familiar.
.sp
If you are security conscious, the missing \fBs\fP in \fBhttp://\fP will make you
nervous. We\(aqre sending our password to CouchDB in plain text. This is a bad
thing, right? Yes, but consider our scenario: CouchDB listens on \fB127.0.0.1\fP
on a development box that we\(aqre the sole user of. Who could possibly sniff our
password?
.sp
If you are in a production environment, however, you need to reconsider. Will
your CouchDB instance communicate over a public network? Even a LAN shared
with other collocation customers is public. There are multiple ways to secure
communication between you or your application and CouchDB that exceed the
scope of this documentation. CouchDB as of version \fI1.1.0\fP
comes with \fISSL built in\fP\&.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fIBasic Authentication API Reference\fP
.UNINDENT
.UNINDENT
.SS Cookie Authentication
.sp
Basic authentication that uses plain\-text passwords is nice and convenient,
but not very secure if no extra measures are taken. It is also a very poor
user experience. If you use basic authentication to identify admins,
your application\(aqs users need to deal with an ugly, unstylable browser modal
dialog that says non\-professional at work more than anything else.
.sp
To remedy some of these concerns, CouchDB supports cookie authentication.
With cookie authentication your application doesn\(aqt have to include the ugly
login dialog that the users\(aq browsers come with. You can use a regular HTML
form to submit logins to CouchDB. Upon receipt, CouchDB will generate a
one\-time token that the client can use in its next request to CouchDB. When
CouchDB sees the token in a subsequent request, it will authenticate the user
based on the token without the need to see the password again. By default,
a token is valid for 10 minutes.
.sp
To obtain the first token and thus authenticate a user for the first time,
the username and password must be sent to the \fI_session\fP
API. The API is smart enough to decode HTML form submissions, so you don\(aqt have
to resort to any smarts in your application.
.sp
If you are not using HTML forms to log in, you need to send an HTTP request
that looks as if an HTML form generated it. Luckily, this is super simple:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> HOST="http://127.0.0.1:5984"
> curl \-vX POST $HOST/_session \e
       \-H \(aqContent\-Type:application/x\-www\-form\-urlencoded\(aq \e
       \-d \(aqname=anna&password=secret\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB replies, and we\(aqll give you some more detail:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
< HTTP/1.1 200 OK
< Set\-Cookie: AuthSession=YW5uYTo0QUIzOTdFQjrC4ipN\-D\-53hw1sJepVzcVxnriEw;
< Version=1; Path=/; HttpOnly
> ...
<
{"ok":true}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A \fI\%200 OK\fP response code tells us all is well, a \fI\%Set\-Cookie\fP
header includes the token we can use for the next request, and the standard JSON
response tells us again that the request was successful.
.sp
Now we can use this token to make another request as the same user without
sending the username and password again:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> curl \-vX PUT $HOST/mydatabase \e
       \-\-cookie AuthSession=YW5uYTo0QUIzOTdFQjrC4ipN\-D\-53hw1sJepVzcVxnriEw \e
       \-H "X\-CouchDB\-WWW\-Authenticate: Cookie" \e
       \-H "Content\-Type:application/x\-www\-form\-urlencoded"
{"ok":true}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can keep using this token for 10 minutes by default. After 10 minutes you
need to authenticate your user again. The token lifetime can be configured
with the timeout (in seconds) setting in the \fIcouch_httpd_auth\fP configuration section.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fICookie Authentication API Reference\fP
.UNINDENT
.UNINDENT
.SS Authentication Database
.sp
You may already note that CouchDB administrators are defined within the config
file and are wondering if regular users are also stored there. No, they are not.
CouchDB has a special \fIauthentication database\fP, named \fB_users\fP by default,
that stores all registered users as JSON documents.
.sp
This special database is a \fIsystem database\fP\&. This means that while it shares
the common \fIdatabase API\fP, there are some
special security\-related constraints applied. Below is a list of how the
\fIauthentication database\fP is different from the other databases.
.INDENT 0.0
.IP \(bu 2
Only administrators may browse list of all documents
(\fBGET /_users/_all_docs\fP)
.IP \(bu 2
Only administrators may listen to \fIchanges feed\fP (\fBGET /_users/_changes\fP)
.IP \(bu 2
Only administrators may execute design functions like \fIviews\fP,
\fIshows\fP and \fIothers\fP
.IP \(bu 2
There is a special design document \fB_auth\fP that cannot be modified
.IP \(bu 2
Every document except the \fIdesign documents\fP represent registered
CouchDB users and belong to them
.IP \(bu 2
Users may only access (\fBGET /_users/org.couchdb.user:Jan\fP) or modify (\fBPUT /_users/org.couchdb.user:Jan\fP) documents that they own
.UNINDENT
.sp
These draconian rules are necessary since CouchDB cares about its users\(aq
personal information and will not disclose it to just anyone. Often, user
documents contain system information like \fIlogin\fP, \fIpassword hash\fP and \fIroles\fP,
apart from sensitive personal information like real name, email, phone, special
internal identifications and more. This is not information that you
want to share with the World.
.SS Users Documents
.sp
Each CouchDB user is stored in document format. These documents contain
several \fImandatory\fP fields, that CouchDB needs for authentication:
.INDENT 0.0
.IP \(bu 2
\fB_id\fP (\fIstring\fP): Document ID. Contains user\(aqs login with special prefix
\fIorg.couchdb.user\fP
.IP \(bu 2
\fBderived_key\fP (\fIstring\fP): \fI\%PBKDF2\fP key
.IP \(bu 2
\fBname\fP (\fIstring\fP): User\(aqs name aka login. \fBImmutable\fP e.g. you cannot
rename an existing user \- you have to create new one
.IP \(bu 2
\fBroles\fP (\fIarray\fP of \fIstring\fP): List of user roles. CouchDB doesn\(aqt provide
any built\-in roles, so you\(aqre free to define your own depending on your needs.
However, you cannot set system roles like \fB_admin\fP there. Also, only
administrators may assign roles to users \- by default all users have no roles
.IP \(bu 2
\fBpassword_sha\fP (\fIstring\fP): Hashed password with salt. Used for \fBsimple\fP
\fIpassword_scheme\fP
.IP \(bu 2
\fBpassword_scheme\fP (\fIstring\fP): Password hashing scheme. May be \fBsimple\fP or
\fBpbkdf2\fP
.IP \(bu 2
\fBsalt\fP (\fIstring\fP): Hash salt. Used for \fBsimple\fP \fIpassword_scheme\fP
.IP \(bu 2
\fBtype\fP (\fIstring\fP): Document type. Constantly has the value \fBuser\fP
.UNINDENT
.sp
Additionally, you may specify any custom fields that relate to the target
user. This is a good place to store user\(aqs private information because only the
target user and CouchDB administrators may browse it.
.SS Why the \fBorg.couchdb.user:\fP prefix?
.sp
The reason there is a special prefix before a user\(aqs login name is to have
namespaces that users belong to. This prefix is designed to prevent
replication conflicts when you try merging two or more \fI_user\fP databases.
.sp
For current CouchDB releases, all users belong to the same
\fBorg.couchdb.user\fP namespace and this cannot be changed. This may be changed
in future releases.
.SS Creating a New User
.sp
Creating a new user is a very trivial operation. You just need to do a
\fI\%PUT\fP request with the user\(aqs data to CouchDB. Let\(aqs create a user with
login \fIjan\fP and password \fIapple\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT http://localhost:5984/_users/org.couchdb.user:jan \e
     \-H "Accept: application/json" \e
     \-H "Content\-Type: application/json" \e
     \-d \(aq{"name": "jan", "password": "apple", "roles": [], "type": "user"}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This \fIcurl\fP command will produce the following HTTP request:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
PUT /_users/org.couchdb.user:jan HTTP/1.1
Accept: application/json
Content\-Length: 62
Content\-Type: application/json
Host: localhost:5984
User\-Agent: curl/7.31.0
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And CouchDB responds with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 83
Content\-Type: application/json
Date: Fri, 27 Sep 2013 07:33:28 GMT
ETag: "1\-e0ebfb84005b920488fc7a8cc5470cc0"
Location: http://localhost:5984/_users/org.couchdb.user:jan
Server: CouchDB (Erlang OTP)

{"ok":true,"id":"org.couchdb.user:jan","rev":"1\-e0ebfb84005b920488fc7a8cc5470cc0"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The document was successfully created! The user \fIjan\fP should now exist in our
database. Let\(aqs check if this is true:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X POST http://localhost:5984/_session \-d \(aqname=jan&password=apple\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB should respond with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"ok":true,"name":"jan","roles":[]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This means that the username was recognized and the password\(aqs hash matches
with the stored one. If we specify an incorrect login and/or password, CouchDB
will notify us with the following error message:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"error":"unauthorized","reason":"Name or password is incorrect."}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Password Changing
.sp
Let\(aqs define what is password changing from the point of view of CouchDB and
the authentication database. Since "users" are "documents", this operation is
just updating the document with a special field \fBpassword\fP which contains
the \fIplain text password\fP\&. Scared? No need to be. The authentication database
has a special internal hook on document update which looks for this field and
replaces it with the \fIsecured hash\fP depending on the chosen \fBpassword_scheme\fP\&.
.sp
Summarizing the above process \- we need to get the document\(aqs content, add
the \fBpassword\fP field with the new password in plain text and then store the
JSON result to the authentication database.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X GET http://localhost:5984/_users/org.couchdb.user:jan
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "org.couchdb.user:jan",
    "_rev": "1\-e0ebfb84005b920488fc7a8cc5470cc0",
    "derived_key": "e579375db0e0c6a6fc79cd9e36a36859f71575c3",
    "iterations": 10,
    "name": "jan",
    "password_scheme": "pbkdf2",
    "roles": [],
    "salt": "1112283cf988a34f124200a050d308a1",
    "type": "user"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Here is our user\(aqs document. We may strip hashes from the stored document to
reduce the amount of posted data:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT http://localhost:5984/_users/org.couchdb.user:jan \e
     \-H "Accept: application/json" \e
     \-H "Content\-Type: application/json" \e
     \-H "If\-Match: 1\-e0ebfb84005b920488fc7a8cc5470cc0" \e
     \-d \(aq{"name":"jan", "roles":[], "type":"user", "password":"orange"}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"ok":true,"id":"org.couchdb.user:jan","rev":"2\-ed293d3a0ae09f0c624f10538ef33c6f"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Updated! Now let\(aqs check that the password was really changed:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X POST http://localhost:5984/_session \-d \(aqname=jan&password=apple\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB should respond with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"error":"unauthorized","reason":"Name or password is incorrect."}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Looks like the password \fBapple\fP is wrong, what about \fBorange\fP?
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X POST http://localhost:5984/_session \-d \(aqname=jan&password=orange\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB should respond with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"ok":true,"name":"jan","roles":[]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Hooray! You may wonder why this was so complex \- we need to retrieve user\(aqs
document, add a special field to it, and post it back.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
There is no password confirmation for API request: you should implement it
in your application layer.
.UNINDENT
.UNINDENT
.SS Users Public Information
.sp
New in version 1.4.

.sp
Sometimes users \fIwant\fP to share some information with the world. For instance,
their contact email to let other users get in touch with them. To solve this
problem, but still keep sensitive and private information secured, there is
a special \fIconfiguration\fP option \fBpublic_fields\fP\&. In this option you may define
a comma\-separated list of users document fields that will be publicly available.
.sp
Normally, if you request a user document and you\(aqre not an administrator or the
document\(aqs owner, CouchDB will respond with \fI\%404 Not Found\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl http://localhost:5984/_users/org.couchdb.user:robert
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"error":"not_found","reason":"missing"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This response is constant for both cases when user exists or doesn\(aqt exist for
security reasons.
.sp
Now let\(aqs share the field \fBname\fP\&. First, set up the \fBpublic_fields\fP
configuration option. Remember, that this action requires administrator
privileges. The next command will prompt you for user \fIadmin\fP\(aqs password:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT http://localhost:5984/_node/nonode@nohost/_config/couch_httpd_auth/public_fields \e
   \-H "Content\-Type: application/json" \e
   \-d \(aq"name"\(aq \e
   \-u admin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
What has changed? Let\(aqs check Robert\(aqs document once again:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl http://localhost:5984/_users/org.couchdb.user:robert
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"_id":"org.couchdb.user:robert","_rev":"6\-869e2d3cbd8b081f9419f190438ecbe7","name":"robert"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Good news! Now we may read the field \fBname\fP in \fIevery user document without
needing to be an administrator\fP\&. Keep in mind, though, not to publish sensitive
information, especially without user\(aqs consent!
.SS Authorization
.sp
Now that you have a few users who can log in, you probably want to set up some
restrictions on what actions they can perform based on their identity and their
roles.  Each database on a CouchDB server can contain its own set of
authorization rules that specify which users are allowed to read and write
documents, create design documents, and change certain database configuration
parameters.  The authorization rules are set up by a server admin and can be
modified at any time.
.sp
Database authorization rules assign a user into one of two classes:
.INDENT 0.0
.IP \(bu 2
\fImembers\fP, who are allowed to read all documents and create and modify any
document except for design documents.
.IP \(bu 2
\fIadmins\fP, who can read and write all types of documents, modify which users
are members or admins, and set certain per\-database configuration options.
.UNINDENT
.sp
Note that a database admin is not the same as a server admin \-\- the actions
of a database admin are restricted to a specific database.
.sp
When a database is first created, there are no members or admins.  HTTP
requests that have no authentication credentials or have credentials for a
normal user are treated as members, and those with server admin credentials
are treated as database admins.  To change the default permissions, you must
create a \fI_security\fP document in the database:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> curl \-X PUT http://localhost:5984/mydatabase/_security \e
     \-u anna:secret \e
     \-H "Content\-Type: application/json" \e
     \-d \(aq{"admins": { "names": [], "roles": [] }, "members": { "names": ["jan"], "roles": [] } }\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The HTTP request to create the \fI_security\fP document must contain the
credentials of a server admin.  CouchDB will respond with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"ok":true}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The database is now secured against anonymous reads and writes:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> curl http://localhost:5984/mydatabase/
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"error":"unauthorized","reason":"You are not authorized to access this db."}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You declared user "jan" as a member in this database, so he is able to read and
write normal documents:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> curl \-u jan:apple http://localhost:5984/mydatabase/
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"db_name":"mydatabase","doc_count":1,"doc_del_count":0,"update_seq":3,"purge_seq":0,
"compact_running":false,"disk_size":12376,"data_size":272,"instance_start_time":"0",
"disk_format_version":6,"committed_update_seq":3}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If Jan attempted to create a design doc, however, CouchDB would return a
401 Unauthorized error because the username "jan" is not in the list of
admin names and the \fI/_users/org.couchdb.user:jan\fP document doesn\(aqt contain
a role that matches any of the declared admin roles.  If you want to promote
Jan to an admin, you can update the security document to add \fI"jan"\fP to
the \fInames\fP array under \fIadmin\fP\&.  Keeping track of individual database
admin usernames is tedious, though, so you would likely prefer to create a
database admin role and assign that role to the \fIorg.couchdb.user:jan\fP user
document:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> curl \-X PUT http://localhost:5984/mydatabase/_security \e
     \-u anna:secret \e
     \-H "Content\-Type: application/json" \e
     \-d \(aq{"admins": { "names": [], "roles": ["mydatabase_admin"] }, "members": { "names": [], "roles": [] } }\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
See the \fI_security document reference page\fP for
additional details about specifying database members and admins.
.SS Installation & First\-Time Setup
.SS Installation on Unix\-like systems
.SS Installation using the Apache CouchDB convenience binary packages
.sp
If you are running one of the following operating systems, the easiest way
to install CouchDB is to use the convenience binary packages:
.INDENT 0.0
.IP \(bu 2
CentOS/RHEL 6
.IP \(bu 2
CentOS/RHEL 7
.IP \(bu 2
Debian 8 (jessie)
.IP \(bu 2
Debian 9 (stretch)
.IP \(bu 2
Ubuntu 14.04 (trusty)
.IP \(bu 2
Ubuntu 16.04 (xenial)
.UNINDENT
.sp
The RedHat\-style rpm packages and Debian\-style deb pacakges will install
CouchDB at \fB/opt/couchdb\fP and ensure CouchDB is run at system startup by the
appropriate init subsystem (SysV\-style initd, upstart, systemd).
.sp
The Debian\-style deb packages \fIalso\fP pre\-configure CouchDB as a standalone or
clustered node, prompt for the address to which it will bind, and a password
for the admin user. Responses to these prompts may be pre\-seeded using standard
debconf tools. Further details are in the \fI\%README.Debian\fP file.
.SS Enabling the Apache CouchDB package repository
.sp
\fBCentOS\fP: Place the following text into \fB/etc/yum.repos.d/bintray\-apache\-couchdb\-rpm.repo\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[bintray\-\-apache\-couchdb\-rpm]
name=bintray\-\-apache\-couchdb\-rpm
baseurl=http://apache.bintray.com/couchdb\-rpm/el$releasever/$basearch/
gpgcheck=0
repo_gpgcheck=0
enabled=1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBRedHat/RHEL\fP: Place the following text into \fB/etc/yum.repos.d/bintray\-apache\-couchdb\-rpm.repo\fP\&. Be sure to replace the \fB7\fP below with \fB6\fP if you are on a EL6 distribution:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[bintray\-\-apache\-couchdb\-rpm]
name=bintray\-\-apache\-couchdb\-rpm
baseurl=http://apache.bintray.com/couchdb\-rpm/el7/$basearch/
gpgcheck=0
repo_gpgcheck=0
enabled=1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBDebian/Ubuntu\fP: Run the command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ echo "deb https://apache.bintray.com/couchdb\-deb {distribution} main" \e
    | sudo tee \-a /etc/apt/sources.list
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and replace \fB{distribution}\fP with the appropriate choice for your OS
version:
.INDENT 0.0
.IP \(bu 2
Debian 8: \fBjessie\fP
.IP \(bu 2
Debian 9: \fBstretch\fP
.IP \(bu 2
Ubuntu 14.04: \fBtrusty\fP
.IP \(bu 2
Ubuntu 16.04: \fBxenial\fP
.UNINDENT
.SS Installing the Apache CouchDB packages
.sp
\fBRedHat/CentOS\fP: Run the command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo yum \-y install epel\-release && yum install couchdb
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBBe sure to complete the\fP \fIFirst\-time Setup\fP \fBsteps for
a single node or clustered installation.\fP
.sp
\fBDebian/Ubuntu\fP: First, install the repository key:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ curl \-L https://couchdb.apache.org/repo/bintray\-pubkey.asc \e
    | sudo apt\-key add \-
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Then update the repository cache and install the package:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo apt\-get update && sudo apt\-get install couchdb
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Debian/Ubuntu installs from binaries will be pre\-configured for single node or
clustered installations. For clusters, multiple nodes will still need to be
joined together; \fBfollow the\fP
\fICluster Setup Wizard\fP \fBsteps\fP to complete the
process.
.sp
Relax! CouchDB is installed and running.
.SS Installation from source
.sp
The remainder of this document describes the steps required to install CouchDB
directly from source code.
.sp
This guide, as well as the INSTALL.Unix document in the official tarball
release are the canonical sources of installation information. However, many
systems have gotchas that you need to be aware of. In addition, dependencies
frequently change as distributions update their archives.
.SS Dependencies
.sp
You should have the following installed:
.INDENT 0.0
.IP \(bu 2
\fI\%Erlang OTP (>=R16B03, =<19.x)\fP
.IP \(bu 2
\fI\%ICU\fP
.IP \(bu 2
\fI\%OpenSSL\fP
.IP \(bu 2
\fI\%Mozilla SpiderMonkey (1.8.5)\fP
.IP \(bu 2
\fI\%GNU Make\fP
.IP \(bu 2
\fI\%GNU Compiler Collection\fP
.IP \(bu 2
\fI\%libcurl\fP
.IP \(bu 2
\fI\%help2man\fP
.IP \(bu 2
\fI\%Python (>=2.7) for docs\fP
.IP \(bu 2
\fI\%Python Sphinx (>=1.1.3)\fP
.UNINDENT
.sp
It is recommended that you install Erlang OTP R16B03\-1 or above where possible.
You will only need libcurl if you plan to run the JavaScript test suite. And
help2man is only need if you plan on installing the CouchDB man pages.
Python and Sphinx are only required for building the online documentation.
Documentation build can be disabled by adding the \fB\-\-disable\-docs\fP flag to
the \fBconfigure\fP script.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%Installing CouchDB\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SS Debian\-based Systems
.sp
You can install the dependencies by running:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo apt\-get \-\-no\-install\-recommends \-y install \e
    build\-essential pkg\-config erlang \e
    libicu\-dev libmozjs185\-dev libcurl4\-openssl\-dev
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Be sure to update the version numbers to match your system\(aqs available
packages.
.SS RedHat\-based (Fedora, Centos, RHEL) Systems
.sp
You can install the dependencies by running:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo yum install autoconf autoconf\-archive automake \e
    curl\-devel erlang\-asn1 erlang\-erts erlang\-eunit gcc\-c++ \e
    erlang\-os_mon erlang\-xmerl erlang\-erl_interface help2man \e
    js\-devel\-1.8.5 libicu\-devel libtool perl\-Test\-Harness
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
While CouchDB builds against the default js\-devel\-1.7.0 included in some
distributions, it\(aqs recommended to use a more recent js\-devel\-1.8.5.
.sp
Warning: To build a release for CouchDB the erlang\-reltool package is required,
yet on CentOS/RHEL this package depends on erlang\-wx which pulls in wxGTK
and several X11 libraries. If CouchDB is being built on a console only
server it might be a good idea to install this in a separate step to the
rest of the dependencies, so that the package and all its dependencies
can be removed using the \fByum history\fP tool after the release is built.
(reltool is needed only during release build but not for CouchDB functioning)
.sp
The package can be installed by running:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo yum install erlang\-reltool
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Mac OS X
.sp
Follow \fIinstall/mac/homebrew\fP reference for Mac App installation.
.sp
If you are installing from source, you will need to install the Command
Line Tools:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
xcode\-select \-\-install
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can then install the other dependencies by running:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
brew install autoconf autoconf\-archive automake libtool \e
    erlang icu4c spidermonkey curl pkg\-config
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You will need \fIHomebrew\fP installed to use the \fBbrew\fP command.
.sp
Some versions of Mac OS X ship a problematic OpenSSL library. If
you\(aqre experiencing troubles with CouchDB crashing intermittently with
a segmentation fault or a bus error, you will need to install your own
version of OpenSSL. See the wiki, mentioned above, for more information.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%Homebrew\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SS FreeBSD
.sp
FreeBSD requires the use of GNU Make. Where \fBmake\fP is specified in this
documentation, substitute \fBgmake\fP\&.
.sp
You can install this by running:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
pkg install gmake
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Installing
.sp
Once you have satisfied the dependencies you should run:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&./configure
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you wish to customize the installation, pass \fB\-\-help\fP to this script.
.sp
If everything was successful you should see the following message:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
You have configured Apache CouchDB, time to relax.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Relax.
.sp
To build CouchDB you should run:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make release
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Try \fBgmake\fP if \fBmake\fP is giving you any problems.
.sp
If include paths or other compiler options must be specified, they can be passed to rebar, which compiles CouchDB, with the ERL_CFLAGS environment variable. Likewise, options may be passed to the linker with the ERL_LDFLAGS environment variable:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make release ERL_CFLAGS="\-I/usr/local/include/js \-I/usr/local/lib/erlang/usr/include"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If everything was successful you should see the following message:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&... done
You can now copy the rel/couchdb directory anywhere on your system.
Start CouchDB with ./bin/couchdb from within that directory.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Relax.
.sp
Note: a fully\-fledged \fB\&./configure\fP with the usual GNU Autotools options
for package managers and a corresponding \fBmake install\fP are in
development, but not part of the 2.0.0 release.
.SS User Registration and Security
.sp
For OS X, in the steps below, substitute \fB/Users/couchdb\fP for
\fB/home/couchdb\fP\&.
.sp
You should create a special \fBcouchdb\fP user for CouchDB.
.sp
On many Unix\-like systems you can run:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
adduser \-\-system \e
        \-\-shell /bin/bash \e
        \-\-group \-\-gecos \e
        "CouchDB Administrator" couchdb
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
On Mac OS X you can use the Workgroup Manager to create users up to version
10.9, and dscl or sysadminctl after version 10.9. Search Apple\(aqs support
site to find the documentation appropriate for your system. As of recent
versions of OS X, this functionality is also included in Server.app,
available through the App Store only as part of OS X Server.
.sp
You must make sure that the user has a working POSIX shell and a writable
home directory.
.sp
You can test this by:
.INDENT 0.0
.IP \(bu 2
Trying to log in as the \fBcouchdb\fP user
.IP \(bu 2
Running \fBpwd\fP and checking the present working directory
.UNINDENT
.sp
As a recommendation, copy the \fBrel/couchdb\fP directory into
\fB/home/couchdb\fP or \fB/Users/couchdb\fP\&.
.sp
Ex: copy the built couchdb release to the new user\(aqs home directory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cp \-R /path/to/couchdb/rel/couchdb /home/couchdb
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Change the ownership of the CouchDB directories by running:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
chown \-R couchdb:couchdb /home/couchdb
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Change the permission of the CouchDB directories by running:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
find /home/couchdb \-type d \-exec chmod 0770 {} \e;
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Update the permissions for your ini files:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
chmod 0644 /home/couchdb/etc/*
.ft P
.fi
.UNINDENT
.UNINDENT
.SS First Run
.sp
You can start the CouchDB server by running:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo \-i \-u couchdb /home/couchdb/bin/couchdb
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This uses the \fBsudo\fP command to run the \fBcouchdb\fP command as the
\fBcouchdb\fP user.
.sp
When CouchDB starts it should eventually display following messages:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{database_does_not_exist,[{mem3_shards,load_shards_from_db,"_users" ...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Don\(aqt be afraid, we will fix this in a moment.
.sp
To check that everything has worked, point your web browser to:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
http://127.0.0.1:5984/_utils/index.html
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
From here you should verify your installation by pointing your web browser to:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
http://localhost:5984/_utils/index.html#verifyinstall
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBBe sure to complete the\fP \fIFirst\-time Setup\fP \fBsteps for
a single node or clustered installation.\fP
.SS Running as a Daemon
.sp
CouchDB no longer ships with any daemonization scripts.
.sp
The CouchDB team recommends \fI\%runit\fP to
run CouchDB persistently and reliably. According to official site:
.INDENT 0.0
.INDENT 3.5
\fIrunit\fP is a cross\-platform Unix init scheme with service supervision,
a replacement for sysvinit, and other init schemes. It runs on
GNU/Linux, *BSD, MacOSX, Solaris, and can easily be adapted to
other Unix operating systems.
.UNINDENT
.UNINDENT
.sp
Configuration of runit is straightforward; if you have questions, contact
the CouchDB \fI\%user mailing list\fP
or \fI\%IRC\-channel #couchdb\fP
in FreeNode network.
.sp
Let\(aqs consider configuring runit on Ubuntu 16.04. The following
steps should be considered only as an example. Details will vary
by operating system and distribution. Check your system\(aqs package
management tools for specifics.
.sp
Install runit:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo apt\-get install runit
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Create a directory where logs will be written:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo mkdir /var/log/couchdb
sudo chown couchdb:couchdb /var/log/couchdb
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Create directories that will contain runit configuration for CouchDB:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo mkdir /etc/sv/couchdb
sudo mkdir /etc/sv/couchdb/log
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Create /etc/sv/couchdb/log/run script:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#!/bin/sh
exec svlogd \-tt /var/log/couchdb
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Basically it determines where and how exactly logs will be written.
See \fBman svlogd\fP for more details.
.sp
Create /etc/sv/couchdb/run:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#!/bin/sh
export HOME=/home/couchdb
exec 2>&1
exec chpst \-u couchdb /home/couchdb/bin/couchdb
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This script determines how exactly CouchDB will be launched.
Feel free to add any additional arguments and environment
variables here if necessary.
.sp
Make scripts executable:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo chmod u+x /etc/sv/couchdb/log/run
sudo chmod u+x /etc/sv/couchdb/run
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Then run:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo ln \-s /etc/sv/couchdb/ /etc/service/couchdb
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In a few seconds runit will discover a new symlink and start CouchDB.
You can control CouchDB service like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo sv status couchdb
sudo sv stop couchdb
sudo sv start couchdb
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Naturally now CouchDB will start automatically shortly after system starts.
.sp
You can also configure systemd, launchd or SysV\-init daemons to launch
CouchDB and keep it running using standard configuration files. Consult
your system documentation for more information.
.SS Installation on Windows
.sp
There are two ways to install CouchDB on Windows.
.SS Installation from binaries
.sp
This is the simplest way to go.
.INDENT 0.0
.IP 1. 3
Get \fI\%the latest Windows binaries\fP from the \fI\%CouchDB web site\fP\&.
Old releases are available at \fI\%archive\fP\&.
.IP 2. 3
Follow the installation wizard steps. \fBBe sure to install CouchDB to a
path with no spaces, such as\fP \fBC:\eCouchDB\fP\&.
.IP 3. 3
\fI\%Open up Fauxton\fP
.IP 4. 3
It\(aqs time to Relax! \fBBe sure to complete the\fP \fIFirst\-time Setup\fP \fBsteps for a single node or clustered installation.\fP
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In some cases you might been asked to reboot Windows to complete
installation process, because of using on different Microsoft Visual C++
runtimes by CouchDB.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
\fBUpgrading note\fP
.sp
It\(aqs recommended to uninstall previous CouchDB version before upgrading,
especially if the new one is built against different Erlang release.
The reason is simple: there may be leftover libraries with alternative or
incompatible versions from old Erlang release that may create conflicts,
errors and weird crashes.
.sp
In this case, make sure you backup of your \fIlocal.ini\fP config and CouchDB
database/index files.
.UNINDENT
.UNINDENT
.SS Installation from sources
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fI\%Glazier: Automate building of CouchDB from source on Windows\fP
.UNINDENT
.UNINDENT
.SS Installation on macOS
.SS Installation using the Apache CouchDB native application
.sp
The easiest way to run CouchDB on macOS is through the native macOS
application. Just follow the below instructions:
.INDENT 0.0
.IP 1. 3
\fI\%Download Apache CouchDB for macOS\fP\&.
Old releases are available at \fI\%archive\fP\&.
.IP 2. 3
Double click on the Zip file
.IP 3. 3
Drag and drop the Apache CouchDB.app into Applications folder
.UNINDENT
.sp
That\(aqs all, now CouchDB is installed on your Mac:
.INDENT 0.0
.IP 1. 3
Run Apache CouchDB application
.IP 2. 3
\fI\%Open up Fauxton\fP, the CouchDB admin interface
.IP 3. 3
Verify the install by clicking on \fIVerify\fP, then \fIVerify Installation\fP\&.
.IP 4. 3
\fBBe sure to complete the\fP \fIFirst\-time Setup\fP \fBsteps
for a single node or clustered installation.\fP
.IP 5. 3
Time to Relax!
.UNINDENT
.SS Installation with Homebrew
.sp
The \fI\%Homebrew\fP build of CouchDB 2.x is still in development. Check back often
for updates.
.SS Installation from source
.sp
Installation on macOS is possible from source. Download the \fI\%source tarball\fP,
extract it, and follow the instructions in the \fBINSTALL.Unix.md\fP file.
.SS Running as a Daemon
.sp
CouchDB itself no longer ships with any daemonization scripts.
.sp
The CouchDB team recommends \fI\%runit\fP to
run CouchDB persistently and reliably. Configuration of runit is
straightforward; if you have questions, reach out to the CouchDB
user mailing list.
.sp
Naturally, you can configure launchd or other init daemons to launch CouchDB
and keep it running using standard configuration files.
.sp
Consult your system documentation for more information.
.SS Installation on FreeBSD
.SS Installation from ports
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cd /usr/ports/databases/couchdb
make install clean
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will install CouchDB from the ports collection.
.SS Start script
.sp
The following options for \fB/etc/rc.conf\fP or \fB/etc/rc.conf.local\fP are
supported by the start script (defaults shown):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
couchdb_enable="NO"
couchdb_enablelogs="YES"
couchdb_user="couchdb"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After enabling the couchdb rc service use the following command to start CouchDB:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/usr/local/etc/rc.d/couchdb start
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This script responds to the arguments \fIstart\fP, \fIstop\fP, \fIstatus\fP, \fIrcvar\fP etc..
.sp
The start script will also use settings from the following config files:
.INDENT 0.0
.IP \(bu 2
/usr/local/etc/couchdb/default.ini
.IP \(bu 2
/usr/local/etc/couchdb/local.ini
.UNINDENT
.sp
Administrators should use \fBdefault.ini\fP as reference and only modify the
\fBlocal.ini\fP file.
.SS Post install
.sp
\fBBe sure to complete the\fP \fIFirst\-time Setup\fP \fBsteps for
a single node or clustered installation.\fP
.sp
In case the install script fails to install a non\-interactive user "couchdb" to
be used for the database, the user needs to be created manually:
.sp
I used the \fBpw\fP command to add a user "couchdb" in group "couchdb":
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
pw user add couchdb
pw user mod couchdb \-c \(aqCouchDB, time to relax\(aq \-s /usr/sbin/nologin \-d /var/lib/couchdb
pw group add couchdb
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The user is added to \fB/etc/passwd\fP and should look similar to the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
shell#  grep couchdb /etc/passwd
couchdb:*:1013:1013:Couchdb, time to relax:/var/lib/couchdb/:/usr/sbin/nologin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To change any of these settings, please refrain from editing \fI/etc/passwd\fP and
instead use \fBpw user mod ...\fP or \fBvipw\fP\&. Make sure that the user has no
shell, but instead uses \fB/usr/sbin/nologin\fP\&. The \(aq*\(aq in the second field means
that this user can not login via password authorization. For details use
\fI\%man 5 passwd\fP\&.
.SS Installation via Docker
.sp
Apache CouchDB provides \(aqconvenience binary\(aq Docker images through
Docker Hub at \fBapache/couchdb\fP\&. The following tags are available:
.INDENT 0.0
.IP \(bu 2
\fBlatest\fP, \fB2.1.0\fP: CouchDB 2.1, single node
.IP \(bu 2
\fB1\fP, \fB1.6\fP, \fB1.6.1\fP: CouchDB 1.6.1
.IP \(bu 2
\fB1\-couchperuser\fP, \fB1.6\-couchperuser\fP, \fB1.6.1\-couchperuser\fP: CouchDB
1.6.1 with couchperuser plugin
.IP \(bu 2
\fB2.0.0\fP: CouchDB 2.0, single node
.UNINDENT
.sp
These images are built using Debian 8 (jessie), expose CouchDB on port
\fB5984\fP of the container, run everything as user \fBcouchdb\fP, and support
use of a Docker volume for data at \fB/opt/couchdb/data\fP\&.
.sp
Note that you can also use the \fBNODENAME\fP environment variable to set the
name of the CouchDB node inside the container.
.sp
\fBBe sure to complete the\fP \fIFirst\-time Setup\fP \fBsteps for
a single node or clustered installation.\fP
.sp
Further details on the Docker configuration are available in our
\fI\%couchdb\-docker git repository\fP\&.
.SS Installation via Snap
.sp
Apache CouchDB provides \(aqconvenience binary\(aq Snap builds through the
Ubuntu snapcraft repository under the name \fBcouchdb\fP\&. Only snaps built
from official stable CouchDB releases (\fB2.0\fP, \fB2.1\fP, etc.) are available
through this channel.
.sp
After \fI\%installing snapd\fP, the CouchDB snap can be installed via:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo snap install couchdb
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB will be installed at \fB/snap/couchdb\fP\&. Data will be stored at
\fB/var/snap/couchdb/\fP\&.
.sp
Further details on the snap build process are available in our
\fI\%couchdb\-pkg git repository\fP\&.
.SS First\-Time Setup
.sp
CouchDB 2.0 can be used in a single\-node or clustered configuration.
Below are the first\-time setup steps required for each of these
configurations.
.SS Single Node Setup
.sp
A single node CouchDB 2.0 installation is what most users will be using.
It is roughly equivalent to the CouchDB 1.x\-series. Note that a
single\-node setup obviously doesn\(aqt take any advantage of the new
scaling and fault\-tolerance features in CouchDB 2.0.
.sp
After installation and initial startup, visit Fauxton at
\fBhttp://127.0.0.1:5984/_utils#setup\fP\&. You will be asked to set up
CouchDB as a single\-node instance or set up a cluster. When you click
“Single\-Node\-Setup”, you will get asked for an admin username and
password. Choose them well and remember them. You can also bind CouchDB
to a public address, so it is accessible within your LAN or the public, if
you are doing this on a public VM. Or, you can keep the installation private
by binding only to 127.0.0.1 (localhost). The wizard then configures your admin
username and password and creates the three system databases \fB_users\fP,
\fB_replicator\fP and \fB_global_changes\fP for you.
.sp
Alternatively, if you don\(aqt want to use the “Single\-Node\-Setup” wizard
and run 2.0 as a single node with admin username and password already
configured, make sure to create the three three system databases manually
on startup:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT http://127.0.0.1:5984/_users

curl \-X PUT http://127.0.0.1:5984/_replicator

curl \-X PUT http://127.0.0.1:5984/_global_changes
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that the last of these is not necessary if you do not expect to be
using the global changes feed. Feel free to delete this database if you
have created it, it has grown in size, and you do not need the function
(and do not wish to waste system resources on compacting it regularly.)
.sp
See the next section for the cluster setup instructions.
.SS Cluster Setup
.sp
As configuration has many steps, see the \fICluster Reference Setup\fP for full details.
.SS Upgrading from prior CouchDB releases
.SS Important Notes
.INDENT 0.0
.IP \(bu 2
\fBAlways back up your\fP \fBdata/\fP \fBand\fP \fBetc/\fP \fBdirectories prior to
upgrading CouchDB.\fP
.IP \(bu 2
We recommend that you overwrite your \fBetc/default.ini\fP file with the
version provided by the new release. New defaults sometimes contain
mandatory changes to enable default functionality. Always places your
customizations in \fBetc/local.ini\fP or any \fBetc/local.d/*.ini\fP file.
.UNINDENT
.SS Upgrading from CouchDB 2.x
.sp
If you are coming from a prior release of CouchDB 2.x, upgrading is simple.
.SS Standalone (single) node upgrades
.sp
If you are running a standalone (single) CouchDB node:
.INDENT 0.0
.IP 1. 3
Plan for downtime.
.IP 2. 3
Backup everything.
.IP 3. 3
Check for new recommended settings in the shipped \fBetc/local.ini\fP file,
and merge any changes desired into your own local settings file(s).
.IP 4. 3
Stop CouchDB.
.IP 5. 3
Upgrade CouchDB in place.
.IP 6. 3
Start CouchDB.
.IP 7. 3
Relax! You\(aqre done.
.UNINDENT
.SS Cluster upgrades
.sp
CouchDB 2.x is explicitly designed to allow "mixed clusters" during the
upgrade process. This allows you to perform a rolling restart across
a cluster, upgrading one node at a time, for a \fIzero downtime upgrade\fP\&.
The process is also entirely scriptable within your configuration
management tool of choice.
.sp
We\(aqre proud of this feature, and you should be, too!
.sp
If you are running a CouchDB cluster:
.INDENT 0.0
.IP 1. 3
Backup everything.
.IP 2. 3
Check for new recommended settings in the shipped \fBetc/local.ini\fP file,
and merge any changes desired into your own local settings file(s),
staging these changes to occur as you upgrade the node.
.IP 3. 3
Stop CouchDB on a single node.
.IP 4. 3
Upgrade that CouchDB install in place.
.IP 5. 3
Start CouchDB.
.IP 6. 3
Double\-check that the node has re\-joined the cluster through the
\fI/_membership <api/server/membership>\fP endpoint. If your load balancer has
health check functionality driven by the \fI/_up <api/server/up>\fP endpoint,
check whether it thinks the node is healthy as well.
.IP 7. 3
Repeat the last 4 steps on the remaining nodes in the cluster.
.IP 8. 3
Relax! You\(aqre done.
.UNINDENT
.SS Upgrading from CouchDB 1.x
.sp
CouchDB 2.x fully supports upgrading from CouchDB 1.x. A data migration
process is required to use CouchDB 1.x databases in CouchDB 2.x. CouchDB
2.1 supplies a utility, \fBcouchup\fP, to simplify the migration process.
.SS \fBcouchup\fP utility
.sp
The \fBcouchup\fP utility is a Python script that supports listing CouchDB
1.x databases on a CouchDB 2.x installation, migrating them for use with
CouchDB 2.x, rebuilding any database views after migration, and deleting
the 1.x databases once migration is complete.
.sp
\fBcouchup\fP runs under Python 2.7 or 3.x, and requires the Python
\fI\%requests library\fP, and can optionally
make use of the Python \fI\%progressbar library\fP\&.
.SS Overview
.sp
couchup makes it easy to migrate your CouchDB 1.x databases to CouchDB
2.x by providing 4 useful sub\-commands:
.INDENT 0.0
.IP \(bu 2
\fBlist\fP \- lists all CouchDB 1.x databases
.IP \(bu 2
\fBreplicate\fP \- replicates one or more 1.x databases to CouchDB 2.x
.IP \(bu 2
\fBrebuild\fP \- rebuilds one or more CouchDB 2.x views
.IP \(bu 2
\fBdelete\fP \- deletes one or more CouchDB 1.x databases
.UNINDENT
.sp
Once you have installed CouchDB 2.x, copy the .couch files from
your 1.x installation (or, if you\(aqve upgraded in\-place, do nothing),
then use commands similar to the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ couchup list           # Shows your unmigrated 1.x databases
$ couchup replicate \-a   # Replicates your 1.x DBs to 2.x
$ couchup rebuild \-a     # Optional; starts rebuilding your views
$ couchup delete \-a      # Deletes your 1.x DBs (careful!)
$ couchup list           # Should show no remaining databases!
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The same process works for moving from a single 1.x node to a cluster of
2.x nodes; the only difference is that you must complete cluster setup
prior to running the couchup commands.
.SS Special Features
.INDENT 0.0
.IP \(bu 2
Lots of extra help is available via:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ couchup \-h
$ couchup <sub\-command> \-h
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Various optional arguments provide for admin login/password,
overriding ports, quiet mode and so on.
.IP \(bu 2
\fBcouchup delete\fP will NOT delete your 1.x DBs unless the contents are
identical to the replicated 2.x DBs, or you override with the
\fB\-f/\-\-force\fP command (be VERY careful with this!!)
.IP \(bu 2
\fBcouchup replicate\fP supports an optional flag, \fB\-f/\-\-filter\-deleted\fP, to
filter delete documents during the replication process. This can
improve the performance and disk\-size of your database if it has a lot
of deleted documents.
.sp
It is IMPORTANT that no documents be deleted
from the 1.x database during this process, or those deletions may not
successfully replicate to the 2.x database. (It\(aqs recommended that
you not access or modify the 1.x database at all during the whole
\fBcouchup\fP process.)
.UNINDENT
.SS Manual CouchDB 1.x migration
.sp
If you cannot use the \fBcouchup\fP utility, or prefer to migrate
yourself, a manual migration is also possible. In this process, a
full\-featured HTTP client such as \fBcurl\fP is required.
.sp
The process is similar to the automated approach:
.INDENT 0.0
.IP 1. 3
Copy all of your 1.x .couch files to the CouchDB 2.x \fBdata/\fP
directory and start CouchDB (2.x).
.IP 2. 3
Set up replication for each database from the node\-local port
(default: 5986) to the clustered port (default: 5984). This can be
done via the \fI/_replicate\fP endpoint or
the \fIreplicator database\fP\&.
.IP 3. 3
Rebuild each view by accessing it through the clustered port.
.IP 4. 3
Confirm that all databases and views can be accessed as desired.
.IP 5. 3
Remove the 1.x databases via a \fBDELETE\fP request on the
\fBnode\-local\fP port (default: 5986).
.UNINDENT
.SS Troubleshooting an Installation
.SS First Install
.sp
If your CouchDB doesn\(aqt start after you\(aqve just installed, check the following
things:
.INDENT 0.0
.IP \(bu 2
On UNIX\-like systems, this is usually this is a permissions issue. Ensure
that you\(aqve followed the \fIinstall/unix/security\fP
\fBchown\fP/\fBchmod\fP commands. This problem is indicated by the presence of
the keyword \fBeacces\fP somewhere in the error output from CouchDB itself.
.IP \(bu 2
Some Linux distributions split up Erlang into multiple packages. For your
distribution, check that you \fBreally\fP installed all the required Erlang
modules. This varies from platform to platform, so you\(aqll just have to
work it out for yourself. For example, on recent versions of Ubuntu/Debian,
the \fBerlang\fP package includes all Erlang modules.
.IP \(bu 2
Confirm that Erlang itself starts up with crypto (SSL) support:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
## what version of erlang are you running? Ensure it is supported
erl \-noshell \-eval \(aqio:put_chars(erlang:system_info(otp_release)).\(aq \-s erlang halt
## are the erlang crypto (SSL) libraries working?
erl \-noshell \-eval \(aqcase application:load(crypto) of ok \-> io:put_chars("yay_crypto\en") ; _ \-> exit(no_crypto) end.\(aq \-s init stop
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Next, identify where your Erlang CouchDB libraries are installed. This will
typically be the lib/ subdirectory of the release that you have installed.
.IP \(bu 2
Use this to start up Erlang with the CouchDB libraries in its path:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
erl \-env ERL_LIBS $ERL_LIBS:/path/to/couchdb/lib \-couch_ini \-s crypto
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
In that Erlang shell, let\(aqs check that the key libraries are running. The
\fB%%\fP lines are comments, so you can skip them:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
%% test SSL support. If this fails, ensure you have the OTP erlang\-crypto library installed
crypto:md5_init().

%% test Snappy compression. If this fails, check your CouchDB configure script output or alternatively
%% if your distro comes with erlang\-snappy make sure you\(aqre using only the CouchDB supplied version
snappy:compress("gogogogogogogogogogogogogogo").

%% test the CouchDB JSON encoder. CouchDB uses different encoders in each release, this one matches
%% what is used in 2.0.x.
jiffy:decode(jiffy:encode(<<"[1,2,3,4,5]">>)).

%% this is how you quit the erlang shell.
q().
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
The output should resemble this, or an error will be thrown:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Erlang/OTP 17 [erts\-6.2] [source] [64\-bit] [smp:2:2] [async\-threads:10] [kernel\-poll:false]

Eshell V6.2  (abort with ^G)
1> crypto:md5_init().
<<1,35,69,103,137,171,205,239,254,220,186,152,118,84,50,
  16,0,0,0,0,0,0,0,0,0,0,0,0,0,...>>
2> snappy:compress("gogogogogogogogogogogogogogo").
{ok,<<28,4,103,111,102,2,0>>}
3> jiffy:decode(jiffy:encode(<<"[1,2,3,4,5]">>)).
<<"[1,2,3,4,5]">>
4> q().
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
At this point the only remaining dependency is your system\(aqs Unicode support
library, ICU, and the Spidermonkey Javascript VM from Mozilla. Make sure that
your \fBLD_LIBRARY_PATH\fP or equivalent for non\-Linux systems
(\fBDYLD_LIBRARY_PATH\fP on macOS) makes these available to CouchDB.
Linux example running as normal user:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
  LD_LIBRARY_PATH=/usr/local/lib:/usr/local/spidermonkey/lib couchdb

Linux example running as couchdb user:
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo LD_LIBRARY_PATH=/usr/local/lib:/usr/local/spidermonkey/lib couchdb | sudo \-u couchdb sh
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
If you receive an error message including the key word \fBeaddrinuse\fP,
such as this:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
  Failure to start Mochiweb: eaddrinuse

edit your \(ga\(gaetc/default.ini\(ga\(ga or \(ga\(gaetc/local.ini\(ga\(ga file and change the
\(ga\(ga[chttpd] port = 5984\(ga\(ga line to an available port.
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
If you receive an error including the string:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
… OS Process Error … {os_process_error,{exit_status,127}}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
then it is likely your SpiderMonkey JavaScript VM installation is not
correct. Please recheck your build dependencies and try again.
.INDENT 0.0
.IP \(bu 2
If you receive an error including the string:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
… OS Process Error … {os_process_error,{exit_status,139}}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
this is caused by the fact that SELinux blocks access to certain areas of
the file system. You must re\-configure SELinux, or you can fully disable
SELinux using the command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
setenforce 0
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
If you are still not able to get CouchDB to start at this point, keep
reading.
.UNINDENT
.SS Quick Build
.sp
Having problems getting CouchDB to run for the first time? Follow this simple
procedure and report back to the user mailing list or IRC with the output
of each step. Please put the output of these steps into a paste service (such
as \fI\%https://paste.apache.org/\fP) rather than including the output of your entire
run in IRC or the mailing list directly.
.INDENT 0.0
.IP 1. 3
Note down the name and version of your operating system and your processor
architecture.
.IP 2. 3
Note down the installed versions of CouchDB\(aqs dependencies.
.IP 3. 3
Follow the checkout instructions to get a fresh copy of CouchDB\(aqs trunk.
.IP 4. 3
Configure from the couchdb directory:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&./configure
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 5. 3
Build the release:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make release
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 6. 3
Run the couchdb command and log the output:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cd rel/couchdb
bin/couchdb
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 7. 3
Use your system\(aqs kernel trace tool and log the output of the above command.
.INDENT 3.0
.IP a. 3
For example, linux systems should use \fBstrace\fP:
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
strace bin/couchdb 2> strace.out
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 8. 3
Report back to the mailing list (or IRC) with the output of each step.
.UNINDENT
.SS Upgrading
.sp
Are you upgrading from CouchDB 2.0? Install CouchDB into a fresh directory.
CouchDB\(aqs directory layout has changed and may be confused by libraries
present from previous releases.
.SS Runtime Errors
.SS Lots of memory being used on startup
.sp
Is your CouchDB using a lot of memory (several hundred MB) on startup? This one
seems to especially affect Dreamhost installs. It\(aqs really an issue with the
Erlang VM pre\-allocating data structures when ulimit is very large or
unlimited. A detailed discussion can be found on the erlang\-questions list,
but the short answer is that you should decrease \fBulimit \-n\fP or define
\fBERL_MAX_PORTS\fP to something reasonable like 1024.
.SS erlang stack trace contains \fBsystem_limit\fP, \fBopen_port\fP
.sp
Erlang has a default limit of 1024 ports, where each FD, tcp connection, and
linked\-in driver uses one port. You seem to have exceeded this. You can
change it at runtime using the \fBERL_MAX_PORTS\fP env variable.
.SS function raised exception (Cannot encode \(aqundefined\(aq value as JSON)
.sp
If you see this in the CouchDB error logs, the JavaScript code you are using
for either a map or reduce function is referencing an object member that is
not defined in at least one document in your database. Consider this
document:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "_id":"XYZ123",
  "_rev":"1BB2BB",
  "field":"value"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and this map function:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
  emit(doc.name, doc.address);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will fail on the above document, as it does not contain a \fBname\fP or
\fBaddress\fP member. Instead, use guarding to make sure the function only
accesses members when they exist in a document:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
  if(doc.name && doc.address) {
    emit(doc.name, doc.address);
  }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
While the above guard will work in most cases, it\(aqs worth bearing JavaScript\(aqs
understanding of \(aqfalse\(aq values in mind. Testing against a property with a
value of 0 (zero), \fB\(aq\(aq\fP (empty String), \fBfalse\fP or \fBnull\fP will return
false. If this is undesired, a guard of the form \fBif (doc.foo !== undefined)\fP
should do the trick.
.sp
This error can also be caused if a reduce function does not return a value. For
example, this reduce function will cause an error:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(key, values) {
  sum(values);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The function needs to return a value:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(key, values) {
  return sum(values);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS erlang stack trace contains \fBbad_utf8_character_code\fP
.sp
CouchDB 1.1.1 and later contain stricter handling of UTF8 encoding. If you are
replicating from older versions to newer versions, then this error may occur
during replication.
.sp
A number of work\-arounds exist; the simplest is to do an in\-place upgrade of
the relevant CouchDB and then compact prior to replicating.
.sp
Alternatively, if the number of documents impacted is small, use filtered
replication to exclude only those documents.
.SS FIPS mode
.sp
Operating systems can be configured to disallow the use of OpenSSL MD5 hash
functions in order to prevent use of MD5 for cryptographic purposes. CouchDB
makes use of MD5 hashes for verifying the integrity of data (and not for
cryptography) and will not run without the ability to use MD5 hashes.
.sp
The message below indicates that the operating system is running in "FIPS mode,"
which, among other restrictions, does not allow the use of OpenSSL\(aqs
MD5 functions:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
md5_dgst.c(82): OpenSSL internal error, assertion failed: Digest MD5 forbidden in FIPS mode!
[os_mon] memory supervisor port (memsup): Erlang has closed
[os_mon] cpu supervisor port (cpu_sup): Erlang has closed
Aborted
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A workaround for this is provided with the \fB\-\-erlang\-md5\fP compile flag. Use of
the flag results in CouchDB substituting the OpenSSL MD5 function calls with
equivalent calls to Erlang\(aqs built\-in library \fBerlang:md5.\fP NOTE: there may be
a performance penalty associated with this workaround.
.sp
Because CouchDB does not make use of MD5 hashes for cryptographic purposes, this
workaround does not defeat the purpose of "FIPS mode," provided that the system
owner is aware of and consents to its use.
.SS macOS Known Issues
.SS undefined error, exit_status 134
.sp
Sometimes the \fBVerify Installation\fP fails with an \fBundefined\fP error.
This could be due to a missing dependency with Mac.
In the logs, you will find \fBcouchdb exit_status,134\fP\&.
.sp
Installing the missing \fBnspr\fP via \fBbrew install nspr\fP resolves the issue.
(see: \fI\%https://github.com/apache/couchdb/issues/979\fP)
.SS Configuring CouchDB
.SS Introduction To Configuring
.SS Configuration files
.sp
By default, CouchDB reads configuration files from the following locations,
in the following order:
.INDENT 0.0
.IP 1. 3
\fBetc/default.ini\fP
.IP 2. 3
\fBetc/default.d/*.ini\fP
.IP 3. 3
\fBetc/local.ini\fP
.IP 4. 3
\fBetc/local.d/*.ini\fP
.UNINDENT
.sp
All paths are specified relative to the CouchDB installation directory:
\fB/opt/couchdb\fP recommended on UNIX\-like systems, \fBC:\eCouchDB\fP recommended
on Windows systems, and a combination of two directories on macOS:
\fBApplications/Apache CouchDB.app/Contents/Resources/couchdbx\-core/etc\fP for
the \fBdefault.ini\fP and \fBdefault.d\fP directories, and
\fB/Users/youruser/Library/Application Support/CouchDB2/etc/couchdb\fP for
the \fBlocal.ini\fP and \fBlocal.d\fP directories.
.sp
Settings in successive documents override the settings in earlier entries.
For example, setting the \fBhttpd/bind_address\fP parameter in
\fBlocal.ini\fP would override any setting in \fBdefault.ini\fP\&.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
The \fBdefault.ini\fP file may be overwritten during an upgrade or
re\-installation, so localised changes should be made to the \fBlocal.ini\fP
file or files within the \fBlocal.d\fP directory.
.UNINDENT
.UNINDENT
.sp
The configuration file chain may be changed by setting the ERL_FLAGS
environment variable:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
export ERL_FLAGS="\-couch_ini /path/to/my/default.ini /path/to/my/local.ini"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or by placing the \fB\-couch_ini ..\fP flag directly in the \fBetc/vm.args\fP file.
Passing \fB\-couch_ini ..\fP as a command\-line argument when launching \fBcouchdb\fP
is the same as setting the \fBERL_FLAGS\fP environment variable.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
The environment variable/command\-line flag overrides any \fB\-couch_ini\fP
option specified in the \fBetc/vm.args\fP file. And, \fBBOTH\fP of these
options \fBcompletely\fP override CouchDB from searching in the default
locations. Use these options only when necessary, and be sure to track
the contents of \fBetc/default.ini\fP, which may change in future releases.
.UNINDENT
.UNINDENT
.sp
If there is a need to use different \fBvm.args\fP or \fBsys.config\fP files, for
example, in different locations to the ones provided by CouchDB, or you don\(aqt
want to edit the original files, the default locations may be changed by
setting the COUCHDB_VM_ARGS_FILE or COUCHDB_SYSCONFIG_FILE environment
variables:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
export COUCHDB_VM_ARGS_FILE="/path/to/my/vm.args"
export COUCHDB_SYSCONFIG_FILE="/path/to/my/sys.config"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Parameter names and values
.sp
All parameter names are \fIcase\-sensitive\fP\&. Every parameter takes a value of one
of five types: \fIboolean\fP, \fIinteger\fP, \fIstring\fP, \fI\%tuple\fP and \fI\%proplist\fP\&.
Boolean values can be written as \fBtrue\fP or \fBfalse\fP\&.
.sp
Parameters with value type of \fItuple\fP or \fIproplist\fP are following the Erlang
requirement for style and naming.
.SS Setting parameters via the configuration file
.sp
The common way to set some parameters is to edit the \fBlocal.ini\fP file
(location explained above).
.sp
For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
; This is a comment
[section]
param = value ; inline comments are allowed
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Each configuration file line may contains \fIsection\fP definition, \fIparameter\fP
specification, empty (space and newline characters only) or \fIcommented\fP line.
You can set up \fIinline\fP commentaries for \fIsections\fP or \fIparameters\fP\&.
.sp
The \fIsection\fP defines group of parameters that are belongs to some specific
CouchDB subsystem. For instance, \fBhttpd\fP section holds not only HTTP
server parameters, but also others that directly interacts with it.
.sp
The \fIparameter\fP specification contains two parts divided by the \fIequal\fP sign
(\fB=\fP): the parameter name on the left side and the parameter value on the
right one. The leading and following whitespace for \fB=\fP is an optional to
improve configuration readability.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In case when you\(aqd like to remove some parameter from the \fIdefault.ini\fP
without modifying that file, you may override in \fIlocal.ini\fP, but without
any value:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_global_handlers]
_all_dbs =
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This could be read as: "remove the \fI_all_dbs\fP parameter from the
\fIhttpd_global_handlers\fP section if it was ever set before".
.UNINDENT
.UNINDENT
.sp
The semicolon (\fB;\fP) signals the start of a comment. Everything after this
character is ignored by CouchDB.
.sp
After editing the configuration file, CouchDB should be restarted to apply
any changes.
.SS Setting parameters via the HTTP API
.sp
Alternatively, configuration parameters can be set via the
\fIHTTP API\fP\&. This API allows changing CouchDB configuration
on\-the\-fly without requiring a server restart:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT http://localhost:5984/_node/<name@host>/_config/uuids/algorithm \-d \(aq"random"\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The old parameter\(aqs value is returned in the response:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
"sequential"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You should be careful changing configuration via the HTTP API since it\(aqs
possible  to make CouchDB unreachable, for example, by changing the
\fBhttpd/bind_address\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT http://localhost:5984/_node/<name@host>/_config/httpd/bind_address \-d \(aq"10.10.0.128"\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you make a typo or the specified IP address is not available from your
network, CouchDB will be unreachable. The only way to resolve this will be
to remote into the server, correct the config file, and restart CouchDB. To
protect yourself against such accidents you may set the
\fBhttpd/config_whitelist\fP of permitted configuration parameters for
updates via the HTTP API. Once this option is set, further changes to
non\-whitelisted parameters must take place via the configuration file, and in
most cases, will also require a server restart before taking effect.
.SS Configuring the local node
.sp
While the \fIHTTP API\fP allows configuring all nodes in the
cluster, as a convenience, you can use the literal string \fB_local\fP in place
of the node name, to interact with the local node\(aqs configuration.  For
example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT http://localhost:5984/_node/_local/_config/uuids/algorithm \-d \(aq"random"\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Base Configuration
.SS Base CouchDB Options
.INDENT 0.0
.TP
.B [couchdb]
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B attachment_stream_buffer_size
Higher values may result in better read performance due to fewer read
operations and/or more OS page cache hits. However, they can also
increase overall response time for writes when there are many
attachment write requests in parallel.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couchdb]
attachment_stream_buffer_size = 4096
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B database_dir
Specifies location of CouchDB database files (\fB*.couch\fP named). This
location should be writable and readable for the user the CouchDB
service runs as (\fBcouchdb\fP by default).
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couchdb]
database_dir = /var/lib/couchdb
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B default_security
Default security object for databases if not explicitly set. When set to \fBeveryone\fP, anyone can performs reads and writes. When set to \fBadmin_only\fP, only admins can read and write. When set to \fBadmin_local\fP, sharded databases can be read and written by anyone but the shards can only be read and written by admins.
.INDENT 7.0
.INDENT 3.5
[couchdb]
default_security = admin_local
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B delayed_commits
When this config value is \fBfalse\fP the CouchDB provides a guarantee
that \fIfsync\fP will be called before returning a \fI\%201 Created\fP
response on each document save. Setting this config value to \fBtrue\fP
may improve performance, at cost of some durability. For production use
disabling this is strongly recommended:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couchdb]
delayed_commits = false
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
Delayed commits are a feature of CouchDB that allows it to achieve
better write performance for some workloads while sacrificing a
small amount of durability. The setting causes CouchDB to wait up
to a full second before committing new data after an update. If the
server crashes before the header is written then any writes since
the last commit are lost.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B file_compression
Changed in version 1.2: Added \fI\%Google Snappy\fP compression algorithm.

.sp
Method used to compress everything that is appended to database and
view index files, except for attachments (see the
\fBattachments\fP section). Available methods are:
.INDENT 7.0
.IP \(bu 2
\fBnone\fP: no compression
.IP \(bu 2
\fBsnappy\fP: use Google Snappy, a very fast compressor/decompressor
.IP \(bu 2
\fBdeflate_N\fP: use zlib\(aqs deflate; \fBN\fP is the compression level
which ranges from \fB1\fP (fastest, lowest compression ratio) to \fB9\fP
(slowest, highest compression ratio)
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couchdb]
file_compression = snappy
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B fsync_options
Specifies when to make \fIfsync\fP calls. \fIfsync\fP makes sure that the
contents of any file system buffers kept by the operating system are
flushed to disk. There is generally no need to modify this parameter.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couchdb]
fsync_options = [before_header, after_header, on_file_open]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B max_dbs_open
This option places an upper bound on the number of databases that can
be open at once. CouchDB reference counts database accesses internally
and will close idle databases as needed. Sometimes it is necessary to
keep more than the default open at once, such as in deployments where
many databases will be replicating continuously.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couchdb]
max_dbs_open = 100
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B os_process_timeout
If an external process, such as a query server or external process,
runs for this amount of milliseconds without returning any results, it
will be terminated. Keeping this value smaller ensures you get
expedient errors, but you may want to tweak it for your specific
needs.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couchdb]
os_process_timeout = 5000 ; 5 sec
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B uri_file
This file contains the full \fI\%URI\fP that can be used to access this
instance of CouchDB. It is used to help discover the port CouchDB is
running on (if it was set to \fB0\fP (e.g. automatically assigned any
free one). This file should be writable and readable for the user that
runs the CouchDB service (\fBcouchdb\fP by default).
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couchdb]
uri_file = /var/run/couchdb/couchdb.uri
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B users_db_suffix
.INDENT 7.0
.INDENT 3.5
Specifies the suffix (last component of a name) of the system database
for storing CouchDB users.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[couchdb]
users_db_suffix = _users
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
If you change the database name, do not forget to remove or clean
up the old database, since it will no longer be protected by
CouchDB.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B util_driver_dir
Specifies location of binary drivers (\fIicu\fP, \fIejson\fP, etc.). This
location and its contents should be readable for the user that runs the
CouchDB service.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couchdb]
util_driver_dir = /usr/lib/couchdb/erlang/lib/couch\-1.5.0/priv/lib
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B uuid
New in version 1.3.

.sp
Unique identifier for this CouchDB server instance.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couchdb]
uuid = 0a959b9b8227188afc2ac26ccdf345a6
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B view_index_dir
Specifies location of CouchDB view index files. This location should be
writable and readable for the user that runs the CouchDB service
(\fBcouchdb\fP by default).
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couchdb]
view_index_dir = /var/lib/couchdb
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B maintenance_mode
A CouchDB node may be put into two distinct maintenance modes by setting
this configuration parameter.
.INDENT 7.0
.IP \(bu 2
\fBtrue\fP: The node will not respond to clustered requests from other
nodes and the /_up endpoint will return a 404 response.
.IP \(bu 2
\fBnolb\fP: The /_up endpoint will return a 404 response.
.IP \(bu 2
\fBfalse\fP: The node responds normally, /_up returns a 200 response.
.UNINDENT
.sp
It is expected that the administrator has configured a load balancer
in front of the CouchDB nodes in the cluster. This load balancer should
use the /_up endpoint to determine whether or not to send HTTP requests
to any particular node. For HAProxy, the following config is
appropriate:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
http\-check disable\-on\-404
option httpchk GET /_up
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B max_document_size
Changed in version 2.1.0.

.sp
Limit maximum document body size. Size is calculated based on the
serialized Erlang representation of the JSON document body, because
that reflects more accurately the amount of storage consumed on disk.
In particular, this limit does not include attachments.
.sp
HTTP requests which create or update documents will fail with error
code 413 if one or more documents is larger than this configuration
value.
.sp
In case of \fI_update\fP handlers, document size is checked after the
transformation and right before being inserted into the database.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couchdb]
max_document_size = 4294967296 ; 4 GB
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
Before version 2.1.0 this setting was implemented by simply checking
http request body sizes. For individual document updates via \fIPUT\fP
that approximation was close enough, however that is not the case
for \fI_bulk_docs\fP endpoint. After 2.1.0 a separate configuration
parameter was defined: \fBhttpd/max_http_request_size\fP,
which can be used to limit maximum http request sizes. After upgrade,
it is advisable to review those settings and adjust them accordingly.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Configuring Clustering
.SS Cluster Options
.INDENT 0.0
.TP
.B [cluster]
.INDENT 7.0
.TP
.B q
.UNINDENT
.sp
Sets the default number of shards for newly created databases. The
default value, \fB8\fP, splits a database into 8 separate partitions.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[cluster]
q = 8
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For systems with lots of small, infrequently accessed databases, or
for servers with fewer CPU cores, consider reducing this value to
\fB1\fP or \fB2\fP\&.
.sp
The value of \fBq\fP can also be overridden on a per\-DB basis, at DB
creation time.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
httpdomain:put:\fIPUT /{db} </{db}>\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B n
.UNINDENT
.sp
Sets the number of replicas of each document in a cluster. CouchDB will
only place one replica per node in a cluster. When set up through the
\fICluster Setup Wizard\fP, a standalone single
node will have \fBn = 1\fP, a two node cluster will have \fBn = 2\fP, and
any larger cluster will have \fBn = 3\fP\&. It is recommended not to set
\fBn\fP greater than \fB3\fP\&.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[cluster]
n = 3
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B placement
.UNINDENT
.sp
Sets the cluster\-wide replica placement policy when creating new
databases. The value must be a comma\-delimited list of strings of the
format \fBzone_name:#\fP, where \fBzone_name\fP is a zone as specified in
the \fBnodes\fP database and \fB#\fP is an integer indicating the number of
replicas to place on nodes with a matching \fBzone_name\fP\&.
.sp
This parameter is not specified by default.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[cluster]
placement = metro\-dc\-a:2,metro\-dc\-b:1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fIcluster/databases/placement\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SS couch_peruser
.SS couch_peruser Options
.INDENT 0.0
.TP
.B [couch_peruser]
.INDENT 7.0
.TP
.B enable
.UNINDENT
.sp
If set to \fBtrue\fP, couch_peruser ensures that a private per\-user
database exists for each document in \fB_users\fP\&. These databases are
writable only by the corresponding user. Databases are in the following
form: \fBuserdb\-{hex encoded username}\fP\&.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_peruser]
enable = false
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B delete_dbs
.UNINDENT
.sp
If set to \fBtrue\fP and a user is deleted, the respective database gets
deleted as well.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_peruser]
delete_dbs = false
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS CouchDB HTTP Server
.SS HTTP Server Options
.INDENT 0.0
.TP
.B [chttpd]
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In CouchDB 2.x, the \fIchttpd\fP section refers to the standard, clustered
port. All use of CouchDB, aside from a few specific maintenance tasks as
described in this documentation, should be performed over this port.
.INDENT 0.0
.INDENT 3.5
Defines the IP address by which the clustered port is available:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[chttpd]
bind_address = 127.0.0.1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To let CouchDB listen any available IP address, use \fI0.0.0.0\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[chttpd]
bind_address = 0.0.0.0
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For IPv6 support you need to set \fI::1\fP if you want to let CouchDB
listen correctly:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[chttpd]
bind_address = ::1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or \fI::\fP for any available:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[chttpd]
bind_address = ::
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B port
Defines the port number to listen:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[chttpd]
port = 5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To let CouchDB use any free port, set this option to \fI0\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[chttpd]
port = 0
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B prefer_minimal
If a request has the header \fI"Prefer": "return=minimal"\fP, CouchDB
will only send the headers that are listed for the \fIprefer_minimal\fP
configuration.:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[chttpd]
prefer_minimal = Cache\-Control, Content\-Length, Content\-Range, Content\-Type, ETag, Server, Transfer\-Encoding, Vary
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
Removing the Server header from the settings will mean that
the CouchDB server header is replaced with the
MochiWeb server header.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B authentication_handlers
List of authentication handlers used by CouchDB. You may
extend them via third\-party plugins or remove some of them if you won\(aqt
let users to use one of provided methods:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[chttpd]
authentication_handlers = {chttpd_auth, cookie_authentication_handler}, {chttpd_auth, default_authentication_handler}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
\fB{chttpd_auth, cookie_authentication_handler}\fP: used for Cookie auth;
.IP \(bu 2
\fB{couch_httpd_auth, proxy_authentication_handler}\fP: used for Proxy auth;
.IP \(bu 2
\fB{chttpd_auth, default_authentication_handler}\fP: used for Basic auth;
.IP \(bu 2
\fB{couch_httpd_auth, null_authentication_handler}\fP: disables auth.
Everlasting \fIAdmin Party\fP!
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B [httpd]
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
In CouchDB 2.x, the \fIhttpd\fP section mostly refers to the node\-local port,
on port 5986 by default. This port is used only for maintenance and
administrative tasks. \fBIt should not be used for regular CouchDB access\fP,
and for security reasons, \fBshould always be bound to localhost\fP
(\fI127.0.0.1\fP) or a private LAN segment only.
.INDENT 0.0
.TP
.B allow_jsonp
The \fBtrue\fP value of this option enables \fI\%JSONP\fP support (it\(aqs
\fBfalse\fP by default):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
allow_jsonp = false
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B bind_address
Defines the IP address by which the node\-local port is available.
The recommended setting is always:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
bind_address = 127.0.0.1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For IPv6 support you need to set \fI::1\fP if you want to let CouchDB
listen correctly:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
bind_address = ::1
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B changes_timeout
Specifies default \fItimeout\fP value for \fIChanges Feed\fP in
milliseconds (60000 by default):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
changes_feed = 60000 ; 60 seconds
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B config_whitelist
Sets the configuration modification whitelist. Only whitelisted values
may be changed via the \fIconfig API\fP\&. To allow the
admin to change this value over HTTP, remember to include
\fB{httpd,config_whitelist}\fP itself. Excluding it from the list would
require editing this file to update the whitelist:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
config_whitelist = [{httpd,config_whitelist}, {log,level}, {etc,etc}]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B default_handler
Specifies default HTTP requests handler:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
default_handler = {couch_httpd_db, handle_request}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B enable_cors
New in version 1.3.

.sp
Controls \fICORS\fP feature:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
enable_cors = false
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B port
Defines the port number to listen:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
port = 5986
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To let CouchDB use any free port, set this option to \fB0\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
port = 0
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B redirect_vhost_handler
This option customizes the default function that handles requests to
\fBvirtual hosts\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
redirect_vhost_handler = {Module, Fun}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The specified function take 2 arguments: the MochiWeb request object
and the target path.
.UNINDENT
.INDENT 0.0
.TP
.B server_options
Server options for the \fI\%MochiWeb\fP component of CouchDB can be added to
the configuration files:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
server_options = [{backlog, 128}, {acceptor_pool_size, 16}]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B secure_rewrites
This option allow to isolate databases via subdomains:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
secure_rewrites = true
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B socket_options
The socket options for the listening socket in CouchDB can be specified
as a list of tuples. For example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
socket_options = [{recbuf, 262144}, {sndbuf, 262144}, {nodelay, true}]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The options supported are a subset of full options supported by the
TCP/IP stack. A list of the supported options are provided in the
\fI\%Erlang inet\fP documentation.
.UNINDENT
.INDENT 0.0
.TP
.B vhost_global_handlers
List of global handlers that are available for \fBvirtual hosts\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
vhost_global_handlers = _utils, _uuids, _session, _users
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B x_forwarded_host
The \fIx_forwarded_host\fP header (\fBX\-Forwarded\-Host\fP by default) is used
to forward the original value of the \fBHost\fP header field in case, for
example, if a reverse proxy is rewriting the "Host" header field to
some internal host name before forward the request to CouchDB:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
x_forwarded_host = X\-Forwarded\-Host
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This header has higher priority above \fBHost\fP one, if only it exists
in the request.
.UNINDENT
.INDENT 0.0
.TP
.B x_forwarded_proto
\fIx_forwarded_proto\fP header (\fBX\-Forwarder\-Proto\fP by default) is used
for identifying the originating protocol of an HTTP request, since a
reverse proxy may communicate with CouchDB instance using HTTP even if
the request to the reverse proxy is HTTPS:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
x_forwarded_proto = X\-Forwarded\-Proto
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B x_forwarded_ssl
The \fIx_forwarded_ssl\fP header (\fBX\-Forwarded\-Ssl\fP by default) tells
CouchDB that it should use the \fIhttps\fP scheme instead of the \fIhttp\fP\&.
Actually, it\(aqs a synonym for \fBX\-Forwarded\-Proto: https\fP header, but
used by some reverse proxies:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
x_forwarded_ssl = X\-Forwarded\-Ssl
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B enable_xframe_options
Controls \fIEnables or disabled\fP feature:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
enable_xframe_options = false
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B WWW\-Authenticate
Set this option to trigger basic\-auth pop\-up on unauthorized requests:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
WWW\-Authenticate = Basic realm="Welcome to the Couch!"
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B max_http_request_size
Changed in version 2.1.0.

.sp
Limit the maximum size of the HTTP request body. This setting applies
to all requests and it doesn\(aqt discriminate between single vs.
multi\-document operations. So setting it to 1MB would block a
\fIPUT\fP of a document larger than 1MB, but it might also block a
\fI_bulk_docs\fP update of 1000 1KB documents, or a multipart/related
update of a small document followed by two 512KB attachments. This
setting is intended to be used as a protection against maliciously
large HTTP requests rather than for limiting maximum document sizes.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
max_http_request_size = 4294967296 ; 4 GB
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
Before version 2.1.0 \fBcouchdb/max_document_size\fP was
implemented effectively as \fBmax_http_request_size\fP\&. That is, it
checked HTTP request bodies instead of document sizes. After the
upgrade, it is advisable to review the usage of these configuration
settings.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Secure Socket Level Options
.INDENT 0.0
.TP
.B [ssl]
CouchDB supports SSL natively. All your secure connection needs can now be
served without needing to set up and maintain a separate proxy server that
handles SSL.
.sp
SSL setup can be tricky, but the configuration in CouchDB was designed to
be as easy as possible. All you need is two files; a certificate and a
private key. If you bought an official SSL certificate from a certificate
authority, both should be in your possession already.
.sp
If you just want to try this out and don\(aqt want to pay anything upfront,
you can create a self\-signed certificate. Everything will work the same,
but clients will get a warning about an insecure certificate.
.sp
You will need the \fI\%OpenSSL\fP command line tool installed. It probably
already is.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
shell> mkdir /etc/couchdb/cert
shell> cd /etc/couchdb/cert
shell> openssl genrsa > privkey.pem
shell> openssl req \-new \-x509 \-key privkey.pem \-out couchdb.pem \-days 1095
shell> chmod 600 privkey.pem couchdb.pem
shell> chown couchdb privkey.pem couchdb.pem
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now, you need to edit CouchDB\(aqs configuration, by editing your
\fBlocal.ini\fP file. Here is what you need to do.
.sp
At first, \fBenable the HTTPS daemon\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[daemons]
httpsd = {chttpd, start_link, [https]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Next, under the \fB[ssl]\fP section set up the newly generated certificates:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[ssl]
cert_file = /etc/couchdb/cert/couchdb.pem
key_file = /etc/couchdb/cert/privkey.pem
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For more information please read \fI\%certificates HOWTO\fP\&.
.sp
Now start (or restart) CouchDB. You should be able to connect to it
using HTTPS on port 6984:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
shell> curl https://127.0.0.1:6984/
curl: (60) SSL certificate problem, verify that the CA cert is OK. Details:
error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed
More details here: http://curl.haxx.se/docs/sslcerts.html

curl performs SSL certificate verification by default, using a "bundle"
of Certificate Authority (CA) public keys (CA certs). If the default
bundle file isn\(aqt adequate, you can specify an alternate file
using the \-\-cacert option.
If this HTTPS server uses a certificate signed by a CA represented in
the bundle, the certificate verification probably failed due to a
problem with the certificate (it might be expired, or the name might
not match the domain name in the URL).
If you\(aqd like to turn off curl\(aqs verification of the certificate, use
the \-k (or \-\-insecure) option.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Oh no! What happened?! Remember, clients will notify their users that your
certificate is self signed. \fBcurl\fP is the client in this case and it
notifies you. Luckily you trust yourself (don\(aqt you?) and you can specify
the \fB\-k\fP option as the message reads:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
shell> curl \-k https://127.0.0.1:6984/
{"couchdb":"Welcome","version":"1.5.0"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
All done.
.INDENT 7.0
.TP
.B cacert_file
The path to a file containing PEM encoded CA certificates. The CA
certificates are used to build the server certificate chain, and for
client authentication. Also the CAs are used in the list of acceptable
client CAs passed to the client when a certificate is requested. May be
omitted if there is no need to verify the client and if there are not
any intermediate CAs for the server certificate:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[ssl]
cacert_file = /etc/ssl/certs/ca\-certificates.crt
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B cert_file
Path to a file containing the user\(aqs certificate:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[ssl]
cert_file = /etc/couchdb/cert/couchdb.pem
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B key_file
Path to file containing user\(aqs private PEM encoded key:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[ssl]
key_file = /etc/couchdb/cert/privkey.pem
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B password
String containing the user\(aqs password. Only used if the private key file
is password protected:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[ssl]
password = somepassword
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ssl_certificate_max_depth
Maximum peer certificate depth (must be set even if certificate
validation is off):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[ssl]
ssl_certificate_max_depth = 1
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B verify_fun
The verification fun (optional) if not specified, the default
verification fun will be used:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[ssl]
verify_fun = {Module, VerifyFun}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B verify_ssl_certificates
Set to \fItrue\fP to validate peer certificates:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[ssl]
verify_ssl_certificates = false
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B fail_if_no_peer_cert
Set to \fItrue\fP to terminate the TLS/SSL handshake with a
\fIhandshake_failure\fP alert message if the client does not send a
certificate. Only used if \fIverify_ssl_certificates\fP is \fItrue\fP\&. If set
to \fIfalse\fP it will only fail if the client sends an invalid certificate
(an empty certificate is considered valid):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[ssl]
fail_if_no_peer_cert = false
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B secure_renegotiate
Set to \fItrue\fP to reject renegotiation attempt that does not live up to
RFC 5746:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[ssl]
secure_renegotiate = true
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ciphers
Set to the cipher suites that should be supported which can be
specified in erlang format "{ecdhe_ecdsa,aes_128_cbc,sha256}" or
in OpenSSL format "ECDHE\-ECDSA\-AES128\-SHA256".
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[ssl]
ciphers = ["ECDHE\-ECDSA\-AES128\-SHA256", "ECDHE\-ECDSA\-AES128\-SHA"]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tls_versions
Set to a list of permitted SSL/TLS protocol versions:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[ssl]
tls_versions = [tlsv1 | \(aqtlsv1.1\(aq | \(aqtlsv1.2\(aq]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Cross\-Origin Resource Sharing
.INDENT 0.0
.TP
.B [cors]
New in version 1.3: added CORS support, see JIRA \fI\%COUCHDB\-431\fP

.sp
\fICORS\fP, or "Cross\-Origin Resource Sharing", allows a resource such as a web
page running JavaScript inside a browser, to make AJAX requests
(XMLHttpRequests) to a different domain, without compromising the security
of either party.
.sp
A typical use case is to have a static website hosted on a CDN make
requests to another resource, such as a hosted CouchDB instance. This
avoids needing an intermediary proxy, using \fIJSONP\fP or similar workarounds
to retrieve and host content.
.sp
While CouchDB\(aqs integrated HTTP server has support for document attachments
makes this less of a constraint for pure CouchDB projects, there are many
cases where separating the static content from the database access is
desirable, and CORS makes this very straightforward.
.sp
By supporting CORS functionality, a CouchDB instance can accept direct
connections to protected databases and instances, without the browser
functionality being blocked due to same\-origin constraints. CORS is
supported today on over 90% of recent browsers.
.sp
CORS support is provided as experimental functionality in 1.3, and as such
will need to be enabled specifically in CouchDB\(aqs configuration. While all
origins are forbidden from making requests by default, support is available
for simple requests, preflight requests and per\-vhost configuration.
.sp
This section requires \fBhttpd/enable_cors\fP option have
\fBtrue\fP value:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
enable_cors = true
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B credentials
By default, neither authentication headers nor cookies are included in
requests and responses. To do so requires both setting
\fBXmlHttpRequest.withCredentials = true\fP on the request object in the
browser and enabling credentials support in CouchDB.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[cors]
credentials = true
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB will respond to a credentials\-enabled CORS request with an
additional header, \fBAccess\-Control\-Allow\-Credentials=true\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B origins
List of origins separated by a comma, \fB*\fP means accept all. You can’t
set \fBorigins = *\fP and \fBcredentials = true\fP option at the same
time:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[cors]
origins = *
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Access can be restricted by protocol, host and optionally by port.
Origins must follow the scheme: \fI\%http://example.com:80\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[cors]
origins = http://localhost, https://localhost, http://couch.mydev.name:8080
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that by default, no origins are accepted. You must define them
explicitly.
.UNINDENT
.INDENT 7.0
.TP
.B headers
List of accepted headers separated by a comma:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[cors]
headers = X\-Couch\-Id, X\-Couch\-Rev
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B methods
List of accepted methods:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[cors]
methods = GET,POST
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
Original JIRA \fI\%implementation ticket\fP
.sp
Standards and References:
.INDENT 0.0
.IP \(bu 2
IETF RFCs relating to methods: \fI\%RFC 2618\fP, \fI\%RFC 2817\fP, \fI\%RFC 5789\fP
.IP \(bu 2
IETF RFC for Web Origins: \fI\%RFC 6454\fP
.IP \(bu 2
W3C \fI\%CORS standard\fP
.UNINDENT
.sp
Mozilla Developer Network Resources:
.INDENT 0.0
.IP \(bu 2
\fI\%Same origin policy for URIs\fP
.IP \(bu 2
\fI\%HTTP Access Control\fP
.IP \(bu 2
\fI\%Server\-side Access Control\fP
.IP \(bu 2
\fI\%JavaScript same origin policy\fP
.UNINDENT
.sp
Client\-side CORS support and usage:
.INDENT 0.0
.IP \(bu 2
\fI\%CORS browser support matrix\fP
.IP \(bu 2
\fI\%COS tutorial\fP
.IP \(bu 2
\fI\%XHR with CORS\fP
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Per Virtual Host Configuration
.sp
To set the options for a \fBvhosts\fP, you will need to create a section
with the vhost name prefixed by \fBcors:\fP\&. Example case for the vhost
\fIexample.com\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[cors:example.com]
credentials = false
; List of origins separated by a comma
origins = *
; List of accepted headers separated by a comma
headers = X\-CouchDB\-Header
; List of accepted methods
methods = HEAD, GET
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Virtual Hosts
.INDENT 0.0
.TP
.B [vhosts]
CouchDB can map requests to different locations based on the \fBHost\fP
header, even if they arrive on the same inbound IP address.
.sp
This allows different virtual hosts on the same machine to map to different
databases or design documents, etc. The most common use case is to map a
virtual host to a \fIRewrite Handler\fP, to provide
full control over the application\(aqs URIs.
.sp
To add a virtual host, add a \fICNAME\fP pointer to the DNS for your domain
name. For development and testing, it is sufficient to add an entry in the
hosts file, typically \fI/etc/hosts\(ga\fP on Unix\-like operating systems:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
# CouchDB vhost definitions, refer to local.ini for further details
127.0.0.1       couchdb.local
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Test that this is working:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
$ ping \-n 2 couchdb.local
PING couchdb.local (127.0.0.1) 56(84) bytes of data.
64 bytes from localhost (127.0.0.1): icmp_req=1 ttl=64 time=0.025 ms
64 bytes from localhost (127.0.0.1): icmp_req=2 ttl=64 time=0.051 ms
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Finally, add an entry to your \fIconfiguration file\fP in the
\fB[vhosts]\fP section:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[vhosts]
couchdb.local:5984 = /example
*.couchdb.local:5984 = /example
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If your CouchDB is listening on the the default HTTP port (80), or is
sitting behind a proxy, then you don\(aqt need to specify a port number in the
\fIvhost\fP key.
.sp
The first line will rewrite the request to display the content of the
\fIexample\fP database. This rule works only if the \fBHost\fP header is
\fBcouchdb.local\fP and won\(aqt work for \fICNAMEs\fP\&. The second rule, on the
other hand, matches all \fICNAMEs\fP to \fIexample\fP db, so that both
\fIwww.couchdb.local\fP and \fIdb.couchdb.local\fP will work.
.UNINDENT
.SS Rewriting Hosts to a Path
.sp
Like in the \fI_rewrite\fP handler you can match some
variable and use them to create the target path. Some examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[vhosts]
*.couchdb.local = /*
:dbname. = /:dbname
:ddocname.:dbname.example.com = /:dbname/_design/:ddocname/_rewrite
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The first rule passes the wildcard as \fIdbname\fP\&. The second one does the same,
but uses a variable name. And the third one allows you to use any URL with
\fIddocname\fP in any database with \fIdbname\fP\&.
.sp
You could also change the default function to handle request by changing the
setting \fBhttpd/redirect_vhost_handler\fP\&.
.SS X\-Frame\-Options
.sp
X\-Frame\-Options is a response header that controls whether a http response
can be embedded in a <frame>, <iframe> or <object>. This is a security
feature to help against clickjacking.
.INDENT 0.0
.INDENT 3.5
[x_frame_options]
; Settings same\-origin will return X\-Frame\-Options: SAMEORIGIN.
; If same origin is set, it will ignore the hosts setting
; same_origin = true
; Settings hosts will
; return X\-Frame\-Options: ALLOW\-FROM \fI\%https://example.com/\fP
; List of hosts separated by a comma. * means accept all
; hosts =
.UNINDENT
.UNINDENT
.sp
If xframe_options is enabled it will return \fIX\-Frame\-Options: DENY\fP by default.
If \fIsame_origin\fP is enabled it will return \fIX\-Frame\-Options: SAMEORIGIN\fP\&.
A \fIX\-FRAME\-OPTIONS: ALLOW\-FROM url\fP will be returned when \fIsame_origin\fP
is false, and the HOST header matches one of the urls in the \fIhosts\fP config.
Otherwise a \fIX\-Frame\-Options: DENY\fP will be returned.
.SS Authentication and Authorization
.SS Server Administrators
.INDENT 0.0
.TP
.B [admins]
A default CouchDB install provides admin\-level access to all connecting
users. This configuration is known as \fIAdmin Party\fP, and is not recommended
for in\-production usage. You can crash the party simply by creating the
first admin account. CouchDB server administrators and passwords are not
stored in the \fB_users\fP database, but in the \fBlocal.ini\fP file, which
should be appropriately secured and readable only by system
administrators:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[admins]
;admin = mysecretpassword
admin = \-hashed\-6d3c30241ba0aaa4e16c6ea99224f915687ed8cd,7f4a3e05e0cbc6f48a0035e3508eef90
architect = \-pbkdf2\-43ecbd256a70a3a2f7de40d2374b6c3002918834,921a12f74df0c1052b3e562a23cd227f,10000
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Administrators can be added directly to the \fB[admins]\fP section, and when
CouchDB is restarted, the passwords will be salted and encrypted. You may
also use the HTTP interface to create administrator accounts; this way,
you don\(aqt need to restart CouchDB, and there\(aqs no need to temporarily store
or transmit passwords in plaintext. The HTTP
\fB/_node/{node\-name}/_config/admins\fP endpoint supports querying, deleting
or creating new admin accounts:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_node/nonode@nohost/_config/admins HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 196
Content\-Type: application/json
Date: Fri, 30 Nov 2012 11:37:18 GMT
Server: CouchDB (Erlang/OTP)
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "admin": "\-hashed\-6d3c30241ba0aaa4e16c6ea99224f915687ed8cd,7f4a3e05e0cbc6f48a0035e3508eef90",
    "architect": "\-pbkdf2\-43ecbd256a70a3a2f7de40d2374b6c3002918834,921a12f74df0c1052b3e562a23cd227f,10000"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you already have a salted, encrypted password string (for example, from
an old \fBlocal.ini\fP file, or from a different CouchDB server), then you
can store the "raw" encrypted string, without having CouchDB doubly encrypt
it.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
PUT /_node/nonode@nohost/_config/admins/architect?raw=true HTTP/1.1
Accept: application/json
Content\-Type: application/json
Content\-Length: 89
Host: localhost:5984

"\-pbkdf2\-43ecbd256a70a3a2f7de40d2374b6c3002918834,921a12f74df0c1052b3e562a23cd227f,10000"
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 89
Content\-Type: application/json
Date: Fri, 30 Nov 2012 11:39:18 GMT
Server: CouchDB (Erlang/OTP)

"\-pbkdf2\-43ecbd256a70a3a2f7de40d2374b6c3002918834,921a12f74df0c1052b3e562a23cd227f,10000"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Further details are available in \fIsecurity\fP, including configuring the work
factor for \fBPBKDF2\fP, and the algorithm itself at
\fI\%PBKDF2 (RFC\-2898)\fP\&.
.sp
Changed in version 1.4: \fIPBKDF2\fP server\-side hashed salted password support added, now as a
synchronous call for the \fB_config/admins\fP API.

.UNINDENT
.SS Authentication Configuration
.INDENT 0.0
.TP
.B [chttpd]
.INDENT 7.0
.TP
.B require_valid_user
When this option is set to \fBtrue\fP, no requests are allowed from
anonymous users. Everyone must be authenticated.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[chttpd]
require_valid_user = false
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This setting only affects the clustered\-port (5984 by default).
To make the same change for the node\-local port (5986 by default),
set the \fB[couch_httpd_auth]\fP setting of the same name.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B [couch_httpd_auth]
.INDENT 7.0
.TP
.B allow_persistent_cookies
Makes cookies persistent if \fBtrue\fP\&.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_httpd_auth]
allow_persistent_cookies = false
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B auth_cache_size
Number of \fIuserctx_object\fP to cache in memory, to reduce disk
lookups.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_httpd_auth]
auth_cache_size = 50
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B authentication_redirect
Specifies the location for redirection on successful authentication if
a \fBtext/html\fP response is accepted by the client (via an \fBAccept\fP
header).
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_httpd_auth]
authentication_redirect = /_utils/session.html
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This setting affects both the clustered\-port (5984 by default)
and the node\-local port (5986 by default).
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B iterations
New in version 1.3.

.sp
The number of iterations for password hashing by the PBKDF2 algorithm.
A higher  number provides better hash durability, but comes at a cost
in performance for each request that requires authentication.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_httpd_auth]
iterations = 10000
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B min_iterations
New in version 1.6.

.sp
The minimum number of iterations allowed for passwords hashed by the
PBKDF2 algorithm. Any user with fewer iterations is forbidden.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_httpd_auth]
min_iterations = 100
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B max_iterations
New in version 1.6.

.sp
The maximum number of iterations allowed for passwords hashed by the
PBKDF2 algorithm. Any user with greater iterations is forbidden.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_httpd_auth]
max_iterations = 100000
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B proxy_use_secret
When this option is set to \fBtrue\fP, the
\fBcouch_httpd_auth/secret\fP option is required for
\fIapi/auth/proxy\fP\&.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_httpd_auth]
proxy_use_secret = false
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B public_fields
New in version 1.4.

.sp
A comma\-separated list of field names in user documents (in
\fBcouchdb/users_db_suffix\fP) that can be read by any
user. If unset or not specified, authenticated users can only retrieve
their own document.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_httpd_auth]
public_fields = first_name, last_name, contacts, url
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Using the \fBpublic_fields\fP whitelist for user document properties
requires setting the \fBcouch_httpd_auth/users_db_public\fP
option to \fBtrue\fP (the latter option has no other purpose):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_httpd_auth]
users_db_public = true
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B require_valid_user
When this option is set to \fBtrue\fP, no requests are allowed from
anonymous users. Everyone must be authenticated.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_httpd_auth]
require_valid_user = false
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
This setting only affects the node\-local port (5986 by default).
Most administrators want the \fB[chttpd]\fP setting of the same name
for clustered\-port (5984) behaviour.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B secret
The secret token is used for \fIapi/auth/proxy\fP and for \fIapi/auth/cookie\fP\&.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_httpd_auth]
secret = 92de07df7e7a3fe14808cef90a7cc0d91
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B timeout
Number of seconds since the last request before sessions will be
expired.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_httpd_auth]
timeout = 600
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B users_db_public
New in version 1.4.

.sp
Allow all users to view user documents. By default, only admins may
browse all users documents, while users may browse only their own
document.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_httpd_auth]
users_db_public = false
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This setting affects both the clustered\-port (5984 by default)
and the node\-local port (5986 by default).
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B x_auth_roles
The HTTP header name (\fBX\-Auth\-CouchDB\-Roles\fP by default) that
contains the list of a user\(aqs roles, separated by a comma. Used for
\fIapi/auth/proxy\fP\&.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_httpd_auth]
x_auth_roles = X\-Auth\-CouchDB\-Roles
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B x_auth_token
The HTTP header name (\fBX\-Auth\-CouchDB\-Token\fP by default) containing
the token used to authenticate the authorization. This token is an
\fIHMAC\-SHA1\fP created from the \fBcouch_httpd_auth/secret\fP and
\fBcouch_httpd_auth/x_auth_username\fP\&. The secret key should be
the same on the client and the CouchDB node. This token is optional if
the value of the \fBcouch_httpd_auth/proxy_use_secret\fP option is
not \fBtrue\fP\&. Used for \fIapi/auth/proxy\fP\&.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_httpd_auth]
x_auth_token = X\-Auth\-CouchDB\-Token
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B x_auth_username
The HTTP header name (\fBX\-Auth\-CouchDB\-UserName\fP by default)
containing the username. Used for \fIapi/auth/proxy\fP\&.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[couch_httpd_auth]
x_auth_username = X\-Auth\-CouchDB\-UserName
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Compaction Configuration
.SS Database Compaction Options
.INDENT 0.0
.TP
.B [database_compaction]
.INDENT 7.0
.TP
.B doc_buffer_size
Specifies the copy buffer\(aqs maximum size in bytes:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[database_compaction]
doc_buffer_size = 524288
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B checkpoint_after
Triggers a checkpoint after the specified amount of bytes were
successfully copied to the compacted database:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[database_compaction]
checkpoint_after = 5242880
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Compaction Daemon Rules
.INDENT 0.0
.TP
.B [compactions]
A list of rules to determine when to run automatic compaction. The
\fBdaemons/compaction_daemon\fP compacts databases and their respective
view groups when all the condition parameters are satisfied. Configuration
can be per\-database or global, and it has the following format:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[compactions]
database_name = [ {ParamName, ParamValue}, {ParamName, ParamValue}, ... ]
_default = [ {ParamName, ParamValue}, {ParamName, ParamValue}, ... ]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[compactions]
_default = [{db_fragmentation, "70%"}, {view_fragmentation, "60%"}, {from, "23:00"}, {to, "04:00"}]
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
\fBdb_fragmentation\fP: If the ratio of legacy data, including metadata, to
current data in the database file size is equal to or greater than this
value, this condition is satisfied. The percentage is expressed as an
integer percentage. This value is computed as:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
(file_size \- data_size) / file_size * 100
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The data_size and file_size values can be obtained when
querying \fBGET /{db}\fP\&.
.IP \(bu 2
\fBview_fragmentation\fP: If the ratio of legacy data, including metadata,
to current data in a view index file size is equal to or greater then
this value, this database compaction condition is satisfied. The
percentage is expressed as an integer percentage. This value is computed
as:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
(file_size \- data_size) / file_size * 100
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The data_size and file_size values can be obtained when querying a
\fIview group\(aqs information URI\fP\&.
.IP \(bu 2
\fBfrom\fP and \fBto\fP: The period for which a database (and its view group)
compaction is allowed. The value for these parameters must obey the
format:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
HH:MM \- HH:MM  (HH in [0..23], MM in [0..59])
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBstrict_window\fP: If a compaction is still running after the end of the
allowed period, it will be canceled if this parameter is set to \fItrue\fP\&.
It defaults to \fIfalse\fP and is meaningful only if the \fIperiod\fP parameter
is also specified.
.IP \(bu 2
\fBparallel_view_compaction\fP: If set to \fItrue\fP, the database and its
views are compacted in parallel. This is only useful on certain setups,
like for example when the database and view index directories point to
different disks. It defaults to \fIfalse\fP\&.
.UNINDENT
.sp
Before a compaction is triggered, an estimation of how much free disk space
is needed is computed. This estimation corresponds to two times the data
size of the database or view index. When there\(aqs not enough free disk space
to compact a particular database or view index, a warning message is
logged.
.sp
Examples:
.INDENT 7.0
.IP 1. 3
.INDENT 3.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[{db_fragmentation, "70%"}, {view_fragmentation, "60%"}]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The \fIfoo\fP database is compacted if its fragmentation is 70% or more. Any
view index of this database is compacted only if its fragmentation is
60% or more.
.IP 2. 3
.INDENT 3.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[{db_fragmentation, "70%"}, {view_fragmentation, "60%"}, {from, "00:00"}, {to, "04:00"}]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Similar to the preceding example but a compaction (database or view
index) is only triggered if the current time is between midnight and 4
AM.
.IP 3. 3
.INDENT 3.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[{db_fragmentation, "70%"}, {view_fragmentation, "60%"}, {from, "00:00"}, {to, "04:00"}, {strict_window, true}]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Similar to the preceding example \- a compaction (database or view index)
is only triggered if the current time is between midnight and 4 AM. If
at 4 AM the database or one of its views is still compacting, the
compaction process will be canceled.
.IP 4. 3
.INDENT 3.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[{db_fragmentation, "70%"}, {view_fragmentation, "60%"}, {from, "00:00"}, {to, "04:00"}, {strict_window, true}, {parallel_view_compaction, true}]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Similar to the preceding example, but a database and its views can be
compacted in parallel.
.UNINDENT
.UNINDENT
.SS Configuration of Compaction Daemon
.INDENT 0.0
.TP
.B [compaction_daemon]
.INDENT 7.0
.TP
.B check_interval
The delay, in seconds, between each check for which database and view
indexes need to be compacted:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[compaction_daemon]
check_interval = 300
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B min_file_size
If a database or view index file is smaller than this value (in bytes),
compaction will not happen. Very small files always have high
fragmentation, so compacting them is inefficient.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[compaction_daemon]
min_file_size = 131072
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Views Compaction Options
.INDENT 0.0
.TP
.B [view_compaction]
.INDENT 7.0
.TP
.B keyvalue_buffer_size
Specifies maximum copy buffer size in bytes used during compaction:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[view_compaction]
keyvalue_buffer_size = 2097152
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Logging
.SS Logging options
.INDENT 0.0
.TP
.B [log]
CouchDB logging configuration.
.INDENT 7.0
.TP
.B writer
Current writers include:
.INDENT 7.0
.IP \(bu 2
\fBstderr\fP: Logs are sent to stderr.
.IP \(bu 2
\fBfile\fP: Logs are sent to the file set in
\fBlog file\fP\&.
.IP \(bu 2
\fBsyslog\fP: Logs are sent to the syslog daemon.
.UNINDENT
.sp
You can also specify a full module name here if implement your own
writer:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[log]
writer = stderr
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B file
Specifies the location of file for logging output. Only used by the
\fBfile\fP \fBwriter\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[log]
file = /var/log/couchdb/couch.log
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This path should be readable and writable for user that runs CouchDB
service (\fIcouchdb\fP by default).
.UNINDENT
.INDENT 7.0
.TP
.B write_buffer
Specifies the size of the file log write buffer in bytes, to enable
delayed log writes. Only used by the \fBfile\fP
\fBwriter\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[log]
write_buffer = 0
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_delay
Specifies the wait in milliseconds before committing logs to disk, to
enable delayed log writes. Only used by the \fBfile\fP
\fBwriter\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[log]
write_delay = 0
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B level
Changed in version 1.3: Added \fBwarning\fP level.

.sp
Logging level defines how verbose and detailed logging will be:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[log]
level = info
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Available levels:
.INDENT 7.0
.IP \(bu 2
\fBdebug\fP: Detailed debug logging.
.IP \(bu 2
\fBinfo\fP: Informative logging. Includes HTTP requests headlines,
startup of an external processes etc.
.IP \(bu 2
\fBnotice\fP
.IP \(bu 2
\fBwarning\fP or \fBwarn\fP: Warning messages are alerts about edge situations that
may lead to errors. For instance, compaction daemon alerts about low
or insufficient disk space at this level.
.IP \(bu 2
\fBerror\fP or \fBerr\fP: Error level includes only things that go wrong, like crash
reports and HTTP error responses (5xx codes).
.IP \(bu 2
\fBcritical\fP or \fBcrit\fP
.IP \(bu 2
\fBalert\fP
.IP \(bu 2
\fBemergency\fP or \fBemerg\fP
.IP \(bu 2
\fBnone\fP: Disables logging any messages.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B include_sasl
Includes \fI\%SASL\fP information in logs:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[log]
include_sasl = true
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B syslog_host
Specifies the syslog host to send logs to. Only used by the
\fBsyslog\fP \fBwriter\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[log]
syslog_host = localhost
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B syslog_port
Specifies the syslog port to connect to when sending logs. Only used by
the \fBsyslog\fP \fBwriter\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[log]
syslog_port = 514
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B syslog_appid
Specifies application name to the \fBsyslog\fP
\fBwriter\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[log]
syslog_appid = couchdb
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B syslog_facility
Specifies the syslog facility to use with the \fBsyslog\fP
\fBwriter\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[log]
syslog_facility = local2
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Replicator
.SS Replicator Database Configuration
.INDENT 0.0
.TP
.B [replicator]
.INDENT 7.0
.TP
.B max_jobs
New in version 2.1.

.sp
Number of actively running replications. Making this too high could
cause performance issues. Making it too low could mean replications
jobs might not have enough time to make progress before getting
unscheduled again. This parameter can be adjusted at runtime and will
take effect during next rescheduling cycle:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
max_jobs = 500
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B interval
New in version 2.1.

.sp
Scheduling interval in milliseconds. During each reschedule cycle
scheduler might start or stop up to "max_churn" number of jobs:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
interval = 60000
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B max_churn
New in version 2.1.

.sp
Maximum number of replications to start and stop during rescheduling.
This parameter along with \fBinterval\fP defines the rate of job
replacement. During startup, however a much larger number of jobs could
be started (up to \fBmax_jobs\fP) in a short period of time:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
max_churn = 20
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B update_docs
New in version 2.1.

.sp
When set to \fBtrue\fP replicator will update replication document with
error and triggered states. This approximates pre\-2.1 replicator
behavior:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
update_docs = false
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B worker_batch_size
With lower batch sizes checkpoints are done more frequently. Lower
batch sizes also reduce the total amount of used RAM memory:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
worker_batch_size = 500
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B worker_processes
More worker processes can give higher network throughput but can also
imply more disk and network IO:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
worker_processes = 4
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B http_connections
Maximum number of HTTP connections per replication:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
http_connections = 20
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B connection_timeout
HTTP connection timeout per replication.
Even for very fast/reliable networks it might need to be increased if
a remote database is too busy:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
connection_timeout = 30000
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B retries_per_request
Changed in version 2.1.1.

.sp
If a request fails, the replicator will retry it up to N times. The
default value for N is 5 (before version 2.1.1 it was 10). The requests
are retried with a doubling exponential backoff starting at 0.25
seconds. So by default requests would be retried in 0.25, 0.5, 1, 2, 4
second intervals. When number of retires is exhausted, the whole
replication job is stopped and will retry again later:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
retries_per_request = 5
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B socket_options
Some socket options that might boost performance in some scenarios:
.INDENT 7.0
.IP \(bu 2
\fB{nodelay, boolean()}\fP
.IP \(bu 2
\fB{sndbuf, integer()}\fP
.IP \(bu 2
\fB{recbuf, integer()}\fP
.IP \(bu 2
\fB{priority, integer()}\fP
.UNINDENT
.sp
See the \fI\%inet\fP Erlang module\(aqs man page for the full list of options:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
socket_options = [{keepalive, true}, {nodelay, false}]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B checkpoint_interval
New in version 1.6.

.sp
Defines replication checkpoint interval in milliseconds.
\fIReplicator\fP will \fBrequests\fP from the
Source database at the specified interval:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
checkpoint_interval = 5000
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Lower intervals may be useful for frequently changing data, while
higher values will lower bandwidth and make fewer requests for
infrequently updated databases.
.UNINDENT
.INDENT 7.0
.TP
.B use_checkpoints
New in version 1.6.

.sp
If \fBuse_checkpoints\fP is set to \fBtrue\fP, CouchDB will make
checkpoints during replication and at the completion of replication.
CouchDB can efficiently resume replication from any of these
checkpoints:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
use_checkpoints = true
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Checkpoints are stored in \fIlocal documents\fP
on both the source and target databases (which requires write
access).
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
Disabling checkpoints is \fBnot recommended\fP as CouchDB will scan
the Source database\(aqs changes feed from the beginning.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B cert_file
Path to a file containing the user\(aqs certificate:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
cert_file = /full/path/to/server_cert.pem
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B key_file
Path to file containing user\(aqs private PEM encoded key:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
key_file = /full/path/to/server_key.pem
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B password
String containing the user\(aqs password. Only used if the private key file
is password protected:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
password = somepassword
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B verify_ssl_certificates
Set to true to validate peer certificates:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
verify_ssl_certificates = false
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ssl_trusted_certificates_file
File containing a list of peer trusted certificates (in the PEM
format):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
ssl_trusted_certificates_file = /etc/ssl/certs/ca\-certificates.crt
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ssl_certificate_max_depth
Maximum peer certificate depth (must be set even if certificate
validation is off):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
ssl_certificate_max_depth = 3
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B auth_plugins
New in version 2.2.

.sp
List of replicator client authentication plugins. Plugins will
be tried in order and the first to initialize successfully will
be used. By default there are two plugins available:
\fIcouch_replicator_auth_session\fP implementing session (cookie)
authentication, and \fIcouch_replicator_auth_noop\fP implementing basic
authentication. For backwards compatibility, the no\-op plugin should be used at
the end of the plugin list:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
auth_plugins = couch_replicator_auth_session,couch_replicator_auth_noop
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
In version 2.2, the session plugin is considered experimental and is not enabled by default.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Query Servers
.SS Query Servers Definition
.INDENT 0.0
.TP
.B [query_servers]
Changed in version 1.2:: Added CoffeeScript query server

.sp
CouchDB delegates computation of \fIdesign documents\fP functions
to external query servers. The external query server is a special OS
process which communicates with CouchDB over standard input/output using a
very simple line\-based protocol with JSON messages.
.sp
The external query server may be defined in configuration file following
next pattern:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[query_servers]
LANGUAGE = PATH ARGS
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Where:
.INDENT 7.0
.IP \(bu 2
\fBLANGUAGE\fP: is a programming language which code this query server may
execute. For instance, there are \fIpython\fP, \fIruby\fP, \fIclojure\fP and other
query servers in wild. This value is also used for \fIddoc\fP field
\fBlanguage\fP to determine which query server processes the functions.
.sp
Note, that you may set up multiple query servers for the same programming
language, but you have to name them different (like \fIpython\-dev\fP etc.).
.IP \(bu 2
\fBPATH\fP: is a system path to the executable binary program that runs the
query server.
.IP \(bu 2
\fBARGS\fP: optionally, you may specify additional command line arguments
for the executable \fBPATH\fP\&.
.UNINDENT
.sp
The default query server is written in \fIJavaScript\fP,
running via \fI\%Mozilla SpiderMonkey\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[query_servers]
javascript = /usr/bin/couchjs /usr/share/couchdb/server/main.js
coffeescript = /usr/bin/couchjs /usr/share/couchdb/server/main\-coffee.js
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fINative Erlang Query Server\fP that
allows to process Erlang \fIddocs\fP and runs within CouchDB bypassing
stdio communication and JSON serialization/deserialization round trip
overhead.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Query Servers Configuration
.INDENT 0.0
.TP
.B [query_server_config]
.INDENT 7.0
.TP
.B commit_freq
Specifies the delay in seconds before view index changes are committed
to disk. The default value is \fB5\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[query_server_config]
commit_freq = 5
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B os_process_limit
.TP
.B limit
Hard limit on the number of OS processes usable by Query
Servers. The default value is \fB100\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[query_server_config]
os_process_limit = 100
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Setting \fIos_process_limit\fP too low can result in starvation of
Query Servers, and manifest in \fIos_process_timeout\fP errors,
while setting it too high can potentially use too many system
resources. Production settings are typically 10\-20 times the
default value.
.UNINDENT
.INDENT 7.0
.TP
.B os_process_soft_limit
.TP
.B soft limit
Soft limit on the number of OS processes usable by Query
Servers. The default value is \fB100\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[query_server_config]
os_process_soft_limit = 100
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Idle OS processes are closed until the total reaches the soft
limit.
.sp
For example, if the hard limit is 200 and the soft limit is
100, the total number of OS processes will never exceed 200,
and CouchDB will close all idle OS processes until it reaches
100, at which point it will leave the rest intact, even if
some are idle.
.UNINDENT
.INDENT 7.0
.TP
.B reduce_limit
Controls \fIReduce overflow\fP error that raises when output of
\fIreduce functions\fP is too big:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[query_server_config]
reduce_limit = true
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Normally, you don\(aqt have to disable (by setting \fBfalse\fP value) this
option since main propose of \fIreduce\fP functions is to \fIreduce\fP the
input.
.UNINDENT
.UNINDENT
.SS Native Erlang Query Server
.INDENT 0.0
.TP
.B [native_query_servers]
.
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
Due to security restrictions, the Erlang query server is disabled by
default.
.sp
Unlike the JavaScript query server, the Erlang one does not runs in a
sandbox mode. This means that Erlang code has full access to your OS,
file system and network, which may lead to security issues. While Erlang
functions are faster than JavaScript ones, you need to be careful
about running them, especially if they were written by someone else.
.UNINDENT
.UNINDENT
.sp
CouchDB has a native Erlang query server, allowing you to write your
map/reduce functions in Erlang.
.sp
First, you\(aqll need to edit your \fIlocal.ini\fP to include a
\fB[native_query_servers]\fP section:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[native_query_servers]
erlang = {couch_native_process, start_link, []}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To see these changes you will also need to restart the server.
.sp
Let\(aqs try an example of map/reduce functions which count the total
documents at each number of revisions (there are x many documents at
version "1", and y documents at "2"... etc). Add a few documents to the
database, then enter the following functions as a view:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
%% Map Function
fun({Doc}) \->
    <<K,_/binary>> = proplists:get_value(<<"_rev">>, Doc, null),
    V = proplists:get_value(<<"_id">>, Doc, null),
    Emit(<<K>>, V)
end.

%% Reduce Function
fun(Keys, Values, ReReduce) \-> length(Values) end.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If all has gone well, after running the view you should see a list of the
total number of documents at each revision number.
.UNINDENT
.SS HTTP Resource Handlers
.SS Global HTTP Handlers
.INDENT 0.0
.TP
.B [httpd_global_handlers]
These HTTP resources are provided for CouchDB server root level.
.INDENT 7.0
.TP
.B /
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_global_handlers]
/ = {couch_httpd_misc_handlers, handle_welcome_req, <<"Welcome">>}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B favicon.ico
The favicon handler looks for \fIfavicon.ico\fP file within specified
directory:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_global_handlers]
favicon.ico = {couch_httpd_misc_handlers, handle_favicon_req, "/usr/share/couchdb/www"}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _active_tasks
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_global_handlers]
_active_tasks = {couch_httpd_misc_handlers, handle_task_status_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _all_dbs
Provides a list of all server\(aqs databases:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_global_handlers]
_all_dbs = {couch_httpd_misc_handlers, handle_all_dbs_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Sometimes you don\(aqt want to disclose database names for everyone,
but you also don\(aqt like/want/able to set up any proxies in front of
CouchDB. Removing this handler disables \fB_all_dbs\fP resource and
there will be no way to get list of available databases.
.sp
The same also is true for other resource handlers.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _config
Provides resource to work with CouchDB config
\fIremotely\fP\&. Any config changes that was made via HTTP
API are applied automatically on fly and doesn\(aqt requires server
instance to be restarted:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_global_handlers]
_config = {couch_httpd_misc_handlers, handle_config_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _replicate
Provides an API to run
\fItemporary replications\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_global_handlers]
_replicate = {couch_replicator_httpd, handle_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _restart
Provides an API to restart CouchDB (only on the node\-local port).
.INDENT 7.0
.INDENT 3.5
[httpd_global_handlers]
_restart = {couch_httpd_misc_handlers, handle_restart_req}
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _session
Provides a resource with information about the current user\(aqs session:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_global_handlers]
_session = {couch_httpd_auth, handle_session_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _stats
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_global_handlers]
_stats = {couch_httpd_stats_handlers, handle_stats_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _utils
The \fI_utils\fP handler serves \fIFauxton\fP\(aqs web
administration page:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_global_handlers]
_utils = {couch_httpd_misc_handlers, handle_utils_dir_req, "/usr/share/couchdb/www"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In similar way, you may set up custom handler to let CouchDB serve any
static files.
.UNINDENT
.INDENT 7.0
.TP
.B _uuids
Provides a resource to get UUIDs generated by CouchDB:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_global_handlers]
_uuids = {couch_httpd_misc_handlers, handle_uuids_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This is useful when your client environment isn\(aqt capable of providing
truly random IDs (web browsers e.g.).
.UNINDENT
.UNINDENT
.SS Database HTTP Handlers
.INDENT 0.0
.TP
.B [httpd_db_handlers]
These HTTP resources are available on every CouchDB database.
.INDENT 7.0
.TP
.B _all_docs
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_db_handlers]
_all_docs = {couch_mrview_http, handle_all_docs_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _local_docs
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_db_handlers]
_local_docs = {couch_mrview_http, handle_local_docs_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _design_docs
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_db_handlers]
_design_docs = {couch_mrview_http, handle_design_docs_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _changes
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_db_handlers]
_changes = {couch_httpd_db, handle_changes_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _compact
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_db_handlers]
_compact = {couch_httpd_db, handle_compact_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _design
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_db_handlers]
_design = {couch_httpd_db, handle_design_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _view_cleanup
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_db_handlers]
_view_cleanup = {couch_mrview_http, handle_cleanup_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Design Documents HTTP Handlers
.INDENT 0.0
.TP
.B [httpd_design_handlers]
.UNINDENT
.sp
These HTTP resources are provided for design documents.
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B _compact
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_design_handlers]
_compact = {couch_mrview_http, handle_compact_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B _info
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_design_handlers]
_info = {couch_mrview_http, handle_info_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B _list
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_design_handlers]
_list = {couch_mrview_show, handle_view_list_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B _rewrite
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_design_handlers]
_rewrite = {couch_httpd_rewrite, handle_rewrite_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B _show
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_design_handlers]
_show = {couch_mrview_show, handle_doc_show_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B _update
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_design_handlers]
_update = {couch_mrview_show, handle_doc_update_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B _view
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_design_handlers]
_view = {couch_mrview_http, handle_view_req}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS CouchDB Internal Services
.SS CouchDB Daemonized Mini Apps
.INDENT 0.0
.TP
.B [daemons]
.INDENT 7.0
.TP
.B auth_cache
This daemon provides authentication caching to avoid repeated opening
and closing of the \fI_users\fP database for each request requiring
authentication:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[daemons]
auth_cache={couch_auth_cache, start_link, []}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B compaction_daemon
\fIAutomatic compaction\fP daemon:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[daemons]
compaction_daemon={couch_compaction_daemon, start_link, []}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B external_manager
\fIExternal\fP processes manager:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[daemons]
external_manager={couch_external_manager, start_link, []}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B httpd
Node\-local HTTP server daemon (default port: \fI5986\fP):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[daemons]
httpd={couch_httpd, start_link, []}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B httpsd
Provides \fISSL support\fP\&. The default SSL port CouchDB
listens on is \fI6984\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[daemons]
httpsd = {chttpd, start_link, [https]}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B index_server
The \fIcouch_index\fP application is responsible for managing all of the
different types of indexers. This manages the process handling for
keeping track of the index state as well as managing the updater and
compactor handling:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[daemons]
index_server={couch_index_server, start_link, []}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B query_servers
\fIQuery servers\fP manager:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[daemons]
query_servers={couch_query_servers, start_link, []}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B replicator_manager
Replications manager:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[daemons]
replicator_manager={couch_replicator_manager, start_link, []}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B stats_aggregator
Runtime statistics aggregator:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[daemons]
stats_aggregator={couch_stats_aggregator, start, []}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B stats_collector
Runtime statistics collector:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[daemons]
stats_collector={couch_stats_collector, start, []}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B uuids
\fIUUIDs\fP generator daemon:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[daemons]
uuids={couch_uuids, start, []}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B vhosts
\fIVirtual hosts\fP manager. Provides dynamic add of
vhosts without restart, wildcards support and dynamic routing via
pattern matching
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[daemons]
vhosts={couch_httpd_vhost, start_link, []}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Miscellaneous Parameters
.SS Configuration of Attachment Storage
.INDENT 0.0
.TP
.B [attachments]
.INDENT 7.0
.TP
.B compression_level
Defines zlib compression level for the attachments from \fB1\fP (lowest,
fastest) to \fB9\fP (highest, slowest). A value of \fB0\fP disables
compression:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[attachments]
compression_level = 8
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B compressible_types
Since compression is ineffective for some types of files, it is
possible to let CouchDB compress only some types of attachments,
specified by their MIME type:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[attachments]
compressible_types = text/*, application/javascript, application/json, application/xml
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Statistic Calculation
.INDENT 0.0
.TP
.B [stats]
.INDENT 7.0
.TP
.B rate
Rate of statistics gathering in milliseconds:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[stats]
rate = 1000
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B samples
Samples are used to track the mean and standard value deviation within
specified intervals (in seconds):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[stats]
samples = [0, 60, 300, 900]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS UUIDs Configuration
.INDENT 0.0
.TP
.B [uuids]
.INDENT 7.0
.TP
.B algorithm
Changed in version 1.3: Added \fButc_id\fP algorithm.

.sp
CouchDB provides various algorithms to generate the UUID values that
are  used for document \fI_id\fP\(aqs by default:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[uuids]
algorithm = sequential
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Available algorithms:
.INDENT 7.0
.IP \(bu 2
\fBrandom\fP: 128 bits of random awesome. All awesome, all the time:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "uuids": [
        "5fcbbf2cb171b1d5c3bc6df3d4affb32",
        "9115e0942372a87a977f1caf30b2ac29",
        "3840b51b0b81b46cab99384d5cd106e3",
        "b848dbdeb422164babf2705ac18173e1",
        "b7a8566af7e0fc02404bb676b47c3bf7",
        "a006879afdcae324d70e925c420c860d",
        "5f7716ee487cc4083545d4ca02cd45d4",
        "35fdd1c8346c22ccc43cc45cd632e6d6",
        "97bbdb4a1c7166682dc026e1ac97a64c",
        "eb242b506a6ae330bda6969bb2677079"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBsequential\fP: Monotonically increasing ids with random increments.
The first 26 hex characters are random, the last 6 increment in
random amounts until an overflow occurs. On overflow, the random
prefix is regenerated and the process starts over.
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "uuids": [
        "4e17c12963f4bee0e6ec90da54804894",
        "4e17c12963f4bee0e6ec90da5480512f",
        "4e17c12963f4bee0e6ec90da54805c25",
        "4e17c12963f4bee0e6ec90da54806ba1",
        "4e17c12963f4bee0e6ec90da548072b3",
        "4e17c12963f4bee0e6ec90da54807609",
        "4e17c12963f4bee0e6ec90da54807718",
        "4e17c12963f4bee0e6ec90da54807754",
        "4e17c12963f4bee0e6ec90da54807e5d",
        "4e17c12963f4bee0e6ec90da54808d28"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
\fButc_random\fP: The time since Jan 1, 1970 UTC, in microseconds. The
first 14 characters are the time in hex. The last 18 are random.
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "uuids": [
        "04dd32b3af699659b6db9486a9c58c62",
        "04dd32b3af69bb1c2ac7ebfee0a50d88",
        "04dd32b3af69d8591b99a8e86a76e0fb",
        "04dd32b3af69f4a18a76efd89867f4f4",
        "04dd32b3af6a1f7925001274bbfde952",
        "04dd32b3af6a3fe8ea9b120ed906a57f",
        "04dd32b3af6a5b5c518809d3d4b76654",
        "04dd32b3af6a78f6ab32f1e928593c73",
        "04dd32b3af6a99916c665d6bbf857475",
        "04dd32b3af6ab558dd3f2c0afacb7d66"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
\fButc_id\fP: The time since Jan 1, 1970 UTC, in microseconds, plus the
\fButc_id_suffix\fP string. The first 14 characters are the time in
hex. The \fBuuids/utc_id_suffix\fP string value is appended to
these.
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "uuids": [
        "04dd32bd5eabcc@mycouch",
        "04dd32bd5eabee@mycouch",
        "04dd32bd5eac05@mycouch",
        "04dd32bd5eac28@mycouch",
        "04dd32bd5eac43@mycouch",
        "04dd32bd5eac58@mycouch",
        "04dd32bd5eac6e@mycouch",
        "04dd32bd5eac84@mycouch",
        "04dd32bd5eac98@mycouch",
        "04dd32bd5eacad@mycouch"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
\fBImpact of UUID choices:\fP the choice of UUID has a significant
impact on the layout of the B\-tree, prior to compaction.
.sp
For example, using a sequential UUID algorithm while uploading a
large batch of documents will avoid the need to rewrite many
intermediate B\-tree nodes. A random UUID algorithm may require
rewriting intermediate nodes on a regular basis, resulting in
significantly decreased throughput and wasted disk space space due to
the append\-only B\-tree design.
.sp
It is generally recommended to set your own UUIDs, or use the
sequential algorithm unless you have a specific need and take into
account the likely need for compaction to re\-balance the B\-tree and
reclaim wasted space.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B utc_id_suffix
New in version 1.3.

.sp
The \fButc_id_suffix\fP value will be appended to UUIDs generated by the
\fButc_id\fP algorithm. Replicating instances should have unique
\fButc_id_suffix\fP values to ensure uniqueness of \fButc_id\fP ids.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[uuid]
utc_id_suffix = my\-awesome\-suffix
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B max_count
New in version 1.5.1.

.sp
No more than this number of UUIDs will be sent in a single request. If
more UUIDs are requested, an HTTP error response will be thrown.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[uuid]
max_count = 1000
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Vendor information
.INDENT 0.0
.TP
.B [vendor]
New in version 1.3.

.sp
CouchDB distributors have the option of customizing CouchDB\(aqs welcome
message. This is returned when requesting \fBGET /\fP\&.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[vendor]
name = The Apache Software Foundation
version = 1.5.0
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Content\-Security\-Policy
.INDENT 0.0
.TP
.B [csp]
Experimental support of CSP Headers for \fB/_utils\fP (Fauxton).
.INDENT 7.0
.TP
.B enable
Enable the sending of the Header \fBContent\-Security\-Policy\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[csp]
enable = true
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B header_value
You can change the default value for the Header which is sent:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[csp]
header_value = default\-src \(aqself\(aq; img\-src *; font\-src *;
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Replication
.sp
The replication is an incremental one way process involving two databases
(a source and a destination).
.sp
The aim of the replication is that at the end of the process, all active
documents on the source database are also in the destination database and all
documents that were deleted in the source databases are also deleted (if exists)
on the destination database.
.sp
The replication process only copies the last revision of a document, so all
previous revisions that were only on the source database are not copied to the
destination database.
.SS Introduction to Replication
.sp
One of CouchDB\(aqs strengths is the ability to synchronize two copies of the same
database. This enables users to distribute data across several nodes or
data centers, but also to move data more closely to clients.
.sp
Replication involves a source and a destination database, which can be on the
same or on different CouchDB instances. The aim of the replication is that at
the end of the process, all active documents on the source database are also in
the destination database and all documents that were deleted in the source
databases are also deleted on the destination database (if they even existed).
.SS Triggering Replication
.sp
Replication is controlled through documents in the
\fI_replicator\fP database, where each document describes one
replication process (see \fIreplication\-settings\fP).
.sp
A replication is triggered by storing a replication document in the replicator
database. Its status can be inspected through the active tasks API (see
\fIapi/server/active_tasks\fP and \fIreplication\-status\fP). A replication can
be stopped by deleting the document, or by updating it with its \fIcancel\fP
property set to \fItrue\fP\&.
.SS Replication Procedure
.sp
During replication, CouchDB will compare the source and the destination
database to determine which documents differ between the source and the
destination database. It does so by following the \fIchanges\fP on the source
and comparing the documents to the destination. Changes are submitted to the
destination in batches where they can introduce conflicts. Documents that
already exist on the destination in the same revision are not transferred. As
the deletion of documents is represented by a new revision, a document deleted
on the source will also be deleted on the target.
.sp
A replication task will finish once it reaches the end of the changes feed. If
its \fIcontinuous\fP property is set to true, it will wait for new changes to
appear until the task is canceled. Replication tasks also create checkpoint
documents on the destination to ensure that a restarted task can continue from
where it stopped, for example after it has crashed.
.sp
When a replication task is initiated on the sending node, it is called \fIpush\fP
replication, if it is initiated by the receiving node, it is called \fIpull\fP
replication.
.SS Master \- Master replication
.sp
One replication task will only transfer changes in one direction. To achieve
master\-master replication, it is possible to set up two replication tasks in
opposite direction. When a change is replicated from database A to B by the
first task, the second task from B to A will discover that the new change on
B already exists in A and will wait for further changes.
.SS Controlling which Documents to Replicate
.sp
There are three options for controlling which documents are replicated,
and which are skipped:
.INDENT 0.0
.IP 1. 3
Defining documents as being local.
.IP 2. 3
Using \fIselectorobj\fP\&.
.IP 3. 3
Using \fIfilterfun\fP\&.
.UNINDENT
.sp
Local documents are never replicated (see \fIapi/local\fP).
.sp
\fIselectorobj\fP can be included in a replication document (see
\fIreplication\-settings\fP). A selector object contains a query expression
that is used to test whether a document should be replicated.
.sp
\fIfilterfun\fP can be used in a replication (see
\fIreplication\-settings\fP). The replication task evaluates
the filter function for each document in the changes feed. The document is
only replicated if the filter returns \fItrue\fP\&.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Using a selector provides performance benefits when compared with using a
\fIfilterfun\fP\&. You should use \fIselectorobj\fP where possible.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
When using replication filters that depend on the document\(aqs content,
deleted documents may pose a problem, since the document passed to the
filter will not contain any of the document\(aqs content. This can be
resolved by adding a \fB_deleted:true\fP field to the document instead
of using the DELETE HTTP method, paired with the use of a
\fIvalidate document update\fP handler to ensure the fields
required for replication filters are always present. Take note, though,
that the deleted document will still contain all of its data (including
attachments)!
.UNINDENT
.UNINDENT
.SS Migrating Data to Clients
.sp
Replication can be especially useful for bringing data closer to clients.
\fI\%PouchDB\fP implements the replication algorithm of CouchDB
in JavaScript, making it possible to make data from a CouchDB database
available in an offline browser application, and synchronize changes back to
CouchDB.
.SS CouchDB Replication Protocol
.INDENT 0.0
.TP
.B Version
3
.UNINDENT
.sp
The \fICouchDB Replication Protocol\fP is a protocol for synchronising JSON
documents between 2 peers over HTTP/1.1 by using the public \fICouchDB REST
API\fP and is based on the Apache CouchDB \fI\%MVCC\fP Data model.
.SS Preface
.SS Language
.sp
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in \fI\%RFC 2119\fP\&.
.SS Goals
.sp
The primary goal of this specification is to describe the \fICouchDB Replication
Protocol\fP under the hood.
.sp
The secondary goal is to provide enough detailed information about the protocol
to make it easy to build tools on any language and platform that can synchronize
data with CouchDB.
.SS Definitions
.INDENT 0.0
.TP
.B JSON:
JSON is a text format for the
serialization of structured data. It is described in \fI\%ECMA\-262\fP and
\fI\%RFC 4627\fP\&.
.TP
.B URI:
A URI is defined by \fI\%RFC 3986\fP\&. It can be a URL as defined
in \fI\%RFC 1738\fP\&.
.TP
.B ID:
An identifier (could be a UUID) as described in \fI\%RFC 4122\fP\&.
.TP
.B Revision:
A \fI\%MVCC\fP token value of following pattern: \fBN\-sig\fP where \fBN\fP is ALWAYS
a positive integer and \fBsig\fP is the Document signature (custom).
Don\(aqt mix it up with the revision in version control systems!
.TP
.B Leaf Revision:
The last Document Revision in a series of changes. Documents may have
multiple Leaf Revisions (aka Conflict Revisions) due to concurrent updates.
.TP
.B Document:
A document is a JSON object with an ID and Revision defined in \fB_id\fP and
\fB_rev\fP fields respectively. A Document\(aqs ID MUST be unique within
the Database where it is stored.
.TP
.B Database:
A collection of Documents with a unique URI.
.TP
.B Changes Feed:
A stream of Document\-changing events (create, update, delete) for
the specified Database.
.TP
.B Sequence ID:
An ID provided by the Changes Feed. It MUST be incremental,
but MAY NOT always be an integer.
.TP
.B Source:
Database from where the Documents are replicated.
.TP
.B Target:
Database where the Documents are replicated to.
.TP
.B Replication:
The one\-way directed synchronization process of Source and Target endpoints.
.TP
.B Checkpoint:
Intermediate Recorded Sequence ID used for Replication recovery.
.TP
.B Replicator:
A service or an application which initiates and runs Replication.
.TP
.B Filter Function:
A special function of any programming language that is used to filter
Documents during Replication (see \fIfilterfun\fP)
.TP
.B Filter Function Name:
An ID of a Filter Function that may be used as a symbolic reference (aka
callback function) to apply the related Filter Function to Replication.
.TP
.B Filtered Replication:
Replication of Documents from Source to Target using a Filter Function.
.TP
.B Full Replication:
Replication of all Documents from Source to Target.
.TP
.B Push Replication:
Replication process where Source is a local endpoint and Target is remote.
.TP
.B Pull Replication:
Replication process where Source is a remote endpoint and Target is local.
.TP
.B Continuous Replication:
Replication that "never stops": after processing all events from the
Changes Feed, the Replicator doesn\(aqt close the connection, but awaits new
change events from the Source. The connection is kept alive by periodic
heartbeats.
.TP
.B Replication Log:
A special Document that holds Replication history (recorded Checkpoints
and a few more statistics) between Source and Target.
.TP
.B Replication ID:
A unique value that unambiguously identifies the Replication Log.
.UNINDENT
.SS Replication Protocol Algorithm
.sp
The \fICouchDB Replication Protocol\fP is not \fImagical\fP, but
an agreement on usage of the public \fICouchDB HTTP REST API\fP to
enable Documents to be replicated from Source to Target.
.sp
The reference implementation, written in \fI\%Erlang\fP, is provided by the
\fI\%couch_replicator\fP module in Apache CouchDB.
.sp
It is RECOMMENDED that one follow this algorithm specification, use the same
HTTP endpoints, and run requests with the same parameters to provide a
completely compatible implementation. Custom Replicator implementations MAY use
different HTTP API endpoints and request parameters depending on their local
specifics and they MAY implement only part of the Replication Protocol to run
only Push or Pull Replication. However, while such solutions could also run the
Replication process, they loose compatibility with the CouchDB Replicator.
.SS Verify Peers
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
\(aq Verify Peers:                                                             \(aq
\(aq                                                                           \(aq
\(aq                404 Not Found   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+         \(aq
\(aq       +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- |     Check Source Existence     |         \(aq
\(aq       |                        +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+         \(aq
\(aq       |                        |          HEAD /source          |         \(aq
\(aq       |                        +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+         \(aq
\(aq       |                          |                                        \(aq
\(aq       |                          | 200 OK                                 \(aq
\(aq       |                          v                                        \(aq
\(aq       |                        +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+         \(aq
\(aq       |                        |     Check Target Existence     | \-\-\-\-+   \(aq
\(aq       |                        +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+     |   \(aq
\(aq       |                        |         HEAD /target           |     |   \(aq
\(aq       |                        +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+     |   \(aq
\(aq       |                          |                                    |   \(aq
\(aq       |                          | 404 Not Found                      |   \(aq
\(aq       v                          v                                    |   \(aq
\(aq   +\-\-\-\-\-\-\-+    No              +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+     |   \(aq
\(aq   | Abort | <\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- |         Create Target?         |     |   \(aq
\(aq   +\-\-\-\-\-\-\-+                    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+     |   \(aq
\(aq       ^                          |                                    |   \(aq
\(aq       |                          | Yes                                |   \(aq
\(aq       |                          v                                    |   \(aq
\(aq       |        Failure         +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+     |   \(aq
\(aq       +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- |          Create Target         |     |   \(aq
\(aq                                +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+     |   \(aq
\(aq                                |           PUT /target          |     |   \(aq
\(aq                                +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+     |   \(aq
\(aq                                  |                                    |   \(aq
\(aq                                  | 201 Created                 200 OK |   \(aq
\(aq                                  |                                    |   \(aq
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \-  | \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \-  | \- +
                                   |                                    |
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \-  | \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \-  | \- +
\(aq Get Peers Information:           |                                    |   \(aq
\(aq                                  +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+   \(aq
\(aq                                  |                                        \(aq
\(aq                                  v                                        \(aq
\(aq                                +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+         \(aq
\(aq                                |     Get Source Information     |         \(aq
\(aq                                +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+         \(aq
\(aq                                                                           \(aq
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The Replicator MUST ensure that both Source and Target exist
by using \fBHEAD /{db}\fP requests.
.SS Check Source Existence
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HEAD /source HTTP/1.1
Host: localhost:5984
User\-Agent: CouchDB
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Sat, 05 Oct 2013 08:50:39 GMT
Server: CouchDB (Erlang/OTP)
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Check Target Existence
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HEAD /target HTTP/1.1
Host: localhost:5984
User\-Agent: CouchDB
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Sat, 05 Oct 2013 08:51:11 GMT
Server: CouchDB (Erlang/OTP)
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Create Target?
.sp
In case of a non\-existent Target, the Replicator MAY make a \fBPUT /{db}\fP
request to create the Target:
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
PUT /target HTTP/1.1
Accept: application/json
Host: localhost:5984
User\-Agent: CouchDB
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Content\-Length: 12
Content\-Type: application/json
Date: Sat, 05 Oct 2013 08:58:41 GMT
Server: CouchDB (Erlang/OTP)

{
    "ok": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
However, the Replicator\(aqs PUT request MAY NOT succeeded due to insufficient
privileges (which are granted by the provided credential) and so receive a
\fI\%401 Unauthorized\fP or a \fI\%403 Forbidden\fP error. Such errors SHOULD be expected
and well handled:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 500 Internal Server Error
Cache\-Control: must\-revalidate
Content\-Length: 108
Content\-Type: application/json
Date: Fri, 09 May 2014 13:50:32 GMT
Server: CouchDB (Erlang OTP)

{
    "error": "unauthorized",
    "reason": "unauthorized to access or create database http://localhost:5984/target"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Abort
.sp
In case of a non\-existent Source or Target, Replication SHOULD be aborted with
an HTTP error response:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 500 Internal Server Error
Cache\-Control: must\-revalidate
Content\-Length: 56
Content\-Type: application/json
Date: Sat, 05 Oct 2013 08:55:29 GMT
Server: CouchDB (Erlang OTP)

{
    "error": "db_not_found",
    "reason": "could not open source"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Get Peers Information
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \-+
\(aq Verify Peers:                                                    \(aq
\(aq                         +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+               \(aq
\(aq                         | Check Target Existence |               \(aq
\(aq                         +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+               \(aq
\(aq                                     |                            \(aq
\(aq                                     | 200 OK                     \(aq
\(aq                                     |                            \(aq
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- | \- \- \- \- \- \- \- \- \- \- \- \- \- \-+
                                      |
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- | \- \- \- \- \- \- \- \- \- \- \- \- \- \-+
\(aq Get Peers Information:              |                            \(aq
\(aq                                     v                            \(aq
\(aq                         +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+               \(aq
\(aq                         | Get Source Information |               \(aq
\(aq                         +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+               \(aq
\(aq                         |      GET /source       |               \(aq
\(aq                         +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+               \(aq
\(aq                                     |                            \(aq
\(aq                                     | 200 OK                     \(aq
\(aq                                     v                            \(aq
\(aq                         +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+               \(aq
\(aq                         | Get Target Information |               \(aq
\(aq                         +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+               \(aq
\(aq                         |      GET /target       |               \(aq
\(aq                         +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+               \(aq
\(aq                                     |                            \(aq
\(aq                                     | 200 OK                     \(aq
\(aq                                     |                            \(aq
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- | \- \- \- \- \- \- \- \- \- \- \- \- \- \-+
                                      |
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- | \- \- \- \- \- \- \- \- \- \- \- \- \- \-+
\(aq Find Common Ancestry:               |                            \(aq
\(aq                                     |                            \(aq
\(aq                                     v                            \(aq
\(aq                         +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+              \(aq
\(aq                         | Generate Replication ID |              \(aq
\(aq                         +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+              \(aq
\(aq                                                                  \(aq
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \-+
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The Replicator retrieves basic information both from Source and Target using
\fBGET /{db}\fP requests. The GET response MUST contain JSON objects with
the following mandatory fields:
.INDENT 0.0
.IP \(bu 2
\fBinstance_start_time\fP (\fIstring\fP): Always \fB"0"\fP\&. (Returned for legacy
reasons.)
.IP \(bu 2
\fBupdate_seq\fP (\fInumber\fP / \fIstring\fP): The current database Sequence ID.
.UNINDENT
.sp
Any other fields are optional. The information that the Replicator needs
is the \fBupdate_seq\fP field: this value will be used to define a \fItemporary\fP
(because Database data is subject to change) upper bound for changes feed
listening and statistic calculating to show proper Replication progress.
.SS Get Source Information
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /source HTTP/1.1
Accept: application/json
Host: localhost:5984
User\-Agent: CouchDB
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 256
Content\-Type: application/json
Date: Tue, 08 Oct 2013 07:53:08 GMT
Server: CouchDB (Erlang OTP)

{
    "committed_update_seq": 61772,
    "compact_running": false,
    "data_size": 70781613961,
    "db_name": "source",
    "disk_format_version": 6,
    "disk_size": 79132913799,
    "doc_count": 41961,
    "doc_del_count": 3807,
    "instance_start_time": "0",
    "purge_seq": 0,
    "update_seq": 61772
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Get Target Information
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /target/ HTTP/1.1
Accept: application/json
Host: localhost:5984
User\-Agent: CouchDB
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Length: 363
Content\-Type: application/json
Date: Tue, 08 Oct 2013 12:37:01 GMT
Server: CouchDB (Erlang/OTP)

{
    "compact_running": false,
    "db_name": "target",
    "disk_format_version": 5,
    "disk_size": 77001455,
    "doc_count": 1832,
    "doc_del_count": 1,
    "instance_start_time": "0",
    "other": {
        "data_size": 50829452
    },
    "purge_seq": 0,
    "update_seq": "1841\-g1AAAADveJzLYWBgYMlgTmGQT0lKzi9KdUhJMtbLSs1LLUst0k"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Find Common Ancestry
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
\(aq Get Peers Information:                                                    \(aq
\(aq                                                                           \(aq
\(aq                             +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq                             |           Get Target Information          | \(aq
\(aq                             +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq                               |                                           \(aq
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- | \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
                                |
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- | \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
\(aq Find Common Ancestry:         v                                           \(aq
\(aq                             +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq                             |          Generate Replication ID          | \(aq
\(aq                             +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq                               |                                           \(aq
\(aq                               |                                           \(aq
\(aq                               v                                           \(aq
\(aq                             +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq                             |      Get Replication Log from Source      | \(aq
\(aq                             +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq                             |     GET /source/_local/replication\-id     | \(aq
\(aq                             +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq                               |                                           \(aq
\(aq                               | 200 OK                                    \(aq
\(aq                               | 404 Not Found                             \(aq
\(aq                               v                                           \(aq
\(aq                             +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq                             |      Get Replication Log from Target      | \(aq
\(aq                             +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq                             |     GET /target/_local/replication\-id     | \(aq
\(aq                             +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq                               |                                           \(aq
\(aq                               | 200 OK                                    \(aq
\(aq                               | 404 Not Found                             \(aq
\(aq                               v                                           \(aq
\(aq                             +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq                             |          Compare Replication Logs         | \(aq
\(aq                             +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq                               |                                           \(aq
\(aq                               | Use latest common sequence as start point \(aq
\(aq                               |                                           \(aq
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- | \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
                                |
                                |
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- | \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
\(aq Locate Changed Documents:     |                                           \(aq
\(aq                               |                                           \(aq
\(aq                               v                                           \(aq
\(aq                             +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq                             |        Listen Source Changes Feed         | \(aq
\(aq                             +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq                                                                           \(aq
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Generate Replication ID
.sp
Before Replication is started, the Replicator MUST generate a Replication ID.
This value is used to track Replication History, resume and continue previously
interrupted Replication process.
.sp
The Replication ID generation algorithm is implementation specific. Whatever
algorithm is used it MUST uniquely identify the Replication process. CouchDB\(aqs
Replicator, for example, uses the following factors in generating a Replication
ID:
.INDENT 0.0
.IP \(bu 2
Persistent Peer UUID value. For CouchDB, the local
\fBServer UUID\fP is used
.IP \(bu 2
Source and Target URI and if Source or Target are local or remote Databases
.IP \(bu 2
If Target needed to be created
.IP \(bu 2
If Replication is Continuous
.IP \(bu 2
Any custom headers
.IP \(bu 2
\fIFilter function\fP code if used
.IP \(bu 2
Changes Feed query parameters, if any
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
See \fI\%couch_replicator_ids.erl\fP for an example of a Replication ID generation
implementation.
.UNINDENT
.UNINDENT
.SS Retrieve Replication Logs from Source and Target
.sp
Once the Replication ID has been generated, the Replicator SHOULD retrieve
the Replication Log from both Source and Target using
\fBGET /{db}/_local/{docid}\fP:
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /source/_local/b3e44b920ee2951cb2e123b63044427a HTTP/1.1
Accept: application/json
Host: localhost:5984
User\-Agent: CouchDB
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 1019
Content\-Type: application/json
Date: Thu, 10 Oct 2013 06:18:56 GMT
ETag: "0\-8"
Server: CouchDB (Erlang OTP)

{
    "_id": "_local/b3e44b920ee2951cb2e123b63044427a",
    "_rev": "0\-8",
    "history": [
        {
            "doc_write_failures": 0,
            "docs_read": 2,
            "docs_written": 2,
            "end_last_seq": 5,
            "end_time": "Thu, 10 Oct 2013 05:56:38 GMT",
            "missing_checked": 2,
            "missing_found": 2,
            "recorded_seq": 5,
            "session_id": "d5a34cbbdafa70e0db5cb57d02a6b955",
            "start_last_seq": 3,
            "start_time": "Thu, 10 Oct 2013 05:56:38 GMT"
        },
        {
            "doc_write_failures": 0,
            "docs_read": 1,
            "docs_written": 1,
            "end_last_seq": 3,
            "end_time": "Thu, 10 Oct 2013 05:56:12 GMT",
            "missing_checked": 1,
            "missing_found": 1,
            "recorded_seq": 3,
            "session_id": "11a79cdae1719c362e9857cd1ddff09d",
            "start_last_seq": 2,
            "start_time": "Thu, 10 Oct 2013 05:56:12 GMT"
        },
        {
            "doc_write_failures": 0,
            "docs_read": 2,
            "docs_written": 2,
            "end_last_seq": 2,
            "end_time": "Thu, 10 Oct 2013 05:56:04 GMT",
            "missing_checked": 2,
            "missing_found": 2,
            "recorded_seq": 2,
            "session_id": "77cdf93cde05f15fcb710f320c37c155",
            "start_last_seq": 0,
            "start_time": "Thu, 10 Oct 2013 05:56:04 GMT"
        }
    ],
    "replication_id_version": 3,
    "session_id": "d5a34cbbdafa70e0db5cb57d02a6b955",
    "source_last_seq": 5
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The Replication Log SHOULD contain the following fields:
.INDENT 0.0
.IP \(bu 2
\fBhistory\fP (\fIarray\fP of \fIobject\fP): Replication history. \fBRequired\fP
.INDENT 2.0
.IP \(bu 2
\fBdoc_write_failures\fP (\fInumber\fP): Number of failed writes
.IP \(bu 2
\fBdocs_read\fP (\fInumber\fP): Number of read documents
.IP \(bu 2
\fBdocs_written\fP (\fInumber\fP): Number of written documents
.IP \(bu 2
\fBend_last_seq\fP (\fInumber\fP): Last processed Update Sequence ID
.IP \(bu 2
\fBend_time\fP (\fIstring\fP): Replication completion timestamp in \fI\%RFC 5322\fP
format
.IP \(bu 2
\fBmissing_checked\fP (\fInumber\fP): Number of checked revisions on Source
.IP \(bu 2
\fBmissing_found\fP (\fInumber\fP): Number of missing revisions found on Target
.IP \(bu 2
\fBrecorded_seq\fP (\fInumber\fP): Recorded intermediate Checkpoint. \fBRequired\fP
.IP \(bu 2
\fBsession_id\fP (\fIstring\fP): Unique session ID. Commonly, a random UUID value
is used. \fBRequired\fP
.IP \(bu 2
\fBstart_last_seq\fP (\fInumber\fP): Start update Sequence ID
.IP \(bu 2
\fBstart_time\fP (\fIstring\fP): Replication start timestamp in \fI\%RFC 5322\fP format
.UNINDENT
.IP \(bu 2
\fBreplication_id_version\fP (\fInumber\fP): Replication protocol version. Defines
Replication ID calculation algorithm, HTTP API calls and the others
routines. \fBRequired\fP
.IP \(bu 2
\fBsession_id\fP (\fIstring\fP): Unique ID of the last session. Shortcut to
the \fBsession_id\fP field of the latest \fBhistory\fP object. \fBRequired\fP
.IP \(bu 2
\fBsource_last_seq\fP (\fInumber\fP): Last processed Checkpoint. Shortcut to
the \fBrecorded_seq\fP field of the latest \fBhistory\fP object. \fBRequired\fP
.UNINDENT
.sp
This request MAY fall with a \fI\%404 Not Found\fP response:
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /source/_local/b6cef528f67aa1a8a014dd1144b10e09 HTTP/1.1
Accept: application/json
Host: localhost:5984
User\-Agent: CouchDB
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 404 Object Not Found
Cache\-Control: must\-revalidate
Content\-Length: 41
Content\-Type: application/json
Date: Tue, 08 Oct 2013 13:31:10 GMT
Server: CouchDB (Erlang OTP)

{
    "error": "not_found",
    "reason": "missing"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
That\(aqs OK. This means that there is no information about the current Replication
so it must not have been run previously and as such the Replicator MUST run
a Full Replication.
.SS Compare Replication Logs
.sp
If the Replication Logs are successfully retrieved from both Source and Target
then the Replicator MUST determine their common ancestry by following the next
algorithm:
.INDENT 0.0
.IP \(bu 2
Compare \fBsession_id\fP values for the chronological last session \- if they
match both Source and Target have a common Replication history and it seems
to be valid. Use \fBsource_last_seq\fP value for the startup Checkpoint
.IP \(bu 2
In case of mismatch, iterate over the \fBhistory\fP collection to search for
the latest (chronologically) common \fBsession_id\fP for Source and Target.
Use value of \fBrecorded_seq\fP field as startup Checkpoint
.UNINDENT
.sp
If Source and Target has no common ancestry, the Replicator MUST run
Full Replication.
.SS Locate Changed Documents
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
\(aq Find Common Ancestry:                                                     \(aq
\(aq                                                                           \(aq
\(aq             +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                              \(aq
\(aq             |   Compare Replication Logs   |                              \(aq
\(aq             +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                              \(aq
\(aq                                          |                                \(aq
\(aq                                          |                                \(aq
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \-  |  \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
                                           |
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \-  |  \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
\(aq Locate Changed Documents:                |                                \(aq
\(aq                                          |                                \(aq
\(aq                                          |                                \(aq
\(aq                                          v                                \(aq
\(aq            +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                              \(aq
\(aq   +\-\-\-\-\-\-> |     Listen to Changes Feed    | \-\-\-\-\-+                       \(aq
\(aq   |        +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+      |                       \(aq
\(aq   |        |     GET  /source/_changes     |      |                       \(aq
\(aq   |        |     POST /source/_changes     |      |                       \(aq
\(aq   |        +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+      |                       \(aq
\(aq   |                                      |        |                       \(aq
\(aq   |                                      |        |                       \(aq
\(aq   |                There are new changes |        | No more changes       \(aq
\(aq   |                                      |        |                       \(aq
\(aq   |                                      v        v                       \(aq
\(aq   |        +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq   |        |     Read Batch of Changes     |    | Replication Completed | \(aq
\(aq   |        +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq   |                                      |                                \(aq
\(aq   | No                                   |                                \(aq
\(aq   |                                      v                                \(aq
\(aq   |        +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                              \(aq
\(aq   |        |  Compare Documents Revisions  |                              \(aq
\(aq   |        +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                              \(aq
\(aq   |        |    POST /target/_revs_diff    |                              \(aq
\(aq   |        +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                              \(aq
\(aq   |                                      |                                \(aq
\(aq   |                               200 OK |                                \(aq
\(aq   |                                      v                                \(aq
\(aq   |        +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                              \(aq
\(aq   +\-\-\-\-\-\-\- |     Any Differences Found?    |                              \(aq
\(aq            +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                              \(aq
\(aq                                          |                                \(aq
\(aq                                      Yes |                                \(aq
\(aq                                          |                                \(aq
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \-  |  \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
                                           |
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \-  |  \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
\(aq Replicate Changes:                       |                                \(aq
\(aq                                          v                                \(aq
\(aq            +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                              \(aq
\(aq            |  Fetch Next Changed Document  |                              \(aq
\(aq            +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                              \(aq
\(aq                                                                           \(aq
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Listen to Changes Feed
.sp
When the start up Checkpoint has been defined, the Replicator SHOULD read
the Source\(aqs \fIChanges Feed\fP by using a \fBGET /{db}/_changes\fP
request. This request MUST be made with the following query parameters:
.INDENT 0.0
.IP \(bu 2
\fBfeed\fP parameter defines the Changes Feed response style: for Continuous
Replication the \fBcontinuous\fP value SHOULD be used, otherwise \- \fBnormal\fP\&.
.IP \(bu 2
\fBstyle=all_docs\fP query parameter tells the Source that it MUST include
all Revision leaves for each document\(aqs event in output.
.IP \(bu 2
For Continuous Replication the \fBheartbeat\fP parameter defines the heartbeat
period in \fImilliseconds\fP\&. The RECOMMENDED value by default is \fB10000\fP
(10 seconds).
.IP \(bu 2
If a startup Checkpoint was found during the Replication Logs comparison,
the \fBsince\fP query parameter MUST be passed with this value.
In case of Full Replication it MAY be \fB0\fP (number zero) or
be omitted.
.UNINDENT
.sp
Additionally, the \fBfilter\fP query parameter MAY be specified to enable a
\fIfilter function\fP on Source side. Other
custom parameters MAY also be provided.
.SS Read Batch of Changes
.sp
Reading the whole feed in a single shot may not be an optimal use of resources.
It is RECOMMENDED to process the feed in small chunks. However, there is
no specific recommendation on chunk size since it is heavily dependent on
available resources: large chunks requires more memory while they reduce
I/O operations and vice versa.
.sp
Note, that Changes Feed output format is different for a request with
\fIfeed=normal\fP and with
\fIfeed=continuous\fP query parameter.
.sp
Normal Feed:
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /source/_changes?feed=normal&style=all_docs&heartbeat=10000 HTTP/1.1
Accept: application/json
Host: localhost:5984
User\-Agent: CouchDB
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Fri, 09 May 2014 16:20:41 GMT
Server: CouchDB (Erlang OTP)
Transfer\-Encoding: chunked

{"results":[
{"seq":14,"id":"f957f41e","changes":[{"rev":"3\-46a3"}],"deleted":true}
{"seq":29,"id":"ddf339dd","changes":[{"rev":"10\-304b"}]}
{"seq":37,"id":"d3cc62f5","changes":[{"rev":"2\-eec2"}],"deleted":true}
{"seq":39,"id":"f13bd08b","changes":[{"rev":"1\-b35d"}]}
{"seq":41,"id":"e0a99867","changes":[{"rev":"2\-c1c6"}]}
{"seq":42,"id":"a75bdfc5","changes":[{"rev":"1\-967a"}]}
{"seq":43,"id":"a5f467a0","changes":[{"rev":"1\-5575"}]}
{"seq":45,"id":"470c3004","changes":[{"rev":"11\-c292"}]}
{"seq":46,"id":"b1cb8508","changes":[{"rev":"10\-ABC"}]}
{"seq":47,"id":"49ec0489","changes":[{"rev":"157\-b01f"},{"rev":"123\-6f7c"}]}
{"seq":49,"id":"dad10379","changes":[{"rev":"1\-9346"},{"rev":"6\-5b8a"}]}
{"seq":50,"id":"73464877","changes":[{"rev":"1\-9f08"}]}
{"seq":51,"id":"7ae19302","changes":[{"rev":"1\-57bf"}]}
{"seq":63,"id":"6a7a6c86","changes":[{"rev":"5\-acf6"}],"deleted":true}
{"seq":64,"id":"dfb9850a","changes":[{"rev":"1\-102f"}]}
{"seq":65,"id":"c532afa7","changes":[{"rev":"1\-6491"}]}
{"seq":66,"id":"af8a9508","changes":[{"rev":"1\-3db2"}]}
{"seq":67,"id":"caa3dded","changes":[{"rev":"1\-6491"}]}
{"seq":68,"id":"79f3b4e9","changes":[{"rev":"1\-102f"}]}
{"seq":69,"id":"1d89d16f","changes":[{"rev":"1\-3db2"}]}
{"seq":71,"id":"abae7348","changes":[{"rev":"2\-7051"}]}
{"seq":77,"id":"6c25534f","changes":[{"rev":"9\-CDE"},{"rev":"3\-00e7"},{"rev":"1\-ABC"}]}
{"seq":78,"id":"SpaghettiWithMeatballs","changes":[{"rev":"22\-5f95"}]}
],
"last_seq":78}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Continuous Feed:
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /source/_changes?feed=continuous&style=all_docs&heartbeat=10000 HTTP/1.1
Accept: application/json
Host: localhost:5984
User\-Agent: CouchDB
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Fri, 09 May 2014 16:22:22 GMT
Server: CouchDB (Erlang OTP)
Transfer\-Encoding: chunked

{"seq":14,"id":"f957f41e","changes":[{"rev":"3\-46a3"}],"deleted":true}
{"seq":29,"id":"ddf339dd","changes":[{"rev":"10\-304b"}]}
{"seq":37,"id":"d3cc62f5","changes":[{"rev":"2\-eec2"}],"deleted":true}
{"seq":39,"id":"f13bd08b","changes":[{"rev":"1\-b35d"}]}
{"seq":41,"id":"e0a99867","changes":[{"rev":"2\-c1c6"}]}
{"seq":42,"id":"a75bdfc5","changes":[{"rev":"1\-967a"}]}
{"seq":43,"id":"a5f467a0","changes":[{"rev":"1\-5575"}]}
{"seq":45,"id":"470c3004","changes":[{"rev":"11\-c292"}]}
{"seq":46,"id":"b1cb8508","changes":[{"rev":"10\-ABC"}]}
{"seq":47,"id":"49ec0489","changes":[{"rev":"157\-b01f"},{"rev":"123\-6f7c"}]}
{"seq":49,"id":"dad10379","changes":[{"rev":"1\-9346"},{"rev":"6\-5b8a"}]}
{"seq":50,"id":"73464877","changes":[{"rev":"1\-9f08"}]}
{"seq":51,"id":"7ae19302","changes":[{"rev":"1\-57bf"}]}
{"seq":63,"id":"6a7a6c86","changes":[{"rev":"5\-acf6"}],"deleted":true}
{"seq":64,"id":"dfb9850a","changes":[{"rev":"1\-102f"}]}
{"seq":65,"id":"c532afa7","changes":[{"rev":"1\-6491"}]}
{"seq":66,"id":"af8a9508","changes":[{"rev":"1\-3db2"}]}
{"seq":67,"id":"caa3dded","changes":[{"rev":"1\-6491"}]}
{"seq":68,"id":"79f3b4e9","changes":[{"rev":"1\-102f"}]}
{"seq":69,"id":"1d89d16f","changes":[{"rev":"1\-3db2"}]}
{"seq":71,"id":"abae7348","changes":[{"rev":"2\-7051"}]}
{"seq":75,"id":"SpaghettiWithMeatballs","changes":[{"rev":"21\-5949"}]}
{"seq":77,"id":"6c255","changes":[{"rev":"9\-CDE"},{"rev":"3\-00e7"},{"rev":"1\-ABC"}]}
{"seq":78,"id":"SpaghettiWithMeatballs","changes":[{"rev":"22\-5f95"}]}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
For both Changes Feed formats record\-per\-line style is preserved to simplify
iterative fetching and decoding JSON objects with less memory footprint.
.SS Calculate Revision Difference
.sp
After reading the batch of changes from the Changes Feed, the Replicator forms a
JSON mapping object for Document ID and related leaf Revisions and sends
the result to Target via a \fBPOST /{db}/_revs_diff\fP request:
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST /target/_revs_diff HTTP/1.1
Accept: application/json
Content\-Length: 287
Content\-Type: application/json
Host: localhost:5984
User\-Agent: CouchDB

{
    "baz": [
        "2\-7051cbe5c8faecd085a3fa619e6e6337"
    ],
    "foo": [
        "3\-6a540f3d701ac518d3b9733d673c5484"
    ],
    "bar": [
        "1\-d4e501ab47de6b2000fc8a02f84a0c77",
        "1\-967a00dff5e02add41819138abb3284d"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 88
Content\-Type: application/json
Date: Fri, 25 Oct 2013 14:44:41 GMT
Server: CouchDB (Erlang/OTP)

{
    "baz": {
        "missing": [
            "2\-7051cbe5c8faecd085a3fa619e6e6337"
        ]
    },
    "bar": {
        "missing": [
            "1\-d4e501ab47de6b2000fc8a02f84a0c77"
        ]
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
In the response the Replicator receives a Document ID \-\- Revisions mapping,
but only for Revisions that do not exist in Target and are REQUIRED to be
transferred from Source.
.sp
If all Revisions in the request match the current state of the Documents then
the response will contain an empty JSON object:
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST /target/_revs_diff HTTP/1.1
Accept: application/json
Content\-Length: 160
Content\-Type: application/json
Host: localhost:5984
User\-Agent: CouchDB

{
    "foo": [
        "3\-6a540f3d701ac518d3b9733d673c5484"
    ],
    "bar": [
        "1\-967a00dff5e02add41819138abb3284d"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 2
Content\-Type: application/json
Date: Fri, 25 Oct 2013 14:45:00 GMT
Server: CouchDB (Erlang/OTP)

{}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Replication Completed
.sp
When there are no more changes left to process and no more Documents left to
replicate, the Replicator finishes the Replication process. If Replication
wasn\(aqt Continuous, the Replicator MAY return a response to client with
statistics about the process.
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 414
Content\-Type: application/json
Date: Fri, 09 May 2014 15:14:19 GMT
Server: CouchDB (Erlang OTP)

{
    "history": [
        {
            "doc_write_failures": 2,
            "docs_read": 2,
            "docs_written": 0,
            "end_last_seq": 2939,
            "end_time": "Fri, 09 May 2014 15:14:19 GMT",
            "missing_checked": 1835,
            "missing_found": 2,
            "recorded_seq": 2939,
            "session_id": "05918159f64842f1fe73e9e2157b2112",
            "start_last_seq": 0,
            "start_time": "Fri, 09 May 2014 15:14:18 GMT"
        }
    ],
    "ok": true,
    "replication_id_version": 3,
    "session_id": "05918159f64842f1fe73e9e2157b2112",
    "source_last_seq": 2939
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Replicate Changes
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
\(aq Locate Changed Documents:                                                       \(aq
\(aq                                                                                 \(aq
\(aq               +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq               |      Any Differences Found?         |                           \(aq
\(aq               +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq                                                   |                             \(aq
\(aq                                                   |                             \(aq
\(aq                                                   |                             \(aq
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- | \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
                                                    |
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- | \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
\(aq Replicate Changes:                                |                             \(aq
\(aq                                                   v                             \(aq
\(aq               +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq   +\-\-\-\-\-\-\-\-\-> |     Fetch Next Changed Document     | <\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+   \(aq
\(aq   |           +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                       |   \(aq
\(aq   |           |          GET /source/docid          |                       |   \(aq
\(aq   |           +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                       |   \(aq
\(aq   |             |                                                           |   \(aq
\(aq   |             |                                                           |   \(aq
\(aq   |             |                                          201 Created      |   \(aq
\(aq   |             | 200 OK                                   401 Unauthorized |   \(aq
\(aq   |             |                                          403 Forbidden    |   \(aq
\(aq   |             |                                                           |   \(aq
\(aq   |             v                                                           |   \(aq
\(aq   |           +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                       |   \(aq
\(aq   |   +\-\-\-\-\-\- |  Document Has Changed Attachments?  |                       |   \(aq
\(aq   |   |       +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                       |   \(aq
\(aq   |   |         |                                                           |   \(aq
\(aq   |   |         |                                                           |   \(aq
\(aq   |   |         | Yes                                                       |   \(aq
\(aq   |   |         |                                                           |   \(aq
\(aq   |   |         v                                                           |   \(aq
\(aq   |   |       +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+   Yes    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq   |   | No    |  Are They Big Enough?  | \-\-\-\-\-\-\-> | Update Document on Target | \(aq
\(aq   |   |       +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+          +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq   |   |         |                                 |     PUT /target/docid     | \(aq
\(aq   |   |         |                                 +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ \(aq
\(aq   |   |         |                                                               \(aq
\(aq   |   |         | No                                                            \(aq
\(aq   |   |         |                                                               \(aq
\(aq   |   |         v                                                               \(aq
\(aq   |   |       +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq   |   +\-\-\-\-\-> |     Put Document Into the Stack     |                           \(aq
\(aq   |           +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq   |             |                                                               \(aq
\(aq   |             |                                                               \(aq
\(aq   |             v                                                               \(aq
\(aq   |     No    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq   +\-\-\-\-\-\-\-\-\-\- |           Stack is Full?            |                           \(aq
\(aq   |           +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq   |             |                                                               \(aq
\(aq   |             | Yes                                                           \(aq
\(aq   |             |                                                               \(aq
\(aq   |             v                                                               \(aq
\(aq   |           +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq   |           | Upload Stack of Documents to Target |                           \(aq
\(aq   |           +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq   |           |       POST /target/_bulk_docs       |                           \(aq
\(aq   |           +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq   |             |                                                               \(aq
\(aq   |             | 201 Created                                                   \(aq
\(aq   |             v                                                               \(aq
\(aq   |           +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq   |           |          Ensure in Commit           |                           \(aq
\(aq   |           +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq   |           |  POST /target/_ensure_full_commit   |                           \(aq
\(aq   |           +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq   |             |                                                               \(aq
\(aq   |             | 201 Created                                                   \(aq
\(aq   |             v                                                               \(aq
\(aq   |           +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq   |           |    Record Replication Checkpoint    |                           \(aq
\(aq   |           +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq   |           |  PUT /source/_local/replication\-id  |                           \(aq
\(aq   |           |  PUT /target/_local/replication\-id  |                           \(aq
\(aq   |           +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq   |             |                                                               \(aq
\(aq   |             | 201 Created                                                   \(aq
\(aq   |             v                                                               \(aq
\(aq   |     No    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq   +\-\-\-\-\-\-\-\-\-\- | All Documents from Batch Processed? |                           \(aq
\(aq               +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq                                                   |                             \(aq
\(aq                                               Yes |                             \(aq
\(aq                                                   |                             \(aq
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- | \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
                                                    |
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- | \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
\(aq Locate Changed Documents:                         |                             \(aq
\(aq                                                   v                             \(aq
\(aq               +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq               |       Listen to Changes Feed        |                           \(aq
\(aq               +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                           \(aq
\(aq                                                                                 \(aq
+ \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- +
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fetch Changed Documents
.sp
At this step the Replicator MUST fetch all Document Leaf Revisions from Source
that are missed at Target. This operation is effective if Replication WILL
use previously calculated Revision differences since they define
missing Documents and their Revisions.
.sp
To fetch the Document the Replicator will make a \fBGET /{db}/{docid}\fP request
with the following query parameters:
.INDENT 0.0
.IP \(bu 2
\fBrevs=true\fP: Instructs the Source to include the list of all known revisions
into the Document in the \fB_revisions\fP field. This information is needed to
synchronize the Document\(aqs ancestors history between Source and Target
.IP \(bu 2
The \fBopen_revs\fP query parameter contains a JSON array with a list of
Leaf Revisions that are needed to be fetched. If the specified Revision
exists then the Document MUST be returned for this Revision. Otherwise,
Source MUST return an object with the single field \fBmissing\fP with the
missed Revision as the value. In case the Document contains attachments,
Source MUST return information only for those ones that had been changed
(added or updated) since the specified Revision values. If an attachment
was deleted, the Document MUST NOT have stub information for it
.IP \(bu 2
\fBlatest=true\fP: Ensures, that Source will return the latest Document Revision
regardless of which one was specified in the \fBopen_revs\fP query parameter.
This parameter solves a race condition problem where the requested Document
may be changed in between this step and handling related events on the
Changes Feed
.UNINDENT
.sp
In the response Source SHOULD return \fImultipart/mixed\fP or respond
instead with \fIapplication/json\fP unless the \fI\%Accept\fP header
specifies a different mime type. The \fImultipart/mixed\fP content type
allows handling the response data as a stream, since there could be multiple
documents (one per each Leaf Revision) plus several attachments. These
attachments are mostly binary and JSON has no way to handle such data except as
base64 encoded strings which are very ineffective for transfer and processing
operations.
.sp
With a \fImultipart/mixed\fP response the Replicator handles multiple
Document Leaf Revisions and their attachments one by one as raw data without
any additional encoding applied. There is also one agreement to make data
processing more effective: the Document ALWAYS goes before its attachments, so
the Replicator has no need to process all the data to map related
Documents\-Attachments and may handle it as stream with lesser memory footprint.
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /source/SpaghettiWithMeatballs?revs=true&open_revs=[%225\-00ecbbc%22,%221\-917fa23%22,%223\-6bcedf1%22]&latest=true HTTP/1.1
Accept: multipart/mixed
Host: localhost:5984
User\-Agent: CouchDB
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Type: multipart/mixed; boundary="7b1596fc4940bc1be725ad67f11ec1c4"
Date: Thu, 07 Nov 2013 15:10:16 GMT
Server: CouchDB (Erlang OTP)
Transfer\-Encoding: chunked

\-\-7b1596fc4940bc1be725ad67f11ec1c4
Content\-Type: application/json

{
    "_id": "SpaghettiWithMeatballs",
    "_rev": "1\-917fa23",
    "_revisions": {
        "ids": [
            "917fa23"
        ],
        "start": 1
    },
    "description": "An Italian\-American delicious dish",
    "ingredients": [
        "spaghetti",
        "tomato sauce",
        "meatballs"
    ],
    "name": "Spaghetti with meatballs"
}
\-\-7b1596fc4940bc1be725ad67f11ec1c4
Content\-Type: multipart/related; boundary="a81a77b0ca68389dda3243a43ca946f2"

\-\-a81a77b0ca68389dda3243a43ca946f2
Content\-Type: application/json

{
    "_attachments": {
      "recipe.txt": {
          "content_type": "text/plain",
          "digest": "md5\-R5CrCb6fX10Y46AqtNn0oQ==",
          "follows": true,
          "length": 87,
          "revpos": 7
      }
    },
    "_id": "SpaghettiWithMeatballs",
    "_rev": "7\-474f12e",
    "_revisions": {
        "ids": [
            "474f12e",
            "5949cfc",
            "00ecbbc",
            "fc997b6",
            "3552c87",
            "404838b",
            "5defd9d",
            "dc1e4be"
        ],
        "start": 7
    },
    "description": "An Italian\-American delicious dish",
    "ingredients": [
        "spaghetti",
        "tomato sauce",
        "meatballs",
        "love"
    ],
    "name": "Spaghetti with meatballs"
}
\-\-a81a77b0ca68389dda3243a43ca946f2
Content\-Disposition: attachment; filename="recipe.txt"
Content\-Type: text/plain
Content\-Length: 87

1. Cook spaghetti
2. Cook meetballs
3. Mix them
4. Add tomato sauce
5. ...
6. PROFIT!

\-\-a81a77b0ca68389dda3243a43ca946f2\-\-
\-\-7b1596fc4940bc1be725ad67f11ec1c4
Content\-Type: application/json; error="true"

{"missing":"3\-6bcedf1"}
\-\-7b1596fc4940bc1be725ad67f11ec1c4\-\-
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
After receiving the response, the Replicator puts all the received data into a
local stack for further bulk upload to utilize network bandwidth effectively.
The local stack size could be limited by number of Documents or bytes of
handled JSON data. When the stack is full the Replicator uploads all the
handled Document in bulk mode to the Target. While bulk operations are highly
RECOMMENDED to be used, in certain cases the Replicator MAY upload Documents to
Target one by one.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Alternative Replicator implementations MAY use alternative ways to retrieve
Documents from Source. For instance, \fI\%PouchDB\fP doesn\(aqt use the Multipart
API
and fetches only the latest Document Revision with inline attachments as a
single
JSON object. While this is still valid CouchDB HTTP API usage, such
solutions MAY require a different API implementation for non\-CouchDB
Peers.
.UNINDENT
.UNINDENT
.SS Upload Batch of Changed Documents
.sp
To upload multiple Documents in a single shot the Replicator sends a
\fBPOST /{db}/_bulk_docs\fP request to Target with payload containing a JSON object
with the following mandatory fields:
.INDENT 0.0
.IP \(bu 2
\fBdocs\fP (\fIarray\fP of \fIobjects\fP): List of Document objects to update on Target.
These Documents MUST contain the \fB_revisions\fP field that holds a list of the
full Revision history to let Target create Leaf Revisions that correctly
preserve ancestry
.IP \(bu 2
\fBnew_edits\fP (\fIboolean\fP): Special flag that instructs Target to store
Documents with the specified Revision (field \fB_rev\fP) value as\-is without
generating a new revision. Always \fBfalse\fP
.UNINDENT
.sp
The request also MAY contain \fBX\-Couch\-Full\-Commit\fP that controls
CouchDB \fBcommit policy\fP\&. Other Peers
MAY ignore this header or use it to control similar local
feature.
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST /target/_bulk_docs HTTP/1.1
Accept: application/json
Content\-Length: 826
Content\-Type:application/json
Host: localhost:5984
User\-Agent: CouchDB
X\-Couch\-Full\-Commit: false

{
    "docs": [
        {
            "_id": "SpaghettiWithMeatballs",
            "_rev": "1\-917fa2381192822767f010b95b45325b",
            "_revisions": {
                "ids": [
                    "917fa2381192822767f010b95b45325b"
                ],
                "start": 1
            },
            "description": "An Italian\-American delicious dish",
            "ingredients": [
                "spaghetti",
                "tomato sauce",
                "meatballs"
            ],
            "name": "Spaghetti with meatballs"
        },
        {
            "_id": "LambStew",
            "_rev": "1\-34c318924a8f327223eed702ddfdc66d",
            "_revisions": {
                "ids": [
                    "34c318924a8f327223eed702ddfdc66d"
                ],
                "start": 1
            },
            "servings": 6,
            "subtitle": "Delicious with scone topping",
            "title": "Lamb Stew"
        },
        {
            "_id": "FishStew",
            "_rev": "1\-9c65296036141e575d32ba9c034dd3ee",
            "_revisions": {
                "ids": [
                    "9c65296036141e575d32ba9c034dd3ee"
                ],
                "start": 1
            },
            "servings": 4,
            "subtitle": "Delicious with fresh bread",
            "title": "Fish Stew"
        }
    ],
    "new_edits": false
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
In its response Target MUST return a JSON array with a list of Document update
statuses. If the Document has been stored successfully, the list item MUST
contain the field \fBok\fP with \fBtrue\fP value. Otherwise it MUST contain
\fBerror\fP and \fBreason\fP fields with error type and a human\-friendly reason
description.
.sp
Document updating failure isn\(aqt fatal as Target MAY reject the update for its
own reasons. It\(aqs RECOMMENDED to use error type \fBforbidden\fP for rejections,
but other error types can also be used (like invalid field name etc.). The
Replicator SHOULD NOT retry uploading rejected documents unless there are
good reasons for doing so (e.g. there is special error type for that).
.sp
Note that while a update may fail for one Document in the response,
Target can still return a \fI\%201 Created\fP response. Same will be true if all
updates fail for all uploaded Documents.
.INDENT 0.0
.INDENT 3.5
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 246
Content\-Type: application/json
Date: Sun, 10 Nov 2013 19:02:26 GMT
Server: CouchDB (Erlang/OTP)

[
    {
        "ok": true,
        "id": "SpaghettiWithMeatballs",
        "rev":" 1\-917fa2381192822767f010b95b45325b"
    },
    {
        "ok": true,
        "id": "FishStew",
        "rev": "1\-9c65296036141e575d32ba9c034dd3ee"
    },
    {
        "error": "forbidden",
        "id": "LambStew",
        "reason": "sorry",
        "rev": "1\-34c318924a8f327223eed702ddfdc66d"
    }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Upload Document with Attachments
.sp
There is a special optimization case when then Replicator WILL NOT use bulk
upload of changed Documents. This case is applied when Documents contain a
lot of attached files or the files are too big to be efficiently encoded with
Base64.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
CouchDB defines a limit of \fB8\fP attachments per Document and each attached
file size should not be greater than \fB64 KiB\fP\&. While this is a RECOMMENDED
limitation, other Replicator implementations MAY have their own values.
.UNINDENT
.UNINDENT
.sp
For this case the Replicator issues a \fB/{db}/{docid}?new_edits=false\fP request with \fImultipart/related\fP content type. Such
a request allows one to easily stream the Document and all its attachments
one by one without any serialization overhead.
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
PUT /target/SpaghettiWithMeatballs?new_edits=false HTTP/1.1
Accept: application/json
Content\-Length: 1030
Content\-Type: multipart/related; boundary="864d690aeb91f25d469dec6851fb57f2"
Host: localhost:5984
User\-Agent: CouchDB

\-\-2fa48cba80d0cdba7829931fe8acce9d
Content\-Type: application/json

{
    "_attachments": {
        "recipe.txt": {
            "content_type": "text/plain",
            "digest": "md5\-R5CrCb6fX10Y46AqtNn0oQ==",
            "follows": true,
            "length": 87,
            "revpos": 7
        }
    },
    "_id": "SpaghettiWithMeatballs",
    "_rev": "7\-474f12eb068c717243487a9505f6123b",
    "_revisions": {
        "ids": [
            "474f12eb068c717243487a9505f6123b",
            "5949cfcd437e3ee22d2d98a26d1a83bf",
            "00ecbbc54e2a171156ec345b77dfdf59",
            "fc997b62794a6268f2636a4a176efcd6",
            "3552c87351aadc1e4bea2461a1e8113a",
            "404838bc2862ce76c6ebed046f9eb542",
            "5defd9d813628cea6e98196eb0ee8594"
        ],
        "start": 7
    },
    "description": "An Italian\-American delicious dish",
    "ingredients": [
        "spaghetti",
        "tomato sauce",
        "meatballs",
        "love"
    ],
    "name": "Spaghetti with meatballs"
}
\-\-2fa48cba80d0cdba7829931fe8acce9d
Content\-Disposition: attachment; filename="recipe.txt"
Content\-Type: text/plain
Content\-Length: 87

1. Cook spaghetti
2. Cook meetballs
3. Mix them
4. Add tomato sauce
5. ...
6. PROFIT!

\-\-2fa48cba80d0cdba7829931fe8acce9d\-\-
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 105
Content\-Type: application/json
Date: Fri, 08 Nov 2013 16:35:27 GMT
Server: CouchDB (Erlang/OTP)

{
    "ok": true,
    "id": "SpaghettiWithMeatballs",
    "rev": "7\-474f12eb068c717243487a9505f6123b"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Unlike bulk updating via \fBPOST /{db}/_bulk_docs\fP endpoint, the response MAY
come with a different status code. For instance, in the case when the Document
is rejected, Target SHOULD respond with a \fI\%403 Forbidden\fP:
.INDENT 0.0
.INDENT 3.5
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 403 Forbidden
Cache\-Control: must\-revalidate
Content\-Length: 39
Content\-Type: application/json
Date: Fri, 08 Nov 2013 16:35:27 GMT
Server: CouchDB (Erlang/OTP)

{
    "error": "forbidden",
    "reason": "sorry"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Replicator SHOULD NOT retry requests in case of a \fI\%401 Unauthorized\fP,
\fI\%403 Forbidden\fP, \fI\%409 Conflict\fP or \fI\%412 Precondition Failed\fP since repeating
the request couldn\(aqt solve the issue with user credentials or uploaded data.
.SS Ensure In Commit
.sp
Once a batch of changes has been successfully uploaded to Target, the
Replicator issues a \fBPOST /{db}/_ensure_full_commit\fP request to ensure that
every transferred bit is laid down on disk or other \fIpersistent\fP storage place.
Target MUST return \fI\%201 Created\fP response with a JSON object containing the
following mandatory fields:
.INDENT 0.0
.IP \(bu 2
\fBinstance_start_time\fP (\fIstring\fP): Timestamp of when the database was
opened, expressed in \fImicroseconds\fP since the epoch
.IP \(bu 2
\fBok\fP (\fIboolean\fP): Operation status. Constantly \fBtrue\fP
.sp
\fBRequest\fP:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
POST /target/_ensure_full_commit HTTP/1.1
Accept: application/json
Content\-Type: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 53
Content\-Type: application/json
Date: Web, 06 Nov 2013 18:20:43 GMT
Server: CouchDB (Erlang/OTP)

{
    "instance_start_time": "0",
    "ok": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Record Replication Checkpoint
.sp
Since batches of changes were uploaded and committed successfully, the
Replicator updates the Replication Log both on Source and Target recording
the current Replication state. This operation is REQUIRED so that in the case
of Replication failure the replication can resume from last point of success,
not from the very beginning.
.sp
Replicator updates Replication Log on Source:
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
PUT /source/_local/afa899a9e59589c3d4ce5668e3218aef HTTP/1.1
Accept: application/json
Content\-Length: 591
Content\-Type: application/json
Host: localhost:5984
User\-Agent: CouchDB

{
    "_id": "_local/afa899a9e59589c3d4ce5668e3218aef",
    "_rev": "0\-1",
    "_revisions": {
        "ids": [
            "31f36e40158e717fbe9842e227b389df"
        ],
        "start": 1
    },
    "history": [
        {
            "doc_write_failures": 0,
            "docs_read": 6,
            "docs_written": 6,
            "end_last_seq": 26,
            "end_time": "Thu, 07 Nov 2013 09:42:17 GMT",
            "missing_checked": 6,
            "missing_found": 6,
            "recorded_seq": 26,
            "session_id": "04bf15bf1d9fa8ac1abc67d0c3e04f07",
            "start_last_seq": 0,
            "start_time": "Thu, 07 Nov 2013 09:41:43 GMT"
        }
    ],
    "replication_id_version": 3,
    "session_id": "04bf15bf1d9fa8ac1abc67d0c3e04f07",
    "source_last_seq": 26
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 75
Content\-Type: application/json
Date: Thu, 07 Nov 2013 09:42:17 GMT
Server: CouchDB (Erlang/OTP)

{
    "id": "_local/afa899a9e59589c3d4ce5668e3218aef",
    "ok": true,
    "rev": "0\-2"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\&...and on Target too:
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
PUT /target/_local/afa899a9e59589c3d4ce5668e3218aef HTTP/1.1
Accept: application/json
Content\-Length: 591
Content\-Type: application/json
Host: localhost:5984
User\-Agent: CouchDB

{
    "_id": "_local/afa899a9e59589c3d4ce5668e3218aef",
    "_rev": "1\-31f36e40158e717fbe9842e227b389df",
    "_revisions": {
        "ids": [
            "31f36e40158e717fbe9842e227b389df"
        ],
        "start": 1
    },
    "history": [
        {
            "doc_write_failures": 0,
            "docs_read": 6,
            "docs_written": 6,
            "end_last_seq": 26,
            "end_time": "Thu, 07 Nov 2013 09:42:17 GMT",
            "missing_checked": 6,
            "missing_found": 6,
            "recorded_seq": 26,
            "session_id": "04bf15bf1d9fa8ac1abc67d0c3e04f07",
            "start_last_seq": 0,
            "start_time": "Thu, 07 Nov 2013 09:41:43 GMT"
        }
    ],
    "replication_id_version": 3,
    "session_id": "04bf15bf1d9fa8ac1abc67d0c3e04f07",
    "source_last_seq": 26
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 106
Content\-Type: application/json
Date: Thu, 07 Nov 2013 09:42:17 GMT
Server: CouchDB (Erlang/OTP)

{
    "id": "_local/afa899a9e59589c3d4ce5668e3218aef",
    "ok": true,
    "rev": "2\-9b5d1e36bed6ae08611466e30af1259a"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Continue Reading Changes
.sp
Once a batch of changes had been processed and transferred to Target
successfully, the Replicator can continue to listen to the Changes Feed for new
changes. If there are no new changes to process the Replication is considered
to be done.
.sp
For Continuous Replication, the Replicator MUST continue to wait for new changes
from Source.
.SS Protocol Robustness
.sp
Since the \fICouchDB Replication Protocol\fP works on top of HTTP, which is based on
TCP/IP, the Replicator SHOULD expect to be working within an unstable
environment with delays, losses and other bad surprises that might eventually
occur. The Replicator SHOULD NOT count every HTTP request failure as a \fIfatal
error\fP\&. It SHOULD be smart enough to detect timeouts, repeat failed requests,
be ready to process incomplete or malformed data and so on. \fIData must flow\fP
\- that\(aqs the rule.
.SS Error Responses
.sp
In case something goes wrong the Peer MUST respond with a JSON object with
the following REQUIRED fields:
.INDENT 0.0
.IP \(bu 2
\fBerror\fP (\fIstring\fP): Error type for programs and developers
.IP \(bu 2
\fBreason\fP (\fIstring\fP): Error description for humans
.UNINDENT
.SS Bad Request
.sp
If a request contains malformed data (like invalid JSON) the Peer MUST respond
with a HTTP \fI\%400 Bad Request\fP and \fBbad_request\fP as error type:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "error": "bad_request",
    "reason": "invalid json"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Unauthorized
.sp
If a Peer REQUIRES credentials be included with the request and the request
does not contain acceptable credentials then the Peer MUST respond with the
HTTP \fI\%401 Unauthorized\fP and \fBunauthorized\fP as error type:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "error": "unauthorized",
    "reason": "Name or password is incorrect"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Forbidden
.sp
If a Peer receives valid user credentials, but the requester does not have
sufficient permissions to perform the operation then the Peer
MUST respond with a HTTP \fI\%403 Forbidden\fP and \fBforbidden\fP as error type:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "error": "forbidden",
    "reason": "You may only update your own user document."
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Resource Not Found
.sp
If the requested resource, Database or Document wasn\(aqt found on a Peer, the Peer
MUST respond with a HTTP \fI\%404 Not Found\fP and \fBnot_found\fP as error type:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "error": "not_found",
    "reason": "database \e"target\e" does not exists"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Method Not Allowed
.sp
If an unsupported method was used then the Peer MUST respond with a
HTTP \fI\%405 Method Not Allowed\fP and \fBmethod_not_allowed\fP as error type:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "error": "method_not_allowed",
    "reason": "Only GET, PUT, DELETE allowed"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Resource Conflict
.sp
A resource conflict error occurs when there are concurrent updates of the same
resource by multiple clients. In this case the Peer MUST respond with a HTTP
\fI\%409 Conflict\fP and \fBconflict\fP as error type:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "error": "conflict",
    "reason": "document update conflict"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Precondition Failed
.sp
The HTTP \fI\%412 Precondition Failed\fP response may be sent in case of an attempt to
create a Database (error type \fBdb_exists\fP) that already exists
or some attachment information is missing (error type \fBmissing_stub\fP).
There is no explicit error type restrictions, but it is RECOMMEND to use error
types that are previously mentioned:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "error": "db_exists",
    "reason": "database \e"target\e" exists"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Server Error
.sp
Raised in case an error is \fIfatal\fP and the Replicator cannot do anything to
continue Replication. In this case the Replicator MUST return a HTTP
\fI\%500 Internal Server Error\fP response with an error description (no restrictions on error
type applied):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "error": "worker_died",
    "reason": "kaboom!"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Optimisations
.sp
There are RECOMMENDED approaches to optimize the Replication process:
.INDENT 0.0
.IP \(bu 2
Keep the number of HTTP requests at a reasonable minimum
.IP \(bu 2
Try to work with a connection pool and make parallel/multiple requests
whenever possible
.IP \(bu 2
Don\(aqt close sockets after each request: respect the keep\-alive option
.IP \(bu 2
Use continuous sessions (cookies, etc.) to reduce authentication overhead
.IP \(bu 2
Try to use bulk requests for every operations with Documents
.IP \(bu 2
Find out optimal batch size for Changes feed processing
.IP \(bu 2
Preserve Replication Logs and resume Replication from the last Checkpoint
whenever possible
.IP \(bu 2
Optimize filter functions: let them run as fast as possible
.IP \(bu 2
Get ready for surprises: networks are very unstable environments
.UNINDENT
.SS API Reference
.SS Common Methods
.INDENT 0.0
.IP \(bu 2
\fBHEAD /{db}\fP \-\- Check Database existence
.IP \(bu 2
\fBGET /{db}\fP \-\- Retrieve Database information
.IP \(bu 2
\fBGET /{db}/_local/{docid}\fP \-\- Read the last Checkpoint
.IP \(bu 2
\fBPUT /{db}/_local/{docid}\fP \-\- Save a new Checkpoint
.UNINDENT
.SS For Target
.INDENT 0.0
.IP \(bu 2
\fBPUT /{db}\fP \-\- Create Target if it not exists and the option was provided
.IP \(bu 2
\fBPOST /{db}/_revs_diff\fP \-\- Locate Revisions that are not known to Target
.IP \(bu 2
\fBPOST /{db}/_bulk_docs\fP \-\- Upload Revisions to Target
.IP \(bu 2
\fBPUT /{db}/{docid}\fP \-\- Upload a single Document with attachments to Target
.IP \(bu 2
\fBPOST /{db}/_ensure_full_commit\fP \-\- Ensure that all changes are stored
on disk
.UNINDENT
.SS For Source
.INDENT 0.0
.IP \(bu 2
\fBGET /{db}/_changes\fP \-\- Fetch changes since the last pull of Source
.IP \(bu 2
\fBPOST /{db}/_changes\fP \-\- Fetch changes for specified Document IDs since
the last pull of Source
.IP \(bu 2
\fBGET /{db}/{docid}\fP \-\- Retrieve a single Document from Source
with attachments
.UNINDENT
.SS Reference
.INDENT 0.0
.IP \(bu 2
\fI\%Refuge RCouch wiki\fP
.IP \(bu 2
\fI\%CouchBase Lite IOS wiki\fP
.IP \(bu 2
\fI\%CouchDB documentation\fP
.UNINDENT
.SS Replicator Database
.sp
Changed in version 2.1.0: Scheduling replicator was introduced.
Replication states, by default are not written back to documents
anymore. There are new replication job states and new API endpoints
\fB_scheduler/jobs\fP and \fB_scheduler/docs\fP\&.

.sp
The \fB_replicator\fP database works like any other in CouchDB, but
documents added to it will trigger replications. Create (\fBPUT\fP or
\fBPOST\fP) a document to start replication. \fBDELETE\fP a replication
document to cancel an ongoing replication.
.sp
These documents have exactly the same content as the JSON objects we
used to \fBPOST\fP to \fB_replicate\fP (fields \fBsource\fP, \fBtarget\fP,
\fBcreate_target\fP, \fBcontinuous\fP, \fBdoc_ids\fP, \fBfilter\fP,
\fBquery_params\fP, \fBuse_checkpoints\fP, \fBcheckpoint_interval\fP).
.sp
Replication documents can have a user defined \fB_id\fP (handy for finding
a specific replication request later). Design Documents (and \fB_local\fP
documents) added to the replicator database are ignored.
.sp
The default replicator database is \fB_replicator\fP\&. Additional
replicator databases can be created. To be recognized as such by the
system, their database names should end with \fB/_replicator\fP\&.
.SS Basics
.sp
Let\(aqs say you POST the following document into \fB_replicator\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "my_rep",
    "source": "http://myserver.com/foo",
    "target":  "http://user:pass@localhost:5984/bar",
    "create_target":  true,
    "continuous": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the couch log you\(aqll see 2 entries like these:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[notice] 2017\-04\-05T17:16:19.646716Z node1@127.0.0.1 <0.29432.0> \-\-\-\-\-\-\-\- Replication \(ga"a81a78e822837e66df423d54279c15fe+continuous+create_target"\(ga is using:
    4 worker processes
    a worker batch size of 500
    20 HTTP connections
    a connection timeout of 30000 milliseconds
    10 retries per request
    socket options are: [{keepalive,true},{nodelay,false}]
[notice] 2017\-04\-05T17:16:19.646759Z node1@127.0.0.1 <0.29432.0> \-\-\-\-\-\-\-\- Document \(gamy_rep\(ga triggered replication \(gaa81a78e822837e66df423d54279c15fe+continuous+create_target\(ga
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Replication state of this document can then be queried from
\fBhttp://adm:pass@localhost:5984/_scheduler/docs/_replicator/my_rep\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "database": "_replicator",
    "doc_id": "my_rep",
    "error_count": 0,
    "id": "a81a78e822837e66df423d54279c15fe+continuous+create_target",
    "info": null,
    "last_updated": "2017\-04\-05T19:18:15Z",
    "node": "node1@127.0.0.1",
    "proxy": null,
    "source": "http://myserver.com/foo/",
    "start_time": "2017\-04\-05T19:18:15Z",
    "state": "running",
    "target": "http://adm:*****@localhost:5984/bar/"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The state is \fBrunning\fP\&. That means replicator has scheduled this
replication job to run. Replication document contents stay the same.
Previously, before version 2.1, it was updated with the \fBtriggered\fP
state.
.sp
The replication job will also appear in
.sp
\fBhttp://adm:pass@localhost:5984/_scheduler/jobs\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "jobs": [
        {
            "database": "_replicator",
            "doc_id": "my_rep",
            "history": [
                {
                    "timestamp": "2017\-04\-05T19:18:15Z",
                    "type": "started"
                },
                {
                    "timestamp": "2017\-04\-05T19:18:15Z",
                    "type": "added"
                }
            ],
            "id": "a81a78e822837e66df423d54279c15fe+continuous+create_target",
            "node": "node1@127.0.0.1",
            "pid": "<0.1174.0>",
            "source": "http://myserver.com/foo/",
            "start_time": "2017\-04\-05T19:18:15Z",
            "target": "http://adm:*****@localhost:5984/bar/",
            "user": null
        }
    ],
    "offset": 0,
    "total_rows": 1
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB_scheduler/jobs\fP shows more information such as a detailed history of
state changes. However if replication has completed or has failed to
start it would not appear here, only in \fB_scheduler/docs\fP\&.
.sp
If there is an error, for example if the source database is missing, the
replication job will crash and retry after a wait period. Each
successive crash will result in a longer waiting period.
.sp
For example, POST\-ing this document
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "my_rep_crashing",
    "source": "http://myserver.com/missing",
    "target":  "http://user:pass@localhost:5984/bar",
    "create_target":  true,
    "continuous": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
when source database is missing, will result in periodic starts and
crashes with an increasingly larger interval. The \fBhistory\fP list from
\fB_scheduler/jobs\fP for this replication would look something like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
      {
          "reason": "db_not_found: could not open http://adm:*****@localhost:5984/missing/",
          "timestamp": "2017\-04\-05T20:55:10Z",
          "type": "crashed"
      },
      {
          "timestamp": "2017\-04\-05T20:55:10Z",
          "type": "started"
      },
      {
          "reason": "db_not_found: could not open http://adm:*****@localhost:5984/missing/",
          "timestamp": "2017\-04\-05T20:47:10Z",
          "type": "crashed"
      },
      {
          "timestamp": "2017\-04\-05T20:47:10Z",
          "type": "started"
      }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB_scheduler/docs\fP shows a shorter summary:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
      "database": "_replicator",
      "doc_id": "my_rep_crashing",
      "error_count": 6,
      "id": "cb78391640ed34e9578e638d9bb00e44+create_target",
      "info": "db_not_found: could not open http://adm:*****@localhost:5984/missing/",
      "last_updated": "2017\-04\-05T20:55:10Z",
      "node": "node1@127.0.0.1",
      "proxy": null,
      "source": "http://adm:*****@localhost:5984/missing/",
      "start_time": "2017\-04\-05T20:38:34Z",
      "state": "crashing",
      "target": "http://adm:*****@localhost:5984/bar/"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Repeated crashes are described as a \fBcrashing\fP state. \fB\-ing\fP suffix
implies this is a temporary state. User at any moment could create the
missing database and then replication job could return back to the
normal.
.SS Documents describing the same replication
.sp
Lets suppose 2 documents are added to the \fB_replicator\fP database in
the following order:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "my_rep",
    "source": "http://myserver.com/foo",
    "target":  "http://user:pass@localhost:5984/bar",
    "create_target":  true,
    "continuous": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "my_rep_dup",
    "source": "http://myserver.com/foo",
    "target":  "http://user:pass@localhost:5984/bar",
    "create_target":  true,
    "continuous": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Both describe exactly the same replication (only their \fB_ids\fP differ).
In this case document \fBmy_rep\fP triggers the replication, while
\fBmy_rep_dup\(ga\fP will fail. Inspecting \fB_scheduler/docs\fP explains
exactly why it failed:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "database": "_replicator",
    "doc_id": "my_rep_dup",
    "error_count": 1,
    "id": null,
    "info": "Replication \(gaa81a78e822837e66df423d54279c15fe+continuous+create_target\(ga specified by document \(gamy_rep_dup\(ga already started, triggered by document \(gamy_rep\(ga from db \(ga_replicator\(ga",
    "last_updated": "2017\-04\-05T21:41:51Z",
    "source": "http://myserver.com/foo/",
    "start_time": "2017\-04\-05T21:41:51Z",
    "state": "failed",
    "target": "http://adm:*****@localhost:5984/bar/"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Notice the state for this replication is \fBfailed\fP\&. Unlike
\fBcrashing\fP, \fBfailed\fP state is terminal. As long as both documents
are present the replicator will not retry to run \fBmy_rep_dup\fP
replication. Another reason could be malformed documents. For example if
worker process count is specified as a string (\fB"worker_processes": "a
few"\fP) instead of an integer, failure will occur.
.SS Replication Scheduler
.sp
Once replication jobs are created they are managed by the scheduler. The
scheduler is the replication component which periodically stops some
jobs and starts others. This behavior makes it possible to have a
larger number of jobs than the cluster could run simultaneously.
Replication jobs which keep failing will be penalized and forced to
wait. The wait time increases exponentially with each consecutive
failure.
.sp
When deciding which jobs to stop and which to start, the scheduler uses
a round\-robin algorithm to ensure fairness. Jobs which have been running
the longest time will be stopped, and jobs which have been waiting the
longest time will be started.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Non\-continuous (normal) replication are treated differently
once they start running. See \fINormal vs Continuous
Replications\fP section for more information.
.UNINDENT
.UNINDENT
.sp
The behavior of the scheduler can configured via \fBmax_jobs\fP,
\fBinterval\fP and \fBmax_churn\fP options. See \fIReplicator
configuration section\fP for additional information.
.SS Replication states
.sp
Replication jobs during their life\-cycle pass through various states.
This is a diagram of all the states and transitions between them:
.INDENT 0.0
.INDENT 2.5
[image: Replication state diagram]
[image]
Replication state diagram.UNINDENT
.UNINDENT
.sp
Blue and yellow shapes represent replication job states.
.sp
Trapezoidal shapes represent external APIs, that\(aqs how users interact
with the replicator. Writing documents to \fB_replicator\fP is the
preferred way of creating replications, but posting to the
\fB_replicate\fP HTTP endpoint is also supported.
.sp
Six\-sided shapes are internal API boundaries. They are optional for this
diagram and are only shown as additional information to help clarify how the
replicator works. There are two processing stages: the first is where
replication documents are parsed and become replication jobs, and the second is
the scheduler itself. The scheduler runs replication jobs, periodically
stopping and starting some. Jobs posted via the \fB_replicate\fP endpoint bypass
the first component and go straight to the scheduler.
.SS States descriptions
.sp
Before explaining the details of each state, it is worth noticing that
color and shape of each state in the diagram:
.sp
\fIBlue\fP vs \fIyellow\fP partitions states into "healthy" and "unhealthy",
respectively. Unhealthy states indicate something has gone wrong and it
might need user\(aqs attention.
.sp
\fIRectangle\fP vs \fIoval\fP separates "terminal" states from "non\-terminal"
ones. Terminal states are those which will not transition to other
states any more. Informally, jobs in a terminal state will not be
retried and don\(aqt consume memory or CPU resources.
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fBInitializing\fP: Indicates replicator has noticed the change from
the replication document. Jobs should transition quickly through this
state. Being stuck here for a while could mean there is an internal
error.
.IP \(bu 2
\fBFailed\fP: Replication document could not be processed and turned
into a valid replication job for the scheduler. This state is
terminal and requires user intervention to fix the problem. A typical
reason for ending up in this state is a malformed document. For
example, specifying an integer for a parameter which accepts a
boolean. Another reason for failure could be specifying a duplicate
replication. A duplicate replication is a replication with identical
parameters but a different document ID.
.IP \(bu 2
\fBError\fP: Replication document update could not be turned into a
replication job. Unlike the \fBFailed\fP state, this one is temporary,
and replicator will keep retrying periodically. There is an
exponential backoff applied in case of consecutive failures. The main
reason this state exists is to handle filtered replications with
custom user functions. Filter function content is needed in order to
calculate the replication ID. A replication job could not be created
until the function code is retrieved. Because retrieval happens over
the network, temporary failures have to be handled.
.IP \(bu 2
\fBRunning\fP: Replication job is running normally. This means, there
might be a change feed open, and if changes are noticed, they would
be processed and posted to the target. Job is still considered
\fBRunning\fP even if its workers are currently not streaming changes
from source to target and are just waiting on the change feed.
Continuous replications will most likely end up in this state.
.IP \(bu 2
\fBPending\fP: Replication job is not running and is waiting its turn.
This state is reached when the number of replication jobs added to
the scheduler exceeds \fBreplicator.max_jobs\fP\&. In that case scheduler
will periodically stop and start subsets of jobs trying to give each
one a fair chance at making progress.
.IP \(bu 2
\fBCrashing\fP: Replication job has been successfully added to the
replication scheduler. However an error was encountered during the
last run. Error could be a network failure, a missing source
database, a permissions error, etc. Repeated consecutive crashes
result in an exponential backoff. This state is considered temporary
(non\-terminal) and replication jobs will be periodically retried.
Maximum backoff interval is around a day or so.
.IP \(bu 2
\fBCompleted\fP: This is a terminal, successful state for
non\-continuous replications. Once in this state the replication is
"forgotten" by the scheduler and it doesn\(aqt consume any more CPU or
memory resources. Continuous replication jobs will never reach this
state.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Normal vs Continuous Replications
.sp
Normal (non\-continuous) replications once started will be allowed to run
to completion. That behavior is to preserve their semantics of
replicating a snapshot of the source database to the target. For example
if new documents are added to the source after the replication are
started, those updates should not show up on the target database.
Stopping and restring a normal replication would violate that
constraint.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
When there is a mix of continuous and normal replications,
once normal replication are scheduled to run, they might temporarily
starve continuous replication jobs.
.UNINDENT
.UNINDENT
.sp
However, normal replications will still be stopped and rescheduled if an
operator reduces the value for the maximum number of replications. This
is so that if an operator decides replications are overwhelming a node
that it has the ability to recover. Any stopped replications will be
resubmitted to the queue to be rescheduled.
.SS Compatibility Mode
.sp
Previous version of CouchDB replicator wrote state updates back to
replication documents. In cases where user code programmatically read
those states, there is compatibility mode enabled via a configuration
setting:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
update_docs = true
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In this mode replicator will continue to write state updates to the
documents.
.sp
To effectively disable the scheduling behavior, which periodically stop
and starts jobs, set \fBmax_jobs\fP configuration setting to a large
number. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[replicator]
max_jobs = 9999999
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
See \fIReplicator configuration section\fP for
other replicator configuration options.
.SS Canceling replications
.sp
To cancel a replication simply \fBDELETE\fP the document which triggered
the replication. To update a replication, for example, change the number
of worker or the source, simply update the document with new data. If
there is extra application\-specific data in the replication documents,
that data is ignored by the replicator.
.SS Server restart
.sp
When CouchDB is restarted, it checks its \fB_replicator\fP databases and
restarts replications described by documents if they are not already in
in a \fBcompleted\fP or \fBfailed\fP state. If they are, they are ignored.
.SS Clustering
.sp
In a cluster, replication jobs are balanced evenly among all the nodes
nodes such that a replication job runs on only one node at a time.
.sp
Every time there is a cluster membership change, that is when nodes are
added or removed, as it happens in a rolling reboot, replicator
application will notice the change, rescan all the document and running
replication, and re\-evaluate their cluster placement in light of the new
set of live nodes. This mechanism also provides replication fail\-over in
case a node fails. Replication jobs started from replication documents
(but not those started from \fB_replicate\fP HTTP endpoint) will
automatically migrate one of the live nodes.
.SS Additional Replicator Databases
.sp
Imagine replicator database (\fB_replicator\fP) has these two documents
which represent pull replications from servers A and B:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "rep_from_A",
    "source":  "http://aserver.com:5984/foo",
    "target":  "http://user:pass@localhost:5984/foo_a",
    "continuous":  true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "rep_from_B",
    "source":  "http://bserver.com:5984/foo",
    "target":  "http://user:pass@localhost:5984/foo_b",
    "continuous":  true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now without stopping and restarting CouchDB, add another replicator
database. For example \fBanother/_replicator\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ curl \-X PUT http://user:pass@localhost:5984/another%2F_replicator/
{"ok":true}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
A / character in a database name, when used in a URL, should be escaped.
.UNINDENT
.UNINDENT
.sp
Then add a replication document to the new replicator database:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "rep_from_X",
    "source":  "http://xserver.com:5984/foo",
    "target":  "http://user:pass@localhost:5984/foo_x",
    "continuous":  true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
From now on, there are three replications active in the system: two
replications from A and B, and a new one from X.
.sp
Then remove the additional replicator database:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ curl \-X DELETE http://user:pass@localhost:5984/another%2F_replicator/
{"ok":true}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After this operation, replication pulling from server X will be stopped
and the replications in the \fB_replicator\fP database (pulling from
servers A and B) will continue.
.SS Replicating the replicator database
.sp
Imagine you have in server C a replicator database with the two
following pull replication documents in it:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
     "_id": "rep_from_A",
     "source":  "http://aserver.com:5984/foo",
     "target":  "http://user:pass@localhost:5984/foo_a",
     "continuous":  true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
     "_id": "rep_from_B",
     "source":  "http://bserver.com:5984/foo",
     "target":  "http://user:pass@localhost:5984/foo_b",
     "continuous":  true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now you would like to have the same pull replications going on in server
D, that is, you would like to have server D pull replicating from
servers A and B. You have two options:
.INDENT 0.0
.IP \(bu 2
Explicitly add two documents to server\(aqs D replicator database
.IP \(bu 2
Replicate server\(aqs C replicator database into server\(aqs D replicator
database
.UNINDENT
.sp
Both alternatives accomplish exactly the same goal.
.SS Delegations
.sp
Replication documents can have a custom \fBuser_ctx\fP property. This
property defines the user context under which a replication runs. For
the old way of triggering a replication (POSTing to \fB/_replicate/\fP),
this property is not needed. That\(aqs because information about the
authenticated user is readily available during the replication, which is
not persistent in that case. Now, with the replicator database, the
problem is that information about which user is starting a particular
replication is only present when the replication document is written.
The information in the replication document and the replication itself
are persistent, however. This implementation detail implies that in the
case of a non\-admin user, a \fBuser_ctx\fP property containing the user\(aqs
name and a subset of their roles must be defined in the replication
document. This is enforced by the document update validation function
present in the default design document of the replicator database. The
validation function also ensures that non\-admin users are unable to set
the value of the user context\(aqs \fBname\fP property to anything other than
their own user name. The same principle applies for roles.
.sp
For admins, the \fBuser_ctx\fP property is optional, and if it\(aqs missing
it defaults to a user context with name \fBnull\fP and an empty list of
roles, which means design documents won\(aqt be written to local targets.
If writing design documents to local targets is desired, the role
\fB_admin\fP must be present in the user context\(aqs list of roles.
.sp
Also, for admins the \fBuser_ctx\fP property can be used to trigger a
replication on behalf of another user. This is the user context that
will be passed to local target database document validation functions.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The \fBuser_ctx\fP property only has effect for local endpoints.
.UNINDENT
.UNINDENT
.sp
Example delegated replication document:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "my_rep",
    "source":  "http://bserver.com:5984/foo",
    "target":  "http://user:pass@localhost:5984/bar",
    "continuous":  true,
    "user_ctx": {
        "name": "joe",
        "roles": ["erlanger", "researcher"]
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
As stated before, the \fBuser_ctx\fP property is optional for admins,
while being mandatory for regular (non\-admin) users. When the roles
property of \fBuser_ctx\fP is missing, it defaults to the empty list
\fB[]\fP\&.
.SS Selector Objects
.sp
Including a Selector Object in the replication document enables you to
use a query expression to determine if a document should be included in
the replication.
.sp
The selector specifies fields in the document, and provides an expression
to evaluate with the field content or other data. If the expression resolves
to \fBtrue\fP, the document is replicated.
.sp
The selector object must:
.INDENT 0.0
.IP \(bu 2
Be structured as valid JSON.
.IP \(bu 2
Contain a valid query expression.
.UNINDENT
.sp
The syntax for a selector is the same as the
\fIselectorsyntax\fP used for \fI_find\fP\&.
.sp
Using a selector is significantly more efficient than using a JavaScript
filter function, and is the recommended option if filtering on document
attributes only.
.SS Replication and conflict model
.sp
Let\(aqs take the following example to illustrate replication and conflict
handling.
.INDENT 0.0
.IP \(bu 2
Alice has a document containing Bob\(aqs business card;
.IP \(bu 2
She synchronizes it between her desktop PC and her laptop;
.IP \(bu 2
On the desktop PC, she updates Bob\(aqs E\-mail address;
Without syncing again, she updates Bob\(aqs mobile number on the laptop;
.IP \(bu 2
Then she replicates the two to each other again.
.UNINDENT
.sp
So on the desktop the document has Bob\(aqs new E\-mail address and his old mobile
number, and on the laptop it has his old E\-mail address and his new mobile
number.
.sp
The question is, what happens to these conflicting updated documents?
.SS CouchDB replication
.sp
CouchDB works with JSON documents inside databases. Replication of databases
takes place over HTTP, and can be either a "pull" or a "push", but is
unidirectional. So the easiest way to perform a full sync is to do a "push"
followed by a "pull" (or vice versa).
.sp
So, Alice creates v1 and sync it. She updates to v2a on one side and v2b on the
other, and then replicates. What happens?
.sp
The answer is simple: both versions exist on both sides!
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
  DESKTOP                          LAPTOP
+\-\-\-\-\-\-\-\-\-+
| /db/bob |                                     INITIAL
|   v1    |                                     CREATION
+\-\-\-\-\-\-\-\-\-+

+\-\-\-\-\-\-\-\-\-+                      +\-\-\-\-\-\-\-\-\-+
| /db/bob |  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\->  | /db/bob |     PUSH
|   v1    |                      |   v1    |
+\-\-\-\-\-\-\-\-\-+                      +\-\-\-\-\-\-\-\-\-+

+\-\-\-\-\-\-\-\-\-+                      +\-\-\-\-\-\-\-\-\-+  INDEPENDENT
| /db/bob |                      | /db/bob |     LOCAL
|   v2a   |                      |   v2b   |     EDITS
+\-\-\-\-\-\-\-\-\-+                      +\-\-\-\-\-\-\-\-\-+

+\-\-\-\-\-\-\-\-\-+                      +\-\-\-\-\-\-\-\-\-+
| /db/bob |  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\->  | /db/bob |     PUSH
|   v2a   |                      |   v2a   |
+\-\-\-\-\-\-\-\-\-+                      |   v2b   |
                                 +\-\-\-\-\-\-\-\-\-+

+\-\-\-\-\-\-\-\-\-+                      +\-\-\-\-\-\-\-\-\-+
| /db/bob |  <\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-  | /db/bob |     PULL
|   v2a   |                      |   v2a   |
|   v2b   |                      |   v2b   |
+\-\-\-\-\-\-\-\-\-+                      +\-\-\-\-\-\-\-\-\-+
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After all, this is not a file system, so there\(aqs no restriction that only one
document can exist with the name /db/bob. These are just "conflicting" revisions
under the same name.
.sp
Because the changes are always replicated, the data is safe. Both machines have
identical copies of both documents, so failure of a hard drive on either side
won\(aqt lose any of the changes.
.sp
Another thing to notice is that peers do not have to be configured or tracked.
You can do regular replications to peers, or you can do one\-off, ad\-hoc pushes
or pulls. After the replication has taken place, there is no record kept of
which peer any particular document or revision came from.
.sp
So the question now is: what happens when you try to read /db/bob? By default,
CouchDB picks one arbitrary revision as the "winner", using a deterministic
algorithm so that the same choice will be made on all peers. The same happens
with views: the deterministically\-chosen winner is the only revision fed into
your map function.
.sp
Let\(aqs say that the winner is v2a. On the desktop, if Alice reads the document
she\(aqll see v2a, which is what she saved there. But on the laptop, after
replication, she\(aqll also see only v2a. It could look as if the changes she made
there have been lost \- but of course they have not, they have just been hidden
away as a conflicting revision. But eventually she\(aqll need these changes merged
into Bob\(aqs business card, otherwise they will effectively have been lost.
.sp
Any sensible business\-card application will, at minimum, have to present the
conflicting versions to Alice and allow her to create a new version
incorporating information from them all. Ideally it would merge the updates
itself.
.SS Conflict avoidance
.sp
When working on a single node, CouchDB will avoid creating conflicting revisions
by returning a \fI\%409 Conflict\fP error. This is because, when you
PUT a new version of a document, you must give the \fB_rev\fP of the previous
version. If that \fB_rev\fP has already been superseded, the update is rejected
with a  \fI\%409 Conflict\fP response.
.sp
So imagine two users on the same node are fetching Bob\(aqs business card, updating
it concurrently, and writing it back:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USER1    \-\-\-\-\-\-\-\-\-\-\->  GET /db/bob
         <\-\-\-\-\-\-\-\-\-\-\-  {"_rev":"1\-aaa", ...}

USER2    \-\-\-\-\-\-\-\-\-\-\->  GET /db/bob
         <\-\-\-\-\-\-\-\-\-\-\-  {"_rev":"1\-aaa", ...}

USER1    \-\-\-\-\-\-\-\-\-\-\->  PUT /db/bob?rev=1\-aaa
         <\-\-\-\-\-\-\-\-\-\-\-  {"_rev":"2\-bbb", ...}

USER2    \-\-\-\-\-\-\-\-\-\-\->  PUT /db/bob?rev=1\-aaa
         <\-\-\-\-\-\-\-\-\-\-\-  409 Conflict  (not saved)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
User2\(aqs changes are rejected, so it\(aqs up to the app to fetch /db/bob again,
and either:
.INDENT 0.0
.IP 1. 3
apply the same changes as were applied to the earlier revision, and submit
a new PUT
.IP 2. 3
redisplay the document so the user has to edit it again
.IP 3. 3
just overwrite it with the document being saved before (which is not
advisable, as user1\(aqs changes will be silently lost)
.UNINDENT
.sp
So when working in this mode, your application still has to be able to handle
these conflicts and have a suitable retry strategy, but these conflicts never
end up inside the database itself.
.SS Revision tree
.sp
When you update a document in CouchDB, it keeps a list of the previous
revisions. In the case where conflicting updates are introduced, this history
branches into a tree, where the current conflicting revisions for this document
form the tips (leaf nodes) of this tree:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
  ,\-\-> r2a
r1 \-\-> r2b
  \(ga\-\-> r2c
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Each branch can then extend its history \- for example if you read revision r2b
and then PUT with ?rev=r2b then you will make a new revision along that
particular branch.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
  ,\-\-> r2a \-> r3a \-> r4a
r1 \-\-> r2b \-> r3b
  \(ga\-\-> r2c \-> r3c
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Here, (r4a, r3b, r3c) are the set of conflicting revisions. The way you resolve
a conflict is to delete the leaf nodes along the other branches. So when you
combine (r4a+r3b+r3c) into a single merged document, you would replace r4a and
delete r3b and r3c.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
  ,\-\-> r2a \-> r3a \-> r4a \-> r5a
r1 \-\-> r2b \-> r3b \-> (r4b deleted)
  \(ga\-\-> r2c \-> r3c \-> (r4c deleted)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that r4b and r4c still exist as leaf nodes in the history tree, but as
deleted docs. You can retrieve them but they will be marked \fB"_deleted":true\fP\&.
.sp
When you compact a database, the bodies of all the non\-leaf documents are
discarded. However, the list of historical _revs is retained, for the benefit of
later conflict resolution in case you meet any old replicas of the database at
some time in future. There is "revision pruning" to stop this getting
arbitrarily large.
.SS Working with conflicting documents
.sp
The basic \fI:get:\(ga/{doc}/{docid}\(ga\fP operation will not show you any
information about conflicts. You see only the deterministically\-chosen winner,
and get no indication as to whether other conflicting revisions exist or not:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id":"test",
    "_rev":"2\-b91bb807b4685080c6a651115ff558f5",
    "hello":"bar"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you do \fBGET /db/test?conflicts=true\fP, and the document is in a conflict
state, then you will get the winner plus a _conflicts member containing an array
of the revs of the other, conflicting revision(s). You can then fetch them
individually using subsequent \fBGET /db/test?rev=xxxx\fP operations:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id":"test",
    "_rev":"2\-b91bb807b4685080c6a651115ff558f5",
    "hello":"bar",
    "_conflicts":[
        "2\-65db2a11b5172bf928e3bcf59f728970",
        "2\-5bc3c6319edf62d4c624277fdd0ae191"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you do \fBGET /db/test?open_revs=all\fP then you will get all the leaf nodes of
the revision tree. This will give you all the current conflicts, but will also
give you leaf nodes which have been deleted (i.e. parts of the conflict history
which have since been resolved). You can remove these by filtering out documents
with \fB"_deleted":true\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    {"ok":{"_id":"test","_rev":"2\-5bc3c6319edf62d4c624277fdd0ae191","hello":"foo"}},
    {"ok":{"_id":"test","_rev":"2\-65db2a11b5172bf928e3bcf59f728970","hello":"baz"}},
    {"ok":{"_id":"test","_rev":"2\-b91bb807b4685080c6a651115ff558f5","hello":"bar"}}
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fB"ok"\fP tag is an artifact of \fBopen_revs\fP, which also lets you list
explicit revisions as a JSON array, e.g. \fBopen_revs=[rev1,rev2,rev3]\fP\&. In this
form, it would be possible to request a revision which is now missing, because
the database has been compacted.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The order of revisions returned by \fBopen_revs=all\fP is \fBNOT\fP related to
the deterministic "winning" algorithm. In the above example, the winning
revision is 2\-b91b... and happens to be returned last, but in other cases it
can be returned in a different position.
.UNINDENT
.UNINDENT
.sp
Once you have retrieved all the conflicting revisions, your application can then
choose to display them all to the user. Or it could attempt to merge them, write
back the merged version, and delete the conflicting versions \- that is, to
resolve the conflict permanently.
.sp
As described above, you need to update one revision and delete all the
conflicting revisions explicitly. This can be done using a single \fIPOST\fP to
\fB_bulk_docs\fP, setting \fB"_deleted":true\fP on those revisions you wish to
delete.
.SS Multiple document API
.sp
You can fetch multiple documents at once using \fBinclude_docs=true\fP on a view.
However, a \fBconflicts=true\fP request is ignored; the "doc" part of the value
never includes a \fB_conflicts\fP member. Hence you would need to do another query
to determine for each document whether it is in a conflicting state:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ curl \(aqhttp://127.0.0.1:5984/conflict_test/_all_docs?include_docs=true&conflicts=true\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "total_rows":1,
    "offset":0,
    "rows":[
        {
            "id":"test",
            "key":"test",
            "value":{"rev":"2\-b91bb807b4685080c6a651115ff558f5"},
            "doc":{
                "_id":"test",
                "_rev":"2\-b91bb807b4685080c6a651115ff558f5",
                "hello":"bar"
            }
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ curl \(aqhttp://127.0.0.1:5984/conflict_test/test?conflicts=true\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id":"test",
    "_rev":"2\-b91bb807b4685080c6a651115ff558f5",
    "hello":"bar",
    "_conflicts":[
        "2\-65db2a11b5172bf928e3bcf59f728970",
        "2\-5bc3c6319edf62d4c624277fdd0ae191"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS View map functions
.sp
Views only get the winning revision of a document. However they do also get a
\fB_conflicts\fP member if there are any conflicting revisions. This means you can
write a view whose job is specifically to locate documents with conflicts.
Here is a simple map function which achieves this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    if (doc._conflicts) {
        emit(null, [doc._rev].concat(doc._conflicts));
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
which gives the following output:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "total_rows":1,
    "offset":0,
    "rows":[
        {
            "id":"test",
            "key":null,
            "value":[
                "2\-b91bb807b4685080c6a651115ff558f5",
                "2\-65db2a11b5172bf928e3bcf59f728970",
                "2\-5bc3c6319edf62d4c624277fdd0ae191"
            ]
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you do this, you can have a separate "sweep" process which periodically scans
your database, looks for documents which have conflicts, fetches the conflicting
revisions, and resolves them.
.sp
Whilst this keeps the main application simple, the problem with this approach is
that there will be a window between a conflict being introduced and it being
resolved. From a user\(aqs viewpoint, this may appear that the document they just
saved successfully may suddenly lose their changes, only to be resurrected some
time later. This may or may not be acceptable.
.sp
Also, it\(aqs easy to forget to start the sweeper, or not to implement it properly,
and this will introduce odd behaviour which will be hard to track down.
.sp
CouchDB\(aqs "winning" revision algorithm may mean that information drops out of a
view until a conflict has been resolved. Consider Bob\(aqs business card again;
suppose Alice has a view which emits mobile numbers, so that her telephony
application can display the caller\(aqs name based on caller ID. If there are
conflicting documents with Bob\(aqs old and new mobile numbers, and they happen to
be resolved in favour of Bob\(aqs old number, then the view won\(aqt be able to
recognise his new one. In this particular case, the application might have
preferred to put information from both the conflicting documents into the view,
but this currently isn\(aqt possible.
.sp
Suggested algorithm to fetch a document with conflict resolution:
.INDENT 0.0
.IP 1. 3
Get document via \fBGET docid?conflicts=true\fP request
.IP 2. 3
For each member in the \fB_conflicts\fP array call \fBGET docid?rev=xxx\fP\&.
If any errors occur at this stage, restart from step 1.
(There could be a race where someone else has already resolved this conflict
and deleted that rev)
.IP 3. 3
Perform application\-specific merging
.IP 4. 3
Write \fB_bulk_docs\fP with an update to the first rev and deletes of the other
revs.
.UNINDENT
.sp
This could either be done on every read (in which case you could replace all
calls to GET in your application with calls to a library which does the above),
or as part of your sweeper code.
.sp
And here is an example of this in Ruby using the low\-level \fI\%RestClient\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
require \(aqrubygems\(aq
require \(aqrest_client\(aq
require \(aqjson\(aq
DB="http://127.0.0.1:5984/conflict_test"

# Write multiple documents
def writem(docs)
    JSON.parse(RestClient.post("#{DB}/_bulk_docs", {
        "docs" => docs,
    }.to_json))
end

# Write one document, return the rev
def write1(doc, id=nil, rev=nil)
    doc[\(aq_id\(aq] = id if id
    doc[\(aq_rev\(aq] = rev if rev
    writem([doc]).first[\(aqrev\(aq]
end

# Read a document, return *all* revs
def read1(id)
    retries = 0
    loop do
        # FIXME: escape id
        res = [JSON.parse(RestClient.get("#{DB}/#{id}?conflicts=true"))]
        if revs = res.first.delete(\(aq_conflicts\(aq)
            begin
                revs.each do |rev|
                    res << JSON.parse(RestClient.get("#{DB}/#{id}?rev=#{rev}"))
                end
            rescue
                retries += 1
                raise if retries >= 5
                next
            end
        end
        return res
    end
end

# Create DB
RestClient.delete DB rescue nil
RestClient.put DB, {}.to_json

# Write a document
rev1 = write1({"hello"=>"xxx"},"test")
p read1("test")

# Make three conflicting versions
write1({"hello"=>"foo"},"test",rev1)
write1({"hello"=>"bar"},"test",rev1)
write1({"hello"=>"baz"},"test",rev1)

res = read1("test")
p res

# Now let\(aqs replace these three with one
res.first[\(aqhello\(aq] = "foo+bar+baz"
res.each_with_index do |r,i|
    unless i == 0
        r.replace({\(aq_id\(aq=>r[\(aq_id\(aq], \(aq_rev\(aq=>r[\(aq_rev\(aq], \(aq_deleted\(aq=>true})
    end
end
writem(res)

p read1("test")
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
An application written this way never has to deal with a \fBPUT 409\fP, and is
automatically multi\-master capable.
.sp
You can see that it\(aqs straightforward enough when you know what you\(aqre doing.
It\(aqs just that CouchDB doesn\(aqt currently provide a convenient HTTP API for
"fetch all conflicting revisions", nor "PUT to supersede these N revisions", so
you need to wrap these yourself. At the time of writing, there are no known
client\-side libraries which provide support for this.
.SS Merging and revision history
.sp
Actually performing the merge is an application\-specific function. It depends
on the structure of your data. Sometimes it will be easy: e.g. if a document
contains a list which is only ever appended to, then you can perform a union of
the two list versions.
.sp
Some merge strategies look at the changes made to an object, compared to its
previous version. This is how Git\(aqs merge function works.
.sp
For example, to merge Bob\(aqs business card versions v2a and v2b, you could look
at the differences between v1 and v2b, and then apply these changes to v2a as
well.
.sp
With CouchDB, you can sometimes get hold of old revisions of a document.
For example, if you fetch \fB/db/bob?rev=v2b&revs_info=true\fP you\(aqll get a list
of the previous revision ids which ended up with revision v2b. Doing the same
for v2a you can find their common ancestor revision. However if the database
has been compacted, the content of that document revision will have been lost.
\fBrevs_info\fP will still show that v1 was an ancestor, but report it as
"missing":
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
BEFORE COMPACTION           AFTER COMPACTION

     ,\-> v2a                     v2a
   v1
     \(ga\-> v2b                     v2b
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
So if you want to work with diffs, the recommended way is to store those diffs
within the new revision itself. That is: when you replace v1 with v2a, include
an extra field or attachment in v2a which says which fields were changed from
v1 to v2a. This unfortunately does mean additional book\-keeping for your
application.
.SS Comparison with other replicating data stores
.sp
The same issues arise with other replicating systems, so it can be instructive
to look at these and see how they compare with CouchDB. Please feel free to add
other examples.
.SS Unison
.sp
\fI\%Unison\fP is a bi\-directional file synchronisation tool. In this case, the
business card would be a file, say \fIbob.vcf\fP\&.
.sp
When you run unison, changes propagate both ways. If a file has changed on one
side but not the other, the new replaces the old. Unison maintains a local state
file so that it knows whether a file has changed since the last successful
replication.
.sp
In our example it has changed on both sides. Only one file called \fIbob.vcf\fP
can exist within the file system. Unison solves the problem by simply ducking
out: the user can choose to replace the remote version with the local version,
or vice versa (both of which would lose data), but the default action is to
leave both sides unchanged.
.sp
From Alice\(aqs point of view, at least this is a simple solution. Whenever she\(aqs
on the desktop she\(aqll see the version she last edited on the desktop, and
whenever she\(aqs on the laptop she\(aqll see the version she last edited there.
.sp
But because no replication has actually taken place, the data is not protected.
If her laptop hard drive dies, she\(aqll lose all her changes made on the laptop;
ditto if her desktop hard drive dies.
.sp
It\(aqs up to her to copy across one of the versions manually (under a different
filename), merge the two, and then finally push the merged version to the other
side.
.sp
Note also that the original file (version v1) has been lost at this point.
So it\(aqs not going to be known from inspection alone whether v2a or v2b has the
most up\-to\-date E\-mail address for Bob, or which version has the most up\-to\-date
mobile number. Alice has to remember which one she entered last.
.SS Git
.sp
\fI\%Git\fP is a well\-known distributed source control system. Like Unison, Git deals
with files. However, Git considers the state of a whole set of files as a single
object, the "tree". Whenever you save an update, you create a "commit" which
points to both the updated tree and the previous commit(s), which in turn point
to the previous tree(s). You therefore have a full history of all the states of
the files. This history forms a branch, and a pointer is kept to the tip of the
branch, from which you can work backwards to any previous state. The "pointer"
is an SHA1 hash of the tip commit.
.sp
If you are replicating with one or more peers, a separate branch is made for
each of those peers. For example, you might have:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
master               \-\- my local branch
remotes/foo/master   \-\- branch on peer \(aqfoo\(aq
remotes/bar/master   \-\- branch on peer \(aqbar\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the regular workflow, replication is a "pull", importing changes from
a remote peer into the local repository. A "pull" does two things: first "fetch"
the state of the peer into the remote tracking branch for that peer; and then
attempt to "merge" those changes into the local branch.
.sp
Now let\(aqs consider the business card. Alice has created a Git repo containing
\fBbob.vcf\fP, and cloned it across to the other machine. The branches look like
this, where \fBAAAAAAAA\fP is the SHA1 of the commit:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-\-\-\-\-\-\-\- desktop \-\-\-\-\-\-\-\-\-\-           \-\-\-\-\-\-\-\-\-\- laptop \-\-\-\-\-\-\-\-\-\-
master: AAAAAAAA                        master: AAAAAAAA
remotes/laptop/master: AAAAAAAA         remotes/desktop/master: AAAAAAAA
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now she makes a change on the desktop, and commits it into the desktop repo;
then she makes a different change on the laptop, and commits it into the laptop
repo:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-\-\-\-\-\-\-\- desktop \-\-\-\-\-\-\-\-\-\-           \-\-\-\-\-\-\-\-\-\- laptop \-\-\-\-\-\-\-\-\-\-
master: BBBBBBBB                        master: CCCCCCCC
remotes/laptop/master: AAAAAAAA         remotes/desktop/master: AAAAAAAA
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now on the desktop she does \fBgit pull laptop\fP\&. First, the remote objects
are copied across into the local repo and the remote tracking branch is
updated:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-\-\-\-\-\-\-\- desktop \-\-\-\-\-\-\-\-\-\-           \-\-\-\-\-\-\-\-\-\- laptop \-\-\-\-\-\-\-\-\-\-
master: BBBBBBBB                        master: CCCCCCCC
remotes/laptop/master: CCCCCCCC         remotes/desktop/master: AAAAAAAA
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The repo still contains AAAAAAAA because commits BBBBBBBB and CCCCCCCC
point to it.
.UNINDENT
.UNINDENT
.sp
Then Git will attempt to merge the changes in. Knowing that
the parent commit to \fBCCCCCCCC\fP is \fBAAAAAAAA\fP, it takes a diff between
\fBAAAAAAAA\fP and \fBCCCCCCCC\fP and tries to apply it to \fBBBBBBBBB\fP\&.
.sp
If this is successful, then you\(aqll get a new version with a merge commit:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-\-\-\-\-\-\-\- desktop \-\-\-\-\-\-\-\-\-\-           \-\-\-\-\-\-\-\-\-\- laptop \-\-\-\-\-\-\-\-\-\-
master: DDDDDDDD                        master: CCCCCCCC
remotes/laptop/master: CCCCCCCC         remotes/desktop/master: AAAAAAAA
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Then Alice has to logon to the laptop and run \fBgit pull desktop\fP\&. A similar
process occurs. The remote tracking branch is updated:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-\-\-\-\-\-\-\- desktop \-\-\-\-\-\-\-\-\-\-           \-\-\-\-\-\-\-\-\-\- laptop \-\-\-\-\-\-\-\-\-\-
master: DDDDDDDD                        master: CCCCCCCC
remotes/laptop/master: CCCCCCCC         remotes/desktop/master: DDDDDDDD
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Then a merge takes place. This is a special case: \fBCCCCCCCC\fP is one of the
parent commits of \fBDDDDDDDD\fP, so the laptop can \fIfast forward\fP update from
\fBCCCCCCCC\fP to \fBDDDDDDDD\fP directly without having to do any complex merging.
This leaves the final state as:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-\-\-\-\-\-\-\- desktop \-\-\-\-\-\-\-\-\-\-           \-\-\-\-\-\-\-\-\-\- laptop \-\-\-\-\-\-\-\-\-\-
master: DDDDDDDD                        master: DDDDDDDD
remotes/laptop/master: CCCCCCCC         remotes/desktop/master: DDDDDDDD
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now this is all and good, but you may wonder how this is relevant when thinking
about CouchDB.
.sp
First, note what happens in the case when the merge algorithm fails.
The changes are still propagated from the remote repo into the local one, and
are available in the remote tracking branch. So, unlike Unison, you know the
data is protected. It\(aqs just that the local working copy may fail to update, or
may diverge from the remote version. It\(aqs up to you to create and commit the
combined version yourself, but you are guaranteed to have all the history you
might need to do this.
.sp
Note that while it is possible to build new merge algorithms into Git,
the standard ones are focused on line\-based changes to source code. They don\(aqt
work well for XML or JSON if it\(aqs presented without any line breaks.
.sp
The other interesting consideration is multiple peers. In this case you have
multiple remote tracking branches, some of which may match your local branch,
some of which may be behind you, and some of which may be ahead of you
(i.e. contain changes that you haven\(aqt yet merged):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
master: AAAAAAAA
remotes/foo/master: BBBBBBBB
remotes/bar/master: CCCCCCCC
remotes/baz/master: AAAAAAAA
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that each peer is explicitly tracked, and therefore has to be explicitly
created. If a peer becomes stale or is no longer needed, it\(aqs up to you to
remove it from your configuration and delete the remote tracking branch.
This is different from CouchDB, which doesn\(aqt keep any peer state in the
database.
.sp
Another difference between CouchDB and Git is that it maintains all history
back to time
zero \- Git compaction keeps diffs between all those versions in order to reduce
size, but CouchDB discards them. If you are constantly updating a document,
the size of a Git repo would grow forever. It is possible (with some effort)
to use "history rewriting" to make Git forget commits earlier than a particular
one.
.SS What is the CouchDB replication protocol? Is it like Git?
.INDENT 0.0
.TP
.B Author
Jason Smith
.TP
.B Date
2011\-01\-29
.TP
.B Source
\fI\%StackOverflow\fP
.UNINDENT
.sp
\fBKey points\fP
.sp
\fBIf you know Git, then you know how Couch replication works.\fP Replicating is
\fIvery\fP similar to pushing or pulling with distributed source managers like Git.
.sp
\fBCouchDB replication does not have its own protocol.\fP A replicator simply
connects to two DBs as a client, then reads from one and writes to the other.
Push replication is reading the local data and updating the remote DB;
pull replication is vice versa.
.INDENT 0.0
.IP \(bu 2
\fBFun fact 1\fP: The replicator is actually an independent Erlang application,
in its own process. It connects to both couches, then reads records from one
and writes them to the other.
.IP \(bu 2
\fBFun fact 2\fP: CouchDB has no way of knowing who is a normal client and who
is a replicator (let alone whether the replication is push or pull).
It all looks like client connections. Some of them read records. Some of them
write records.
.UNINDENT
.sp
\fBEverything flows from the data model\fP
.sp
The replication algorithm is trivial, uninteresting. A trained monkey could
design it. It\(aqs simple because the cleverness is the data model, which has these
useful characteristics:
.INDENT 0.0
.IP 1. 3
Every record in CouchDB is completely independent of all others. That sucks
if you want to do a JOIN or a transaction, but it\(aqs awesome if you want to
write a replicator. Just figure out how to replicate one record, and then
repeat that for each record.
.IP 2. 3
Like Git, records have a linked\-list revision history. A record\(aqs revision ID
is the checksum of its own data. Subsequent revision IDs are checksums of:
the new data, plus the revision ID of the previous.
.IP 3. 3
In addition to application data (\fB{"name": "Jason", "awesome": true}\fP),
every record stores the evolutionary time line of all previous revision IDs
leading up to itself.
.INDENT 3.0
.IP \(bu 2
Exercise: Take a moment of quiet reflection. Consider any two different
records, A and B. If A\(aqs revision ID appears in B\(aqs time line, then B
definitely evolved from A. Now consider Git\(aqs fast\-forward merges.
Do you hear that? That is the sound of your mind being blown.
.UNINDENT
.IP 4. 3
Git isn\(aqt really a linear list. It has forks, when one parent has multiple
children. CouchDB has that too.
.INDENT 3.0
.IP \(bu 2
Exercise: Compare two different records, A and B. A\(aqs revision ID does not
appear in B\(aqs time line; however, one revision ID, C, is in both A\(aqs and
B\(aqs time line. Thus A didn\(aqt evolve from B. B didn\(aqt evolve from A. But
rather, A and B have a common ancestor C. In Git, that is a "fork." In
CouchDB, it\(aqs a "conflict."
.IP \(bu 2
In Git, if both children go on to develop their time lines independently,
that\(aqs cool. Forks totally support that.
.IP \(bu 2
In CouchDB, if both children go on to develop their time lines
independently, that cool too. Conflicts totally support that.
.IP \(bu 2
\fBFun fact 3\fP: CouchDB "conflicts" do not correspond to Git "conflicts."
A Couch conflict is a divergent revision history, what Git calls a "fork."
For this reason the CouchDB community pronounces "conflict" with a silent
\fIn\fP: "co\-flicked."
.UNINDENT
.IP 5. 3
Git also has merges, when one child has multiple parents. CouchDB \fIsort\fP of
has that too.
.INDENT 3.0
.IP \(bu 2
\fBIn the data model, there is no merge.\fP The client simply marks one
time line as deleted and continues to work with the only extant time line.
.IP \(bu 2
\fBIn the application, it feels like a merge.\fP Typically, the client merges
the \fIdata\fP from each time line in an application\-specific way.
Then it writes the new data to the time line. In Git, this is like copying
and pasting the changes from branch A into branch B, then committing to
branch B and deleting branch A. The data was merged, but there was no
\fIgit merge\fP\&.
.IP \(bu 2
These behaviors are different because, in Git, the time line itself is
important; but in CouchDB, the data is important and the time line is
incidental—it\(aqs just there to support replication. That is one reason why
CouchDB\(aqs built\-in revisioning is inappropriate for storing revision data
like a wiki page.
.UNINDENT
.UNINDENT
.sp
\fBFinal notes\fP
.sp
At least one sentence in this writeup (possibly this one) is complete BS.
.SS CouchDB Maintenance
.SS Compaction
.sp
The \fIcompaction\fP operation is the way to reduce disk space usage by removing
unused and old data from database or view index files. This operation is very
similar to the \fIvacuum\fP (\fI\%SQLite\fP ex.) operation available for other database
management systems.
.sp
During compaction of the \fItarget\fP CouchDB creates new file with the \fB\&.compact\fP
extension and transfers only actual data into. Because of this, CouchDB checks
first for the available disk space \- it should be \fItwice greater\fP than the
compacted file\(aqs data.
.sp
When all actual data is successfully transferred to the \fIcompacted\fP file CouchDB
replaces the \fItarget\fP with the \fIcompacted\fP file.
.SS Database Compaction
.sp
Database compaction compresses the database file by removing unused file
sections created during updates. Old documents revisions are replaced with
small amount of metadata called \fItombstone\fP which are used for conflicts
resolution during replication. The number of stored revisions
(and their \fItombstones\fP) can be configured by using the \fB_revs_limit\fP URL endpoint.
.sp
Compaction is manually triggered operation per database and runs as a background
task. To start it for specific database there is need to send HTTP
\fBPOST /{db}/_compact\fP sub\-resource of the target database:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-H "Content\-Type: application/json" \-X POST http://localhost:5984/my_db/_compact
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
On success, HTTP status \fI\%202 Accepted\fP is returned immediately:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 202 Accepted
Cache\-Control: must\-revalidate
Content\-Length: 12
Content\-Type: text/plain; charset=utf\-8
Date: Wed, 19 Jun 2013 09:43:52 GMT
Server: CouchDB (Erlang/OTP)
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"ok":true}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Although the request body is not used you must still specify
\fI\%Content\-Type\fP header with \fIapplication/json\fP value
for the request. If you don\(aqt, you will be aware about with HTTP status
\fI\%415 Unsupported Media Type\fP response:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 415 Unsupported Media Type
Cache\-Control: must\-revalidate
Content\-Length: 78
Content\-Type: application/json
Date: Wed, 19 Jun 2013 09:43:44 GMT
Server: CouchDB (Erlang/OTP)

{"error":"bad_content_type","reason":"Content\-Type must be application/json"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When the compaction is successful started and running it is possible to get
information about it via \fIdatabase information resource\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl http://localhost:5984/my_db
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 246
Content\-Type: application/json
Date: Wed, 19 Jun 2013 16:51:20 GMT
Server: CouchDB (Erlang/OTP)

{
    "committed_update_seq": 76215,
    "compact_running": true,
    "data_size": 3787996,
    "db_name": "my_db",
    "disk_format_version": 6,
    "disk_size": 17703025,
    "doc_count": 5091,
    "doc_del_count": 0,
    "instance_start_time": "0",
    "purge_seq": 0,
    "update_seq": 76215
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that \fBcompaction_running\fP field is \fBtrue\fP indicating that compaction
is actually running. To track the compaction progress you may query the
\fB_active_tasks\fP resource:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl http://localhost:5984/_active_tasks
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 175
Content\-Type: application/json
Date: Wed, 19 Jun 2013 16:27:23 GMT
Server: CouchDB (Erlang/OTP)

[
    {
        "changes_done": 44461,
        "database": "my_db",
        "pid": "<0.218.0>",
        "progress": 58,
        "started_on": 1371659228,
        "total_changes": 76215,
        "type": "database_compaction",
        "updated_on": 1371659241
    }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Views Compaction
.sp
\fIViews\fP are also need compaction like databases, unlike databases views
are compacted by groups per \fIdesign document\fP\&. To start their compaction there
is need to send HTTP \fBPOST /{db}/_compact/{ddoc}\fP request:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-H "Content\-Type: application/json" \-X POST http://localhost:5984/dbname/_compact/designname
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"ok":true}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This compacts the view index from the current version of the specified design
document. The HTTP response code is \fI\%202 Accepted\fP
(like \fIcompaction for databases\fP) and a compaction background
task will be created.
.SS Views cleanup
.sp
View indexes on disk are named after their \fIMD5\fP hash of the view definition.
When you change a view, old indexes remain on disk. To clean up all outdated
view indexes (files named after the MD5 representation of views, that does not
exist anymore) you can trigger a \fIview cleanup\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-H "Content\-Type: application/json" \-X POST http://localhost:5984/dbname/_view_cleanup
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"ok":true}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Automatic Compaction
.sp
While both \fIdatabase\fP and \fIviews\fP
compactions are required be manually triggered, it is also possible to configure
automatic compaction, so that compaction of databases and views is automatically
triggered based on various criteria. Automatic compaction is configured in
CouchDB\(aqs \fIconfiguration files\fP\&.
.sp
The \fBdaemons/compaction_daemon\fP is responsible for triggering
the compaction. It is enabled by default and automatically started.
The criteria for triggering the compactions is configured in the
\fBcompactions\fP section.
.SS Performance
.sp
With up to tens of thousands of documents you will generally find CouchDB to
perform well no matter how you write your code. Once you start getting into
the millions of documents you need to be a lot more careful.
.SS Disk I/O
.SS File Size
.sp
The smaller your file size, the less \fII/O\fP operations there will be,
the more of the file can be cached by CouchDB and the operating system,
the quicker it is to replicate, backup etc. Consequently you should carefully
examine the data you are storing. For example it would be silly to use keys
that are hundreds of characters long, but your program would be hard to
maintain if you only used single character keys. Carefully consider data
that is duplicated by putting it in views.
.SS Disk and File System Performance
.sp
Using faster disks, striped RAID arrays and modern file systems can all speed
up your CouchDB deployment. However, there is one option that can increase
the responsiveness of your CouchDB server when disk performance is a
bottleneck. From the Erlang documentation for the file module:
.INDENT 0.0
.INDENT 3.5
On operating systems with thread support, it is possible to let file
operations be performed in threads of their own, allowing other Erlang
processes to continue executing in parallel with the file operations.
See the \fI\%command line flag +A in erl(1)\fP\&.
.UNINDENT
.UNINDENT
.sp
Setting this argument to a number greater than zero can keep your CouchDB
installation responsive even during periods of heavy disk utilization. The
easiest way to set this option is through the \fBERL_FLAGS\fP environment
variable. For example, to give Erlang four threads with which to perform I/O
operations add the following to \fB(prefix)/etc/defaults/couchdb\fP
(or equivalent):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
export ERL_FLAGS="+A 4"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS System Resource Limits
.sp
One of the problems that administrators run into as their deployments become
large are resource limits imposed by the system and by the application
configuration. Raising these limits can allow your deployment to grow beyond
what the default configuration will support.
.SS CouchDB Configuration Options
.SS delayed_commits
.sp
The \fBdelayed commits\fP allows to
achieve better write performance for some workloads while sacrificing a small
amount of durability. The setting causes CouchDB to wait up to a full second
before committing new data after an update. If the server crashes before
the header is written then any writes since the last commit are lost. Keep this
option enabled on your own risk.
.SS max_dbs_open
.sp
In your \fIconfiguration\fP (local.ini or similar) familiarize
yourself with the \fBcouchdb/max_dbs_open\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[couchdb]
max_dbs_open = 100
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This option places an upper bound on the number of databases that can be
open at one time. CouchDB reference counts database accesses internally and
will close idle databases when it must. Sometimes it is necessary to keep
more than the default open at once, such as in deployments where many databases
will be continuously replicating.
.SS Erlang
.sp
Even if you\(aqve increased the maximum connections CouchDB will allow,
the Erlang runtime system will not allow more than 1024 connections by
default. Adding the following directive to \fB(prefix)/etc/default/couchdb\fP (or
equivalent) will increase this limit (in this case to 4096):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
export ERL_MAX_PORTS=4096
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB versions up to 1.1.x also create Erlang Term Storage (\fI\%ETS\fP) tables for
each replication. If you are using a version of CouchDB older than 1.2 and
must support many replications, also set the \fBERL_MAX_ETS_TABLES\fP variable.
The default is approximately 1400 tables.
.sp
Note that on Mac OS X, Erlang will not actually increase the file descriptor
limit past 1024 (i.e. the system header–defined value of \fBFD_SETSIZE\fP). See
\fI\%this tip for a possible workaround\fP and \fI\%this thread for a deeper
explanation\fP\&.
.SS Maximum open file descriptors (ulimit)
.sp
Most *nix operating systems impose various resource limits on every process.
The method of increasing these limits varies, depending on your init system and
particular OS release. The default value for many OSes is 1024 or 4096. On a
system with many databases or many views, CouchDB can very rapidly hit this
limit.
.sp
If your system is set up to use the Pluggable Authentication Modules (\fI\%PAM\fP)
system (as is the case with nearly all modern Linuxes), increasing this limit
is straightforward. For example, creating a file named
\fB/etc/security/limits.d/100\-couchdb.conf\fP with the following contents will
ensure that CouchDB can open up to 10000 file descriptors at once:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#<domain>    <type>    <item>    <value>
couchdb      hard      nofile    10000
couchdb      soft      nofile    10000
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you are using our Debian/Ubuntu sysvinit script (\fB/etc/init.d/couchdb\fP),
you also need to raise the limits for the root user:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#<domain>    <type>    <item>    <value>
root         hard      nofile    10000
root         soft      nofile    10000
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You may also have to edit the \fB/etc/pam.d/common\-session\fP and
\fB/etc/pam.d/common\-session\-noninteractive\fP files to add the line:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
session required pam_limits.so
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
if it is not already present.
.sp
For systemd\-based Linuxes (such as CentOS/RHEL 7, Ubuntu 16.04+, Debian 8
or newer), assuming you are launching CouchDB from systemd, you must also
override the upper limit by creating the file
\fB/etc/systemd/system/<servicename>.d/override.conf\fP with the following
content:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[Service]
LimitNOFILE=#######
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and replacing the \fB#######\fP with the upper limit of file descriptors CouchDB
is allowed to hold open at once.
.sp
If your system does not use PAM, a \fIulimit\fP command is usually available for
use in a custom script to launch CouchDB with increased resource limits.
Typical syntax would be something like \fIulimit \-n 10000\fP\&.
.sp
In general, modern UNIX\-like systems can handle very large numbers of file
handles per process (e.g. 100000) without problem. Don\(aqt be afraid to increase
this limit on your system.
.SS Network
.sp
There is latency overhead making and receiving each request/response.
In general you should do your requests in batches. Most APIs have some
mechanism to do batches, usually by supplying lists of documents or keys in
the request body. Be careful what size you pick for the batches. The larger
batch requires more time your client has to spend encoding the items into JSON
and more time is spent decoding that number of responses. Do some benchmarking
with your own configuration and typical data to find the sweet spot.
It is likely to be between one and ten thousand documents.
.sp
If you have a fast I/O system then you can also use concurrency \- have
multiple requests/responses at the same time. This mitigates the latency
involved in assembling JSON, doing the networking and decoding JSON.
.sp
As of CouchDB 1.1.0, users often report lower write performance of documents
compared to older releases. The main reason is that this release ships with
the more recent version of the HTTP server library MochiWeb, which by default
sets the TCP socket option \fI\%SO_NODELAY\fP to false. This means that small data
sent to the TCP socket, like the reply to a document write request (or reading
a very small document), will not be sent immediately to the network \- TCP will
buffer it for a while hoping that it will be asked to send more data through
the same socket and then send all the data at once for increased performance.
This TCP buffering behaviour can be disabled via
\fBhttpd/socket_options\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd]
socket_options = [{nodelay, true}]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
Bulk \fIload\fP and \fIstore\fP API.
.UNINDENT
.UNINDENT
.SS Connection limit
.sp
\fI\%MochiWeb\fP handles CouchDB requests.
The default maximum number of connections is 2048. To change this limit, use the
\fIserver_options\fP configuration variable. \fImax\fP indicates maximum number of
connections.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[chttpd]
server_options = [{backlog, 128}, {acceptor_pool_size, 16}, {max, 4096}]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS CouchDB
.SS DELETE operation
.sp
When you \fI\%DELETE\fP a document the database will create a new
revision which contains the \fB_id\fP and \fB_rev\fP fields as well as
the \fI_deleted\fP flag. This revision will remain even after a \fIdatabase
compaction\fP so that the deletion can be replicated. Deleted documents, like
non\-deleted documents, can affect view build times, \fI\%PUT\fP and
\fI\%DELETE\fP request times, and the size of the database since they
increase the size of the B+Tree. You can see the number of deleted documents
in \fBdatabase information\fP\&. If your use case creates lots of
deleted documents (for example, if you are storing short\-term data like log
entries, message queues, etc), you might want to periodically switch to a new
database and delete the old one (once the entries in it have all expired).
.SS Document\(aqs ID
.sp
The db file size is derived from your document and view sizes but also on a
multiple of your \fB_id\fP sizes. Not only is the \fB_id\fP present in the document,
but it and parts of it are duplicated in the binary tree structure CouchDB uses
to navigate the file to find the document in the first place. As a real world
example for one user switching from 16 byte ids to 4 byte ids made a database
go from 21GB to 4GB with 10 million documents (the raw JSON text when from
2.5GB to 2GB).
.sp
Inserting with sequential (and at least sorted) ids is faster than random ids.
Consequently you should consider generating ids yourself, allocating them
sequentially and using an encoding scheme that consumes fewer bytes.
For example, something that takes 16 hex digits to represent can be done in
4 base 62 digits (10 numerals, 26 lower case, 26 upper case).
.SS Views
.SS Views Generation
.sp
Views with the JavaScript query server are extremely slow to generate when
there are a non\-trivial number of documents to process. The generation process
won\(aqt even saturate a single CPU let alone your I/O. The cause is the latency
involved in the CouchDB server and separate \fIcouchjs\fP query server, dramatically
indicating how important it is to take latency out of your implementation.
.sp
You can let view access be "stale" but it isn\(aqt practical to determine when
that will occur giving you a quick response and when views will be updated
which will take a long time. (A 10 million document database took about 10
minutes to load into CouchDB but about 4 hours to do view generation).
.sp
In a cluster, "stale" requests are serviced by a fixed set of shards in order
to present users with consistent results between requests. This comes with an
availability trade\-off \- the fixed set of shards might not be the most
responsive / available within the cluster. If you don\(aqt need this kind of
consistency (e.g. your indexes are relatively static), you can tell CouchDB to
use any available replica by specifying \fBstable=false&update=false\fP instead of
\fBstale=ok\fP, or \fBstable=false&update=lazy\fP instead of \fBstale=update_after\fP\&.
.sp
View information isn\(aqt replicated \- it is rebuilt on each database so you
can\(aqt do the view generation on a separate sever.
.SS Built\-In Reduce Functions
.sp
If you’re using a very simple view function that only performs a sum or count
reduction, you can call native Erlang implementations of them by simply
writing \fB_sum\fP or \fB_count\fP in place of your function declaration.
This will speed up things dramatically, as it cuts down on IO between CouchDB
and the \fIJavaScript query server\fP\&. For example, as
\fI\%mentioned on the mailing list\fP, the time for outputting an (already indexed
and cached) view with about 78,000 items went down from 60 seconds to 4 seconds.
.sp
Before:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "_design/foo",
    "views": {
        "bar": {
            "map": "function (doc) { emit(doc.author, 1); }",
            "reduce": "function (keys, values, rereduce) { return sum(values); }"
        }
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "_design/foo",
    "views": {
        "bar": {
            "map": "function (doc) { emit(doc.author, 1); }",
            "reduce": "_sum"
        }
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fIreducefun/builtin\fP
.UNINDENT
.UNINDENT
.SS Design Documents
.sp
CouchDB supports special documents within databases known as "design
documents". These documents, mostly driven by JavaScript you write, are used
to build indexes, validate document updates, format query results, and filter
replications.
.SS Design Documents
.sp
In this section we\(aqll show how to write design documents, using the built\-in
\fIJavaScript Query Server\fP\&.
.sp
But before we start to write our first document, let\(aqs take a look at the list
of common objects that will be used during our code journey \- we\(aqll be using
them extensively within each function:
.INDENT 0.0
.IP \(bu 2
\fIDatabase information object\fP
.IP \(bu 2
\fIRequest object\fP
.IP \(bu 2
\fIResponse object\fP
.IP \(bu 2
\fIUserCtx object\fP
.IP \(bu 2
\fIDatabase Security object\fP
.IP \(bu 2
\fIGuide to JavaScript Query Server\fP
.UNINDENT
.SS View Functions
.sp
Views are the primary tool used for querying and reporting on CouchDB databases.
.SS Map Functions
.INDENT 0.0
.TP
.B mapfun(doc)
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBdoc\fP \-\- The document that is being processed
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Map functions accept a single document as the argument and (optionally)
\fBemit()\fP key/value pairs that are stored in a view.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function (doc) {
  if (doc.type === \(aqpost\(aq && doc.tags && Array.isArray(doc.tags)) {
    doc.tags.forEach(function (tag) {
      emit(tag.toLowerCase(), 1);
    });
  }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In this example a key/value pair is emitted for each value in the \fItags\fP array
of a document with a \fItype\fP of "post". Note that \fBemit()\fP may be called many
times for a single document, so the same document may be available by several
different keys.
.sp
Also keep in mind that each document is \fIsealed\fP to prevent the situation where
one map function changes document state and another receives a modified version.
.sp
For efficiency reasons, documents are passed to a group of map functions \- each
document is processed by a group of map functions from all views of the related
design document. This means that if you trigger an index update for one view in
the design document, all others will get updated too.
.sp
Since version \fI1.1.0\fP, \fImap\fP supports \fICommonJS\fP modules and
the \fBrequire()\fP function.
.SS Reduce and Rereduce Functions
.INDENT 0.0
.TP
.B redfun(keys, values[, rereduce])
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBkeys\fP \-\- Array of pairs of docid\-key for related map function results.
Always \fBnull\fP if rereduce is running (has \fBtrue\fP value).
.IP \(bu 2
\fBvalues\fP \-\- Array of map function result values.
.IP \(bu 2
\fBrereduce\fP \-\- Boolean flag to indicate a rereduce run.
.UNINDENT
.TP
.B Returns
Reduces \fIvalues\fP
.UNINDENT
.UNINDENT
.sp
Reduce functions take two required arguments of keys and values lists \- the
result of the related map function \- and an optional third value which indicates
if \fIrereduce\fP mode is active or not. \fIRereduce\fP is used for additional reduce
values list, so when it is \fBtrue\fP there is no information about related \fIkeys\fP
(first argument is \fBnull\fP).
.sp
Note that if the result of a \fIreduce\fP function is longer than the initial
values list then a Query Server error will be raised. However, this behavior
can be disabled by setting \fBreduce_limit\fP config option to \fBfalse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[query_server_config]
reduce_limit = false
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
While disabling \fBreduce_limit\fP might be useful for debug proposes, remember
that the main task of reduce functions is to \fIreduce\fP the mapped result, not to
make it bigger. Generally, your reduce function should converge rapidly to a
single value \- which could be an array or similar object.
.SS Built\-in Reduce Functions
.sp
Additionally, CouchDB has a set of built\-in reduce functions. These are
implemented in Erlang and run inside CouchDB, so they are much faster than the
equivalent JavaScript functions.
.INDENT 0.0
.TP
.B _approx_count_distinct
.UNINDENT
.sp
New in version 2.2.

.sp
Aproximates the number of distinct keys in a view index using a variant of the
\fI\%HyperLogLog\fP algorithm. This algorithm enables an efficient, parallelizable
computation of cardinality using fixed memory resources. CouchDB has configured
the underlying data structure to have a relative error of ~2%.
.sp
As this reducer ignores the emitted values entirely, an invocation with
\fBgroup=true\fP will simply return a value of 1 for every distinct key in the
view. In the case of array keys, querying the view with a \fBgroup_level\fP
specified will return the number of distinct keys that share the common group
prefix in each row. The algorithm is also cognizant of the \fBstartkey\fP and
\fBendkey\fP boundaries and will return the number of distinct keys within the
specified key range.
.sp
A final note regarding Unicode collation: this reduce function uses the binary
representation of each key in the index directly as input to the HyperLogLog
filter. As such, it will (incorrectly) consider keys that are not byte identical
but that compare equal according to the Unicode collation rules to be distinct
keys, and thus has the potential to overestimate the cardinality of the key
space if a large number of such keys exist.
.INDENT 0.0
.TP
.B _count
.UNINDENT
.sp
Counts the number of values in the index with a given key. This could be
implemented in JavaScript as:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
// could be replaced by _count
function(keys, values, rereduce) {
    if (rereduce) {
        return sum(values);
    } else {
        return values.length;
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B _stats
.UNINDENT
.sp
Computes the following quantities for numeric values associated with each key:
\fBsum\fP, \fBmin\fP, \fBmax\fP, \fBcount\fP, and \fBsumsqr\fP\&. The behavior of the
\fB_stats\fP function varies depending on the output of the map function. The
simplest case is when the map phase emits a single numeric value for each key.
In this case the \fB_stats\fP function is equivalent to the following JavaScript:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
// could be replaced by _stats
function(keys, values, rereduce) {
    if (rereduce) {
        return {
            \(aqsum\(aq: values.reduce(function(a, b) { return a + b.sum }, 0),
            \(aqmin\(aq: values.reduce(function(a, b) { return Math.min(a, b.min) }, Infinity),
            \(aqmax\(aq: values.reduce(function(a, b) { return Math.max(a, b.max) }, \-Infinity),
            \(aqcount\(aq: values.reduce(function(a, b) { return a + b.count }, 0),
            \(aqsumsqr\(aq: values.reduce(function(a, b) { return a + b.sumsqr }, 0)
        }
    } else {
        return {
            \(aqsum\(aq: sum(values),
            \(aqmin\(aq: Math.min.apply(null, values),
            \(aqmax\(aq: Math.max.apply(null, values),
            \(aqcount\(aq: values.length,
            \(aqsumsqr\(aq: (function() {
            var sumsqr = 0;

            values.forEach(function (value) {
                sumsqr += value * value;
            });

            return sumsqr;
            })(),
        }
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fB_stats\fP function will also work with "pre\-aggregated" values from a map
phase. A map function that emits an object containing \fBsum\fP, \fBmin\fP, \fBmax\fP,
\fBcount\fP, and \fBsumsqr\fP keys and numeric values for each can use the
\fB_stats\fP function to combine these results with the data from other documents.
The emitted object may contain other keys (these are ignored by the reducer),
and it is also possible to mix raw numeric values and pre\-aggregated objects
in a single view and obtain the correct aggregated statistics.
.sp
Finally, \fB_stats\fP can operate on key\-value pairs where each value is an array
comprised of numbers or pre\-aggregated objects. In this case \fBevery\fP value
emitted from the map function must be an array, and the arrays must all be the
same length, as \fB_stats\fP will compute the statistical quantities above
\fIindependently\fP for each element in the array. Users who want to compute
statistics on multiple values from a single document should either \fBemit\fP each
value into the index separately, or compute the statistics for the set of values
using the JavaScript example above and emit a pre\-aggregated object.
.INDENT 0.0
.TP
.B _sum
.UNINDENT
.sp
In its simplest variation, \fB_sum\fP sums the numeric values associated with each
key, as in the following JavaScript:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
// could be replaced by _sum
function(keys, values) {
    return sum(values);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
As with \fB_stats\fP, the \fB_sum\fP function offers a number of extended
capabilities. The \fB_sum\fP function requires that map values be numbers, arrays
of numbers, or objects. When presented with array output from a map function,
\fB_sum\fP will compute the sum for every element of the array. A bare numeric
value will be treated as an array with a single element, and arrays with fewer
elements will be treated as if they contained zeroes for every additional
element in the longest emitted array. As an example, consider the following map
output:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"total_rows":5, "offset":0, "rows": [
    {"id":"id1", "key":"abc", "value": 2},
    {"id":"id2", "key":"abc", "value": [3,5,7]},
    {"id":"id2", "key":"def", "value": [0,0,0,42]},
    {"id":"id2", "key":"ghi", "value": 1},
    {"id":"id1", "key":"ghi", "value": 3}
]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fB_sum\fP for this output without any grouping would be:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"rows": [
    {"key":null, "value": [9,5,7,42]}
]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
while the grouped output would be
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"rows": [
    {"key":"abc", "value": [5,5,7]},
    {"key":"def", "value": [0,0,0,42]},
    {"key":"ghi", "value": 4
]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This is in contrast to the behavior of the \fB_stats\fP function which requires
that all emitted values be arrays of identical length if any array is emitted.
.sp
It is also possible to have \fB_sum\fP recursively descend through an emitted
object and compute the sums for every field in the object. Objects \fIcannot\fP be
mixed with other data structures. Objects can be arbitrarily nested, provided
that the values for all fields are themselves numbers, arrays of numbers, or
objects.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
\fBWhy don\(aqt reduce functions support CommonJS modules?\fP
.sp
While \fImap\fP functions have limited access to stored modules through
\fBrequire()\fP, there is no such feature for \fIreduce\fP functions.
The reason lies deep inside the way \fImap\fP and \fIreduce\fP
functions are processed by the Query Server. Let\(aqs take a look at \fImap\fP
functions first:
.INDENT 0.0
.IP 1. 3
CouchDB sends all \fImap\fP functions in a processed design document to the
Query Server.
.IP 2. 3
the Query Server handles them one by one, compiles and puts them onto an
internal stack.
.IP 3. 3
after all \fImap\fP functions have been processed, CouchDB will send the
remaining documents for indexing, one by one.
.IP 4. 3
the Query Server receives the document object and applies it to every
function from the stack. The emitted results are then joined into a
single array and sent back to CouchDB.
.UNINDENT
.sp
Now let\(aqs see how \fIreduce\fP functions are handled:
.INDENT 0.0
.IP 1. 3
CouchDB sends \fIas a single command\fP the list of available \fIreduce\fP
functions with the result list of key\-value pairs that were previously
returned from the \fImap\fP functions.
.IP 2. 3
the Query Server compiles the reduce functions and applies them to the
key\-value lists. The reduced result is sent back to CouchDB.
.UNINDENT
.sp
As you may note, \fIreduce\fP functions are applied in a single shot to the map
results while \fImap\fP functions are applied to documents one by one. This
means that it\(aqs possible for \fImap\fP functions to precompile CommonJS
libraries and use them during the entire view processing, but for \fIreduce\fP
functions they would be compiled again and again for each view result
reduction, which would lead to performance degradation.
.UNINDENT
.UNINDENT
.SS Show Functions
.INDENT 0.0
.TP
.B showfun(doc, req)
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBdoc\fP \-\- The document that is being processed; may be omitted.
.IP \(bu 2
\fBreq\fP \-\- \fIRequest object\fP\&.
.UNINDENT
.TP
.B Returns
\fIResponse object\fP
.TP
.B Return type
object or string
.UNINDENT
.UNINDENT
.sp
Show functions are used to represent documents in various formats, commonly as
HTML pages with nice formatting. They can also be used to run server\-side
functions without requiring a pre\-existing document.
.sp
Basic example of show function could be:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc, req){
    if (doc) {
        return "Hello from " + doc._id + "!";
    } else {
        return "Hello, world!";
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Also, there is more simple way to return json encoded data:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc, req){
    return {
        \(aqjson\(aq: {
            \(aqid\(aq: doc[\(aq_id\(aq],
            \(aqrev\(aq: doc[\(aq_rev\(aq]
        }
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and even files (this one is CouchDB logo):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc, req){
    return {
        \(aqheaders\(aq: {
            \(aqContent\-Type\(aq : \(aqimage/png\(aq,
        },
        \(aqbase64\(aq: \(aq\(aq.concat(
            \(aqiVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAsV\(aq,
            \(aqBMVEUAAAD////////////////////////5ur3rEBn////////////////wDBL/\(aq,
            \(aqAADuBAe9EB3IEBz/7+//X1/qBQn2AgP/f3/ilpzsDxfpChDtDhXeCA76AQH/v7\(aq,
            \(aq/84eLyWV/uc3bJPEf/Dw/uw8bRWmP1h4zxSlD6YGHuQ0f6g4XyQkXvCA36MDH6\(aq,
            \(aqwMH/z8/yAwX64ODeh47BHiv/Ly/20dLQLTj98PDXWmP/Pz//39/wGyJ7Iy9JAA\(aq,
            \(aqAADHRSTlMAbw8vf08/bz+Pv19jK/W3AAAAg0lEQVR4Xp3LRQ4DQRBD0QqTm4Y5\(aq,
            \(aqzMxw/4OleiJlHeUtv2X6RbNO1Uqj9g0RMCuQO0vBIg4vMFeOpCWIWmDOw82fZx\(aq,
            \(aqvaND1c8OG4vrdOqD8YwgpDYDxRgkSm5rwu0nQVBJuMg++pLXZyr5jnc1BaH4GT\(aq,
            \(aqLvEliY253nA3pVhQqdPt0f/erJkMGMB8xucAAAAASUVORK5CYII=\(aq)
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
But what if you need to represent data in different formats via a single
function? Functions \fBregisterType()\fP and \fBprovides()\fP are your the best
friends in that question:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc, req){
    provides(\(aqjson\(aq, function(){
        return {\(aqjson\(aq: doc}
    });
    provides(\(aqhtml\(aq, function(){
        return \(aq<pre>\(aq + toJSON(doc) + \(aq</pre>\(aq
    })
    provides(\(aqxml\(aq, function(){
        return {
            \(aqheaders\(aq: {\(aqContent\-Type\(aq: \(aqapplication/xml\(aq},
            \(aqbody\(aq : \(aq\(aq.concat(
                \(aq<?xml version="1.0" encoding="utf\-8"?>\en\(aq,
                \(aq<doc>\(aq,
                (function(){
                    escape = function(s){
                        return s.replace(/&quot;/g, \(aq"\(aq)
                                .replace(/&gt;/g, \(aq>\(aq)
                                .replace(/&lt;/g, \(aq<\(aq)
                                .replace(/&amp;/g, \(aq&\(aq);
                    };
                    var content = \(aq\(aq;
                    for(var key in doc){
                        if(!doc.hasOwnProperty(key)) continue;
                        var value = escape(toJSON(doc[key]));
                        var key = escape(key);
                        content += \(aq\(aq.concat(
                            \(aq<\(aq + key + \(aq>\(aq,
                            value
                            \(aq</\(aq + key + \(aq>\(aq
                        )
                    }
                    return content;
                })(),
                \(aq</doc>\(aq
            )
        }
    })
    registerType(\(aqtext\-json\(aq, \(aqtext/json\(aq)
    provides(\(aqtext\-json\(aq, function(){
        return toJSON(doc);
    })
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This function may return \fIhtml\fP, \fIjson\fP , \fIxml\fP or our custom \fItext json\fP format
representation of same document object with same processing rules. Probably,
the \fIxml\fP provider in our function needs more care to handle nested objects
correctly, and keys with invalid characters, but you\(aqve got the idea!
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B CouchDB Wiki:
.INDENT 7.0
.IP \(bu 2
\fI\%Showing Documents\fP
.UNINDENT
.TP
.B CouchDB Guide:
.INDENT 7.0
.IP \(bu 2
\fI\%Show Functions\fP
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS List Functions
.INDENT 0.0
.TP
.B listfun(head, req)
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBhead\fP \-\- \fIview_head_info_object\fP
.IP \(bu 2
\fBreq\fP \-\- \fIRequest object\fP\&.
.UNINDENT
.TP
.B Returns
Last chunk.
.TP
.B Return type
string
.UNINDENT
.UNINDENT
.sp
While \fIshowfun\fP are used to customize document presentation, \fIlistfun\fP
are used for the same purpose, but on \fIviewfun\fP results.
.sp
The following list function formats the view and represents it as a very simple
HTML page:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(head, req){
    start({
        \(aqheaders\(aq: {
            \(aqContent\-Type\(aq: \(aqtext/html\(aq
        }
    });
    send(\(aq<html><body><table>\(aq);
    send(\(aq<tr><th>ID</th><th>Key</th><th>Value</th></tr>\(aq)
    while(row = getRow()){
        send(\(aq\(aq.concat(
            \(aq<tr>\(aq,
            \(aq<td>\(aq + toJSON(row.id) + \(aq</td>\(aq,
            \(aq<td>\(aq + toJSON(row.key) + \(aq</td>\(aq,
            \(aq<td>\(aq + toJSON(row.value) + \(aq</td>\(aq,
            \(aq</tr>\(aq
        ));
    }
    send(\(aq</table></body></html>\(aq);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Templates and styles could obviously be used to present data in a nicer fashion,
but this is an excellent starting point. Note that you may also use
\fBregisterType()\fP and \fBprovides()\fP functions in a similar way as for
\fIshowfun\fP! However, note that \fBprovides()\fP expects the return value to
be a string when used inside a list function, so you\(aqll need to use
\fBstart()\fP to set any custom headers and stringify your JSON before
returning it.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B CouchDB Wiki:
.INDENT 7.0
.IP \(bu 2
\fI\%Listing Views with CouchDB 0.10 and later\fP
.UNINDENT
.TP
.B CouchDB Guide:
.INDENT 7.0
.IP \(bu 2
\fI\%Transforming Views with List Functions\fP
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Update Functions
.INDENT 0.0
.TP
.B updatefun(doc, req)
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBdoc\fP \-\- The document that is being processed.
.IP \(bu 2
\fBreq\fP \-\- \fIrequest_object\fP
.UNINDENT
.TP
.B Returns
Two\-element array: the first element is the (updated or new)
document, which is committed to the database. If the first element
is \fBnull\fP no document will be committed to the database.
If you are updating an existing document, it should already have an
\fB_id\fP set, and if you are creating a new document, make sure to set its
\fB_id\fP to something, either generated based on the input or the
\fBreq.uuid\fP provided. The second element is the response that will
be sent back to the caller.
.UNINDENT
.UNINDENT
.sp
Update handlers are functions that clients can request to invoke server\-side
logic that will create or update a document. This feature allows a range of use
cases such as providing a server\-side last modified timestamp, updating
individual fields in a document without first getting the latest revision, etc.
.sp
When the request to an update handler includes a document ID in the URL, the
server will provide the function with the most recent version of that document.
You can provide any other values needed by the update handler function via the
\fBPOST\fP/\fBPUT\fP entity body or query string parameters of the request.
.sp
A basic example that demonstrates all use\-cases of update handlers:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc, req){
    if (!doc){
        if (\(aqid\(aq in req && req[\(aqid\(aq]){
            // create new document
            return [{\(aq_id\(aq: req[\(aqid\(aq]}, \(aqNew World\(aq]
        }
        // change nothing in database
        return [null, \(aqEmpty World\(aq]
    }
    doc[\(aqworld\(aq] = \(aqhello\(aq;
    doc[\(aqedited_by\(aq] = req[\(aquserCtx\(aq][\(aqname\(aq]
    return [doc, \(aqEdited World!\(aq]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B CouchDB Wiki:
.INDENT 7.0
.IP \(bu 2
\fI\%Document Update Handlers\fP
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Filter Functions
.INDENT 0.0
.TP
.B filterfun(doc, req)
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBdoc\fP \-\- The document that is being processed
.IP \(bu 2
\fBreq\fP \-\- \fIrequest_object\fP
.UNINDENT
.TP
.B Returns
Boolean value: \fBtrue\fP means that \fIdoc\fP passes the filter rules,
\fBfalse\fP means that it does not.
.UNINDENT
.UNINDENT
.sp
Filter functions mostly act like \fIshowfun\fP and \fIlistfun\fP: they
format, or \fIfilter\fP the \fIchanges feed\fP\&.
.SS Classic Filters
.sp
By default the changes feed emits all database documents changes. But if you\(aqre
waiting for some special changes, processing all documents is inefficient.
.sp
Filters are special design document functions that allow the changes feed to
emit only specific documents that pass filter rules.
.sp
Let\(aqs assume that our database is a mailbox and we need to handle only new mail
events (documents with the status \fInew\fP). Our filter function would look like
this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc, req){
    // we need only \(gamail\(ga documents
    if (doc.type != \(aqmail\(aq){
        return false;
    }
    // we\(aqre interested only in \(ganew\(ga ones
    if (doc.status != \(aqnew\(aq){
        return false;
    }
    return true; // passed!
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Filter functions must return \fBtrue\fP if a document passed all the rules.  Now,
if you apply this function to the changes feed it will emit only changes about
"new mails":
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /somedatabase/_changes?filter=mailbox/new_mail HTTP/1.1
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"results":[
{"seq":"1\-g1AAAAF9eJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MymBMZc4EC7MmJKSmJqWaYynEakaQAJJPsoaYwgE1JM0o1TjQ3T2HgLM1LSU3LzEtNwa3fAaQ_HqQ_kQG3qgSQqnoCqvJYgCRDA5ACKpxPWOUCiMr9hFUegKi8T1jlA4hKkDuzAC2yZRo","id":"df8eca9da37dade42ee4d7aa3401f1dd","changes":[{"rev":"1\-c2e0085a21d34fa1cecb6dc26a4ae657"}]},
{"seq":"9\-g1AAAAIreJyVkEsKwjAURUMrqCOXoCuQ5MU0OrI70XyppcaRY92J7kR3ojupaSPUUgqWwAu85By4t0AITbJYo5k7aUNSAnyJ_SGFf4gEkvOyLPMsFtHRL8ZKaC1M0v3eq5ALP\-X2a0G1xYKhgnONpmenjT04o_v5tOJ3LV5itTES_uP3FX9ppcAACaVsQAo38hNd_eVFt8ZklVljPqSPYLoH06PJhG0Cxq7\-yhQcz\-B4_fQCjFuqBjjewVF3E9cORoExSrpU_gHBTo5m","id":"df8eca9da37dade42ee4d7aa34024714","changes":[{"rev":"1\-29d748a6e87b43db967fe338bcb08d74"}]},
],
"last_seq":"10\-g1AAAAIreJyVkEsKwjAURR9tQR25BF2B5GMaHdmdaNIk1FLjyLHuRHeiO9Gd1LQRaimFlsALvOQcuLcAgGkWKpjbs9I4wYSvkDu4cA\-BALkoyzLPQhGc3GKSCqWEjrvfexVy6abc_SxQWwzRVHCuYHaxSpuj1aqfTyp\-3\-IlSrdakmH8oeKvrRSIkJhSNiKFjdyEm7uc6N6YTKo3iI_pw5se3vRsMiETE23WgzJ5x8s73n\-9EMYNTUc4Pt5RdxPVDkYJYxR3qfwLwW6OZw"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that the value of \fBlast_seq\fP is \fI10\-..\fP, but we received only two records.
Seems like any other changes were for documents that haven\(aqt passed our filter.
.sp
We probably need to filter the changes feed of our mailbox by more than a single
status value. We\(aqre also interested in statuses like "spam" to update
spam\-filter heuristic rules, "outgoing" to let a mail daemon actually send
mails, and so on. Creating a lot of similar functions that actually do similar
work isn\(aqt good idea \- so we need a dynamic filter.
.sp
You may have noticed that filter functions take a second argument named
\fIrequest\fP\&. This allows the creation of dynamic filters
based on query parameters, \fIuser context\fP and more.
.sp
The dynamic version of our filter looks like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc, req){
    // we need only \(gamail\(ga documents
    if (doc.type != \(aqmail\(aq){
        return false;
    }
    // we\(aqre interested only in requested status
    if (doc.status != req.query.status){
        return false;
    }
    return true; // passed!
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and now we have passed the \fIstatus\fP query parameter in the request to let our
filter match only the required documents:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /somedatabase/_changes?filter=mailbox/by_status&status=new HTTP/1.1
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"results":[
{"seq":"1\-g1AAAAF9eJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MymBMZc4EC7MmJKSmJqWaYynEakaQAJJPsoaYwgE1JM0o1TjQ3T2HgLM1LSU3LzEtNwa3fAaQ_HqQ_kQG3qgSQqnoCqvJYgCRDA5ACKpxPWOUCiMr9hFUegKi8T1jlA4hKkDuzAC2yZRo","id":"df8eca9da37dade42ee4d7aa3401f1dd","changes":[{"rev":"1\-c2e0085a21d34fa1cecb6dc26a4ae657"}]},
{"seq":"9\-g1AAAAIreJyVkEsKwjAURUMrqCOXoCuQ5MU0OrI70XyppcaRY92J7kR3ojupaSPUUgqWwAu85By4t0AITbJYo5k7aUNSAnyJ_SGFf4gEkvOyLPMsFtHRL8ZKaC1M0v3eq5ALP\-X2a0G1xYKhgnONpmenjT04o_v5tOJ3LV5itTES_uP3FX9ppcAACaVsQAo38hNd_eVFt8ZklVljPqSPYLoH06PJhG0Cxq7\-yhQcz\-B4_fQCjFuqBjjewVF3E9cORoExSrpU_gHBTo5m","id":"df8eca9da37dade42ee4d7aa34024714","changes":[{"rev":"1\-29d748a6e87b43db967fe338bcb08d74"}]},
],
"last_seq":"10\-g1AAAAIreJyVkEsKwjAURR9tQR25BF2B5GMaHdmdaNIk1FLjyLHuRHeiO9Gd1LQRaimFlsALvOQcuLcAgGkWKpjbs9I4wYSvkDu4cA\-BALkoyzLPQhGc3GKSCqWEjrvfexVy6abc_SxQWwzRVHCuYHaxSpuj1aqfTyp\-3\-IlSrdakmH8oeKvrRSIkJhSNiKFjdyEm7uc6N6YTKo3iI_pw5se3vRsMiETE23WgzJ5x8s73n\-9EMYNTUc4Pt5RdxPVDkYJYxR3qfwLwW6OZw"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and we can easily change filter behavior with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /somedatabase/_changes?filter=mailbox/by_status&status=spam HTTP/1.1
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"results":[
{"seq":"6\-g1AAAAIreJyVkM0JwjAYQD9bQT05gk4gaWIaPdlNNL_UUuPJs26im\-gmuklMjVClFFoCXyDJe_BSAsA4jxVM7VHpJEswWyC_ktJfRBzEzDlX5DGPDv5gJLlSXKfN560KMfdTbL4W\-FgM1oQzpmByskqbvdWqnc8qfvvHCyTXWuBu_K7iz38VCOOUENqjwg79hIvfvOhamQahROoVYn3\-I5huwXSvm5BJsTbLTk3B8QiO58\-_YMoMkT0cr\-BwdRElmFKSNKniDcAcjmM","id":"8960e91220798fc9f9d29d24ed612e0d","changes":[{"rev":"3\-cc6ff71af716ddc2ba114967025c0ee0"}]},
],
"last_seq":"10\-g1AAAAIreJyVkEsKwjAURR9tQR25BF2B5GMaHdmdaNIk1FLjyLHuRHeiO9Gd1LQRaimFlsALvOQcuLcAgGkWKpjbs9I4wYSvkDu4cA\-BALkoyzLPQhGc3GKSCqWEjrvfexVy6abc_SxQWwzRVHCuYHaxSpuj1aqfTyp\-3\-IlSrdakmH8oeKvrRSIkJhSNiKFjdyEm7uc6N6YTKo3iI_pw5se3vRsMiETE23WgzJ5x8s73n\-9EMYNTUc4Pt5RdxPVDkYJYxR3qfwLwW6OZw"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Combining filters with a \fIcontinuous\fP feed allows creating powerful event\-driven
systems.
.SS View Filters
.sp
View filters are the same as classic filters above, with one small difference:
they use the \fImap\fP instead of the \fIfilter\fP function of a view, to filter the
changes feed. Each time a key\-value pair is emitted from the \fImap\fP function, a
change is returned. This allows avoiding filter functions that mostly do the
same work as views.
.sp
To use them just pass \fIfilter=_view\fP and \fIview=designdoc/viewname\fP as request
parameters to the \fIchanges feed\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /somedatabase/_changes?filter=_view&view=dname/viewname  HTTP/1.1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Since view filters use \fImap\fP functions as filters, they can\(aqt show any
dynamic behavior since \fIrequest object\fP is not
available.
.UNINDENT
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B CouchDB Guide:
.INDENT 7.0
.IP \(bu 2
\fI\%Guide to filter change notification\fP
.UNINDENT
.TP
.B CouchDB Wiki:
.INDENT 7.0
.IP \(bu 2
\fI\%Filtered replication\fP
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Validate Document Update Functions
.INDENT 0.0
.TP
.B validatefun(newDoc, oldDoc, userCtx, secObj)
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBnewDoc\fP \-\- New version of document that will be stored.
.IP \(bu 2
\fBoldDoc\fP \-\- Previous version of document that is already stored.
.IP \(bu 2
\fBuserCtx\fP \-\- \fIuserctx_object\fP
.IP \(bu 2
\fBsecObj\fP \-\- \fIsecurity_object\fP
.UNINDENT
.TP
.B Throws
\fBforbidden\fP error to gracefully prevent document storing.
.TP
.B Throws
\fBunauthorized\fP error to prevent storage and allow the user to
re\-auth.
.UNINDENT
.UNINDENT
.sp
A design document may contain a function named \fIvalidate_doc_update\fP
which can be used to prevent invalid or unauthorized document update requests
from being stored.  The function is passed the new document from the update
request, the current document stored in the database, a \fIuserctx_object\fP
containing information about the user writing the document (if present), and
a \fIsecurity_object\fP with lists of database security roles.
.sp
Validation functions typically examine the structure of the new document to
ensure that required fields are present and to verify that the requesting user
should be allowed to make changes to the document properties.  For example,
an application may require that a user must be authenticated in order to create
a new document or that specific document fields be present when a document
is updated. The validation function can abort the pending document write
by throwing one of two error objects:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
// user is not authorized to make the change but may re\-authenticate
throw({ unauthorized: \(aqError message here.\(aq });

// change is not allowed
throw({ forbidden: \(aqError message here.\(aq });
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Document validation is optional, and each design document in the database may
have at most one validation function.  When a write request is received for
a given database, the validation function in each design document in that
database is called in an unspecified order.  If any of the validation functions
throw an error, the write will not succeed.
.sp
\fBExample\fP: The \fB_design/_auth\fP ddoc from \fI_users\fP database uses a validation
function to ensure that documents contain some required fields and are only
modified by a user with the \fB_admin\fP role:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(newDoc, oldDoc, userCtx, secObj) {
    if (newDoc._deleted === true) {
        // allow deletes by admins and matching users
        // without checking the other fields
        if ((userCtx.roles.indexOf(\(aq_admin\(aq) !== \-1) ||
            (userCtx.name == oldDoc.name)) {
            return;
        } else {
            throw({forbidden: \(aqOnly admins may delete other user docs.\(aq});
        }
    }

    if ((oldDoc && oldDoc.type !== \(aquser\(aq) || newDoc.type !== \(aquser\(aq) {
        throw({forbidden : \(aqdoc.type must be user\(aq});
    } // we only allow user docs for now

    if (!newDoc.name) {
        throw({forbidden: \(aqdoc.name is required\(aq});
    }

    if (!newDoc.roles) {
        throw({forbidden: \(aqdoc.roles must exist\(aq});
    }

    if (!isArray(newDoc.roles)) {
        throw({forbidden: \(aqdoc.roles must be an array\(aq});
    }

    if (newDoc._id !== (\(aqorg.couchdb.user:\(aq + newDoc.name)) {
        throw({
            forbidden: \(aqDoc ID must be of the form org.couchdb.user:name\(aq
        });
    }

    if (oldDoc) { // validate all updates
        if (oldDoc.name !== newDoc.name) {
            throw({forbidden: \(aqUsernames can not be changed.\(aq});
        }
    }

    if (newDoc.password_sha && !newDoc.salt) {
        throw({
            forbidden: \(aqUsers with password_sha must have a salt.\(aq +
                \(aqSee /_utils/script/couch.js for example code.\(aq
        });
    }

    var is_server_or_database_admin = function(userCtx, secObj) {
        // see if the user is a server admin
        if(userCtx.roles.indexOf(\(aq_admin\(aq) !== \-1) {
            return true; // a server admin
        }

        // see if the user a database admin specified by name
        if(secObj && secObj.admins && secObj.admins.names) {
            if(secObj.admins.names.indexOf(userCtx.name) !== \-1) {
                return true; // database admin
            }
        }

        // see if the user a database admin specified by role
        if(secObj && secObj.admins && secObj.admins.roles) {
            var db_roles = secObj.admins.roles;
            for(var idx = 0; idx < userCtx.roles.length; idx++) {
                var user_role = userCtx.roles[idx];
                if(db_roles.indexOf(user_role) !== \-1) {
                    return true; // role matches!
                }
            }
        }

        return false; // default to no admin
    }

    if (!is_server_or_database_admin(userCtx, secObj)) {
        if (oldDoc) { // validate non\-admin updates
            if (userCtx.name !== newDoc.name) {
                throw({
                    forbidden: \(aqYou may only update your own user document.\(aq
                });
            }
            // validate role updates
            var oldRoles = oldDoc.roles.sort();
            var newRoles = newDoc.roles.sort();

            if (oldRoles.length !== newRoles.length) {
                throw({forbidden: \(aqOnly _admin may edit roles\(aq});
            }

            for (var i = 0; i < oldRoles.length; i++) {
                if (oldRoles[i] !== newRoles[i]) {
                    throw({forbidden: \(aqOnly _admin may edit roles\(aq});
                }
            }
        } else if (newDoc.roles.length > 0) {
            throw({forbidden: \(aqOnly _admin may set roles\(aq});
        }
    }

    // no system roles in users db
    for (var i = 0; i < newDoc.roles.length; i++) {
        if (newDoc.roles[i][0] === \(aq_\(aq) {
            throw({
                forbidden:
                \(aqNo system roles (starting with underscore) in users db.\(aq
            });
        }
    }

    // no system names as names
    if (newDoc.name[0] === \(aq_\(aq) {
        throw({forbidden: \(aqUsername may not start with underscore.\(aq});
    }

    var badUserNameChars = [\(aq:\(aq];

    for (var i = 0; i < badUserNameChars.length; i++) {
        if (newDoc.name.indexOf(badUserNameChars[i]) >= 0) {
            throw({forbidden: \(aqCharacter \(ga\(aq + badUserNameChars[i] +
                    \(aq\(ga is not allowed in usernames.\(aq});
        }
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The \fBreturn\fP statement is used only for function, it has no impact on
the validation process.
.UNINDENT
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B CouchDB Guide:
.INDENT 7.0
.IP \(bu 2
\fI\%Validation Functions\fP
.UNINDENT
.TP
.B CouchDB Wiki:
.INDENT 7.0
.IP \(bu 2
\fI\%Document Update Validation\fP
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Guide to Views
.sp
Views are the primary tool used for querying and reporting on CouchDB documents.
There you\(aqll learn how they works and how to use them to build effective
applications with CouchDB
.SS Introduction to Views
.sp
Views are useful for many purposes:
.INDENT 0.0
.IP \(bu 2
Filtering the documents in your database to find those relevant to a
particular process.
.IP \(bu 2
Extracting data from your documents and presenting it in a specific order.
.IP \(bu 2
Building efficient indexes to find documents by any value or structure that
resides in them.
.IP \(bu 2
Use these indexes to represent relationships among documents.
.IP \(bu 2
Finally, with views you can make all sorts of calculations on the data in your
documents. For example, if documents represent your company’s financial
transactions, a view can answer the question of what the spending was in the
last week, month, or year.
.UNINDENT
.SS What Is a View?
.sp
Let’s go through the different use cases. First is extracting data that you
might need for a special purpose in a specific order. For a front page, we want
a list of blog post titles sorted by date. We’ll work with a set of example
documents as we walk through how views work:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id":"biking",
    "_rev":"AE19EBC7654",

    "title":"Biking",
    "body":"My biggest hobby is mountainbiking. The other day...",
    "date":"2009/01/30 18:04:11"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id":"bought\-a\-cat",
    "_rev":"4A3BBEE711",

    "title":"Bought a Cat",
    "body":"I went to the the pet store earlier and brought home a little kitty...",
    "date":"2009/02/17 21:13:39"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id":"hello\-world",
    "_rev":"43FBA4E7AB",

    "title":"Hello World",
    "body":"Well hello and welcome to my new blog...",
    "date":"2009/01/15 15:52:20"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Three will do for the example. Note that the documents are sorted by "_id",
which is how they are stored in the database. Now we define a view.
Bear with us without an explanation while we show you some code:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    if(doc.date && doc.title) {
        emit(doc.date, doc.title);
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This is a \fImap function\fP, and it is written in JavaScript. If you are not
familiar with JavaScript but have used C or any other C\-like language such as
Java, PHP, or C#, this should look familiar. It is a simple function definition.
.sp
You provide CouchDB with view functions as strings stored inside the \fBviews\fP
field of a design document. You don’t run it yourself. Instead, when you
\fIquery your view\fP, CouchDB takes the source code and runs it for you on every
document in the database your view was defined in. You \fIquery your view\fP to
retrieve the \fIview result\fP\&.
.sp
All map functions have a single parameter doc. This is a single document in
the database. Our map function checks whether our document has a \fBdate\fP and
a \fBtitle\fP attribute — luckily, all of our documents have them — and then calls
the built\-in \fBemit()\fP function with these two attributes as arguments.
.sp
The \fBemit()\fP function always takes two arguments: the first is \fBkey\fP,
and the second is \fBvalue\fP\&. The \fBemit(key, value)\fP function creates an entry
in our \fIview result\fP\&. One more thing: the \fBemit()\fP function can be called
multiple times in the map function to create multiple entries in the view
results from a single document, but we are not doing that yet.
.sp
CouchDB takes whatever you pass into the emit() function and puts it into a list
(see Table 1, “View results” below). Each row in that list includes the \fIkey\fP
and \fIvalue\fP\&. More importantly, the list is sorted by key (by \fBdoc.date\fP
in our case).  The most important feature of a view result is that it is sorted
by \fIkey\fP\&. We will come back to that over and over again to do neat things. Stay
tuned.
.sp
Table 1. View results:
.TS
center;
|l|l|.
_
T{
Key
T}	T{
Value
T}
_
T{
"2009/01/15 15:52:20"
T}	T{
"Hello World"
T}
_
T{
"2009/01/30 18:04:11"
T}	T{
"Biking"
T}
_
T{
"2009/02/17 21:13:39"
T}	T{
"Bought a Cat"
T}
_
.TE
.sp
When you query your view, CouchDB takes the source code and runs it for you on
every document in the database. If you have a lot of documents, that takes
quite a bit of time and you might wonder if it is not horribly inefficient
to do this. Yes, it would be, but CouchDB is designed to avoid any extra costs:
it only runs through all documents once, when you first query your view.
If a document is changed, the map function is only run once, to recompute
the keys and values for that single document.
.sp
The view result is stored in a B\-tree, just like the structure that is
responsible for holding your documents. View B\-trees are stored in their
own file, so that for high\-performance CouchDB usage, you can keep views on
their own disk. The B\-tree provides very fast lookups of rows by key, as well
as efficient streaming of rows in a key range. In our example, a single view
can answer all questions that involve time: “Give me all the blog posts from
last week” or “last month” or “this year.” Pretty neat.
.sp
When we query our view, we get back a list of all documents sorted by date.
Each row also includes the post title so we can construct links to posts.
Table 1 is just a graphical representation of the view result.
The actual result is JSON\-encoded and contains a little more metadata:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "total_rows": 3,
    "offset": 0,
    "rows": [
        {
            "key": "2009/01/15 15:52:20",
            "id": "hello\-world",
            "value": "Hello World"
        },

        {
            "key": "2009/01/30 18:04:11",
            "id": "biking",
            "value": "Biking"
        },

        {
            "key": "2009/02/17 21:13:39",
            "id": "bought\-a\-cat",
            "value": "Bought a Cat"
        }

    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now, the actual result is not as nicely formatted and doesn’t include any
superfluous whitespace or newlines, but this is better for you (and us!)
to read and understand. Where does that "id" member in the result rows come
from? That wasn’t there before. That’s because we omitted it earlier to avoid
confusion. CouchDB automatically includes the document ID of the document that
created the entry in the view result. We’ll use this as well when constructing
links to the blog post pages.
.SS Efficient Lookups
.sp
Let’s move on to the second use case for views: “building efficient indexes to
find documents by any value or structure that resides in them.” We already
explained the efficient indexing, but we skipped a few details. This is a good
time to finish this discussion as we are looking at map functions that are a
little more complex.
.sp
First, back to the B\-trees! We explained that the B\-tree that backs the
key\-sorted view result is built only once, when you first query a view,
and all subsequent queries will just read the B\-tree instead of executing
the map function for all documents again. What happens, though, when you change
a document, add a new one, or delete one? Easy: CouchDB is smart enough
to find the rows in the view result that were created by a specific document.
It marks them invalid so that they no longer show up in view results.
If the document was deleted, we’re good — the resulting B\-tree reflects the
state of the database. If a document got updated, the new document is run
through the map function and the resulting new lines are inserted into
the B\-tree at the correct spots. New documents are handled in the same way.
The B\-tree is a very efficient data structure for our needs, and the crash\-only
design of CouchDB databases is carried over to the view indexes as well.
.sp
To add one more point to the efficiency discussion: usually multiple documents
are updated between view queries. The mechanism explained in the previous
paragraph gets applied to all changes in the database since the last time
the view was queried in a batch operation, which makes things even faster and
is generally a better use of your resources.
.SS Find One
.sp
On to more complex map functions. We said “find documents by any value or
structure that resides in them.” We already explained how to extract a value
by which to sort a list of views (our date field). The same mechanism is used
for fast lookups. The URI to query to get a view’s result is
\fB/database/_design/designdocname/_view/viewname\fP\&. This gives you a list of all
rows in the view. We have only three documents, so things are small, but with
thousands of documents, this can get long. You can add view parameters to the
URI to constrain the result set. Say we know the date of a blog post.
To find a single document, we would use
\fB/blog/_design/docs/_view/by_date?key="2009/01/30 18:04:11"\fP
to get the “Biking” blog post. Remember that you can place whatever you like
in the key parameter to the emit() function. Whatever you put in there, we can
now use to look up exactly — and fast.
.sp
Note that in the case where multiple rows have the same key (perhaps we design
a view where the key is the name of the post’s author), key queries can return
more than one row.
.SS Find Many
.sp
We talked about “getting all posts for last month.” If it’s February now,
this is as easy as:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/blog/_design/docs/_view/by_date?startkey="2010/01/01 00:00:00"&endkey="2010/02/00 00:00:00"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fBstartkey\fP and \fBendkey\fP parameters specify an inclusive range on which
we can search.
.sp
To make things a little nicer and to prepare for a future example, we are going
to change the format of our date field. Instead of a string, we are going to use
an array, where individual members are part of a timestamp in decreasing
significance. This sounds fancy, but it is rather easy. Instead of:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "date": "2009/01/31 00:00:00"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
we use:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "date": [2009, 1, 31, 0, 0, 0]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Our map function does not have to change for this, but our view result looks
a little different:
.sp
Table 2. New view results:
.TS
center;
|l|l|.
_
T{
Key
T}	T{
Value
T}
_
T{
[2009, 1, 15, 15, 52, 20]
T}	T{
"Hello World"
T}
_
T{
[2009, 2, 17, 21, 13, 39]
T}	T{
"Biking"
T}
_
T{
[2009, 1, 30, 18, 4, 11]
T}	T{
"Bought a Cat"
T}
_
.TE
.sp
And our queries change to:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/blog/_design/docs/_view/by_date?startkey=[2010, 1, 1, 0, 0, 0]&endkey=[2010, 2, 1, 0, 0, 0]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For all you care, this is just a change in syntax, not meaning. But it shows
you the power of views. Not only can you construct an index with scalar values
like strings and integers, you can also use JSON structures as keys for your
views. Say we tag our documents with a list of tags and want to see all tags,
but we don’t care for documents that have not been tagged.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    ...
    tags: ["cool", "freak", "plankton"],
    ...
}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    ...
    tags: [],
    ...
}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    if(doc.tags.length > 0) {
        for(var idx in doc.tags) {
            emit(doc.tags[idx], null);
        }
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This shows a few new things. You can have conditions on structure
(\fBif(doc.tags.length > 0)\fP) instead of just values. This is also an example of
how a map function calls \fBemit()\fP multiple times per document.
And finally, you can pass null instead of a value to the value parameter.
The same is true for the key parameter. We’ll see in a bit how that is useful.
.SS Reversed Results
.sp
To retrieve view results in reverse order, use the \fBdescending=true\fP query
parameter. If you are using a \fBstartkey\fP parameter, you will find that CouchDB
returns different rows or no rows at all. What’s up with that?
.sp
It’s pretty easy to understand when you see how view query options work under
the hood. A view is stored in a tree structure for fast lookups. Whenever you
query a view, this is how CouchDB operates:
.INDENT 0.0
.IP 1. 3
Starts reading at the top, or at the position that \fBstartkey\fP specifies,
if present.
.IP 2. 3
Returns one row at a time until the end or until it hits \fBendkey\fP,
if present.
.UNINDENT
.sp
If you specify \fBdescending=true\fP, the reading direction is reversed,
not the sort  order of the rows in the view. In addition, the same two\-step
procedure is followed.
.sp
Say you have a view result that looks like this:
.TS
center;
|l|l|.
_
T{
Key
T}	T{
Value
T}
_
T{
0
T}	T{
"foo"
T}
_
T{
1
T}	T{
"bar"
T}
_
T{
2
T}	T{
"baz"
T}
_
.TE
.sp
Here are potential query options: \fB?startkey=1&descending=true\fP\&. What will
CouchDB do? See #1 above: it jumps to \fBstartkey\fP, which is the row with the
key \fB1\fP, and starts reading backward until it hits the end of the view.
So the particular result would be:
.TS
center;
|l|l|.
_
T{
Key
T}	T{
Value
T}
_
T{
1
T}	T{
"bar"
T}
_
T{
0
T}	T{
"foo"
T}
_
.TE
.sp
This is very likely not what you want. To get the rows with the indexes \fB1\fP
and \fB2\fP in reverse order, you need to switch the \fBstartkey\fP to \fBendkey\fP:
\fBendkey=1&descending=true\fP:
.TS
center;
|l|l|.
_
T{
Key
T}	T{
Value
T}
_
T{
2
T}	T{
"baz"
T}
_
T{
1
T}	T{
"bar"
T}
_
.TE
.sp
Now that looks a lot better. CouchDB started reading at the bottom of the view
and went backward until it hit \fBendkey\fP\&.
.SS The View to Get Comments for Posts
.sp
We use an array key here to support the \fBgroup_level\fP reduce query parameter.
CouchDB’s views are stored in the B\-tree file structure. Because of the way
B\-trees are structured, we can cache the intermediate reduce results in the
non\-leaf nodes of the tree, so reduce queries can be computed along arbitrary
key ranges in logarithmic time. See Figure 1, “Comments map function”.
.sp
In the blog app, we use \fBgroup_level\fP reduce queries to compute the count of
comments both on a per\-post and total basis, achieved by querying the same view
index with different methods. With some array keys, and assuming each key has
the value \fB1\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
["a","b","c"]
["a","b","e"]
["a","c","m"]
["b","a","c"]
["b","a","g"]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
the reduce view:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(keys, values, rereduce) {
    return sum(values)
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
_sum
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
which is a built\-in CouchDB reduce function (the others are \fB_count\fP and
\fB_stats\fP). \fB_sum\fP here returns the total number of rows between the start
and end key. So with \fBstartkey=["a","b"]&endkey=["b"]\fP (which includes the
first three of the above keys) the result would equal \fB3\fP\&. The effect is to
count rows.  If you’d like to count rows without depending on the row value,
you can switch on the \fBrereduce\fP parameter:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(keys, values, rereduce) {
    if (rereduce) {
        return sum(values);
    } else {
        return values.length;
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The JavaScript function above could be effectively replaced by the built\-in
\fB_count\fP\&.
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 2.5
[image: Comments map function]
[image]
Figure 1. Comments map function.UNINDENT
.UNINDENT
.sp
This is the reduce view used by the example app to count comments, while
utilizing the map to output the comments, which are more useful than just
\fB1\fP over and over. It pays to spend some time playing around with map and
reduce functions. Fauxton is OK for this, but it doesn’t give full access to
all the query parameters. Writing your own test code for views in your language
of choice is a great way to explore the nuances and capabilities of CouchDB’s
incremental MapReduce system.
.sp
Anyway, with a \fBgroup_level\fP query, you’re basically running a series of
reduce range queries: one for each group that shows up at the level you query.
Let’s reprint the key list from earlier, grouped at level \fB1\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
["a"]   3
["b"]   2
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And at \fBgroup_level=2\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
["a","b"]   2
["a","c"]   1
["b","a"]   2
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Using the parameter \fBgroup=true\fP makes it behave as though it were
\fBgroup_level=999\fP, so in the case of our current example, it would give the
number \fB1\fP for each key, as there are no exactly duplicated keys.
.SS Reduce/Rereduce
.sp
We briefly talked about the \fBrereduce\fP parameter to the reduce function.
We’ll explain what’s up with it in this section. By now, you should have learned
that your view result is stored in B\-tree index structure for efficiency.
The existence and use of the \fBrereduce\fP parameter is tightly coupled to how
the B\-tree index works.
.sp
Consider the map result are:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
"afrikaans", 1
"afrikaans", 1
"chinese", 1
"chinese", 1
"chinese", 1
"chinese", 1
"french", 1
"italian", 1
"italian", 1
"spanish", 1
"vietnamese", 1
"vietnamese", 1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Example 1. Example view result (mmm, food)
.sp
When we want to find out how many dishes there are per origin, we can reuse
the simple reduce function shown earlier:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(keys, values, rereduce) {
    return sum(values);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Figure 2, “The B\-tree index” shows a simplified version of what the B\-tree index
looks like. We abbreviated the key strings.
.INDENT 0.0
.INDENT 2.5
[image: The B-tree index]
[image]
Figure 2. The B\-tree index.UNINDENT
.UNINDENT
.sp
The view result is what computer science grads call a “pre\-order” walk through
the tree. We look at each element in each node starting from the left. Whenever
we see that there is a subnode to descend into, we descend and start reading
the elements in that subnode. When we have walked through the entire tree,
we’re done.
.sp
You can see that CouchDB stores both keys and values inside each leaf node.
In our case, it is simply always \fB1\fP, but you might have a value where you
count other results and then all rows have a different value. What’s important
is that CouchDB runs all elements that are within a node into the reduce
function (setting the \fBrereduce\fP parameter to false) and stores the result
inside the parent node along with the edge to the subnode. In our case, each
edge has a 3 representing the reduce value for the node it points to.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In reality, nodes have more than 1,600 elements in them. CouchDB computes
the result for all the elements in multiple iterations over the elements in
a single node, not all at once (which would be disastrous for memory
consumption).
.UNINDENT
.UNINDENT
.sp
Now let’s see what happens when we run a query. We want to know how many
"chinese" entries we have. The query option is simple: \fB?key="chinese"\fP\&.
See Figure 3, “The B\-tree index reduce result”.
.INDENT 0.0
.INDENT 2.5
[image: The B-tree index reduce result]
[image]
Figure 3. The B\-tree index reduce result.UNINDENT
.UNINDENT
.sp
CouchDB detects that all values in the subnode include the "chinese" key.
It concludes that it can take just the 3 values associated with that node to
compute the final result. It then finds the node left to it and sees that it’s
a node with keys outside the requested range (\fBkey=\fP requests a range where
the beginning and the end are the same value). It concludes that it has to use
the "chinese" element’s value and the other node’s value and run them through
the reduce function with the \fBrereduce\fP parameter set to true.
.sp
The reduce function effectively calculates 3 + 1 at query time and returns the
desired result. The next example shows some pseudocode that shows the last
invocation of the reduce function with actual values:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(null, [3, 1], true) {
    return sum([3, 1]);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now, we said your reduce function must actually reduce your values. If you see
the B\-tree, it should become obvious what happens when you don’t reduce your
values. Consider the following map result and reduce function. This time we
want to get a list of all the unique labels in our view:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
"abc", "afrikaans"
"cef", "afrikaans"
"fhi", "chinese"
"hkl", "chinese"
"ino", "chinese"
"lqr", "chinese"
"mtu", "french"
"owx", "italian"
"qza", "italian"
"tdx", "spanish"
"xfg", "vietnamese"
"zul", "vietnamese"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
We don’t care for the key here and only list all the labels we have. Our reduce
function removes duplicates:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(keys, values, rereduce) {
    var unique_labels = {};
    values.forEach(function(label) {
        if(!unique_labels[label]) {
            unique_labels[label] = true;
        }
    });

    return unique_labels;
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This translates to Figure 4, “An overflowing reduce index”.
.sp
We hope you get the picture. The way the B\-tree storage works means that if you
don’t actually reduce your data in the reduce function, you end up having
CouchDB copy huge amounts of data around that grow linearly, if not faster,
with the number of rows in your view.
.sp
CouchDB will be able to compute the final result, but only for views with a few
rows. Anything larger will experience a ridiculously slow view build time.
To help with that, CouchDB since version 0.10.0 will throw an error if your
reduce function does not reduce its input values.
.INDENT 0.0
.INDENT 2.5
[image: An overflowing reduce index]
[image]
Figure 4. An overflowing reduce index.UNINDENT
.UNINDENT
.SS One vs. Multiple Design Documents
.sp
A common question is: when should I split multiple views into multiple design
documents, or keep them together?
.sp
Each view you create corresponds to one B\-tree. All views in a single design
document will live in the same set of index files on disk (one file per
database shard; in 2.0+ by default, 8 files per node).
.sp
The most practical consideration for separating views into separate documents
is how often you change those views. Views that change often, and are in the
same design document as other views, will invalidate those other views\(aq
indexes when the design document is written, forcing them all to rebuild from
scratch. Obviously you will want to avoid this in production!
.sp
However, when you have multiple views with the same map function in the same
design document, CouchDB will optimize and only calculate that map function
once. This lets you have two views with different \fIreduce\fP functions (say,
one with \fB_sum\fP and one with \fB_stats\fP) but build only a single copy
of the mapped index. It also saves disk space and the time to write multiple
copies to disk.
.sp
Another benefit of having multiple views in the same design document is that
the index files can keep a single index of backwards references from docids
to rows. CouchDB needs these "back refs" to invalidate rows in a view when a
document is deleted (otherwise, a delete would force a total rebuild!)
.sp
One other consideration is that each separate design document will spawn
another (set of) \fBcouchjs\fP processes to generate the view, one per shard.
Depending on the number of cores on your server(s), this may be efficient
(using all of the idle cores you have) or inefficient (overloading the CPU on
your servers). The exact situation will depend on your deployment architecture.
.sp
So, should you use one or multiple design documents? The choice is yours.
.SS Lessons Learned
.INDENT 0.0
.IP \(bu 2
If you don’t use the key field in the map function, you are probably doing it
wrong.
.IP \(bu 2
If you are trying to make a list of values unique in the reduce functions,
you are probably doing it wrong.
.IP \(bu 2
If you don’t reduce your values to a single scalar value or a small
fixed\-sized object or array with a fixed number of scalar values of small
sizes, you are probably doing it wrong.
.UNINDENT
.SS Wrapping Up
.sp
Map functions are side effect–free functions that take a document as argument
and \fIemit\fP key/value pairs. CouchDB stores the emitted rows by constructing a
sorted B\-tree index, so row lookups by key, as well as streaming operations
across a range of rows, can be accomplished in a small memory and processing
footprint, while writes avoid seeks. Generating a view takes \fBO(N)\fP, where
\fBN\fP is the total number of rows in the view. However, querying a view is very
quick, as the B\-tree remains shallow even when it contains many, many keys.
.sp
Reduce functions operate on the sorted rows emitted by map view functions.
CouchDB’s reduce functionality takes advantage of one of the fundamental
properties of B\-tree indexes: for every leaf node (a sorted row), there is a
chain of internal nodes reaching back to the root. Each leaf node in the B\-tree
carries a few rows (on the order of tens, depending on row size), and each
internal node may link to a few leaf nodes or other internal nodes.
.sp
The reduce function is run on every node in the tree in order to calculate
the final reduce value. The end result is a reduce function that can be
incrementally updated upon changes to the map function, while recalculating
the reduction values for a minimum number of nodes. The initial reduction is
calculated once per each node (inner and leaf) in the tree.
.sp
When run on leaf nodes (which contain actual map rows), the reduce function’s
third parameter, \fBrereduce\fP, is false. The arguments in this case are the keys
and values as output by the map function. The function has a single returned
reduction value, which is stored on the inner node that a working set of leaf
nodes have in common, and is used as a cache in future reduce calculations.
.sp
When the reduce function is run on inner nodes, the \fBrereduce\fP flag is
\fBtrue\fP\&. This allows the function to account for the fact that it will be
receiving its own prior output. When \fBrereduce\fP is true, the values passed to
the function are intermediate reduction values as cached from previous
calculations. When the tree is more than two levels deep, the \fIrereduce\fP phase
is repeated, consuming chunks of the previous level’s output until the final
reduce value is calculated at the root node.
.sp
A common mistake new CouchDB users make is attempting to construct complex
aggregate values with a reduce function. Full reductions should result in a
scalar value, like 5, and not, for instance, a JSON hash with a set of unique
keys and the count of each. The problem with this approach is that you’ll end
up with a very large final value. The number of unique keys can be nearly as
large as the number of total keys, even for a large set. It is fine to combine
a few scalar calculations into one reduce function; for instance, to find the
total, average, and standard deviation of a set of numbers in a single function.
.sp
If you’re interested in pushing the edge of CouchDB’s incremental reduce
functionality, have a look at \fI\%Google’s paper on Sawzall\fP, which gives examples
of some of the more exotic reductions that can be accomplished in a system with
similar constraints.
.SS Views Collation
.SS Basics
.sp
View functions specify a key and a value to be returned for each row. CouchDB
collates the view rows by this key. In the following example, the \fBLastName\fP
property serves as the key, thus the result will be sorted by \fBLastName\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    if (doc.Type == "customer") {
        emit(doc.LastName, {FirstName: doc.FirstName, Address: doc.Address});
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB allows arbitrary JSON structures to be used as keys. You can use JSON
arrays as keys for fine\-grained control over sorting and grouping.
.SS Examples
.sp
The following clever trick would return both customer and order documents.
The key is composed of a customer \fB_id\fP and a sorting token. Because the key
for order documents begins with the \fB_id\fP of a customer document, all the
orders will be sorted by customer. Because the sorting token for customers is
lower than the token for orders, the customer document will come before the
associated orders. The values 0 and 1 for the sorting token are arbitrary.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    if (doc.Type == "customer") {
        emit([doc._id, 0], null);
    } else if (doc.Type == "order") {
        emit([doc.customer_id, 1], null);
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To list a specific customer with \fB_id\fP XYZ, and all of that customer\(aqs orders,
limit the startkey and endkey ranges to cover only documents for that customer\(aqs
\fB_id\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
startkey=["XYZ"]&endkey=["XYZ", {}]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It is not recommended to emit the document itself in the view. Instead, to
include the bodies of the documents when requesting the view, request the view
with \fB?include_docs=true\fP\&.
.SS Sorting by Dates
.sp
It maybe be convenient to store date attributes in a human readable format
(i.e. as a \fIstring\fP), but still sort by date. This can be done by converting
the date to a \fInumber\fP in the \fBemit()\fP function. For example, given
a document with a created_at attribute of \fB\(aqWed Jul 23 16:29:21 +0100 2013\(aq\fP,
the following emit function would sort by date:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
emit(Date.parse(doc.created_at).getTime(), null);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Alternatively, if you use a date format which sorts lexicographically,
such as \fB"2013/06/09 13:52:11 +0000"\fP you can just
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
emit(doc.created_at, null);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and avoid the conversion. As a bonus, this date format is compatible with the
JavaScript date parser, so you can use \fBnew Date(doc.created_at)\fP in your
client side JavaScript to make date sorting easy in the browser.
.SS String Ranges
.sp
If you need start and end keys that encompass every string with a given prefix,
it is better to use a high value Unicode character, than to use a \fB\(aqZZZZ\(aq\fP
suffix.
.sp
That is, rather than:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
startkey="abc"&endkey="abcZZZZZZZZZ"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You should use:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
startkey="abc"&endkey="abc\eufff0"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Collation Specification
.sp
This section is based on the view_collation function in \fI\%view_collation.js\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
// special values sort before all other types
null
false
true

// then numbers
1
2
3.0
4

// then text, case sensitive
"a"
"A"
"aa"
"b"
"B"
"ba"
"bb"

// then arrays. compared element by element until different.
// Longer arrays sort after their prefixes
["a"]
["b"]
["b","c"]
["b","c", "a"]
["b","d"]
["b","d", "e"]

// then object, compares each key value in the list until different.
// larger objects sort after their subset objects.
{a:1}
{a:2}
{b:1}
{b:2}
{b:2, a:1} // Member order does matter for collation.
           // CouchDB preserves member order
           // but doesn\(aqt require that clients will.
           // this test might fail if used with a js engine
           // that doesn\(aqt preserve order
{b:2, c:2}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Comparison of strings is done using \fI\%ICU\fP which implements the
\fI\%Unicode Collation Algorithm\fP, giving a dictionary sorting of keys.
This can give surprising results if you were expecting ASCII ordering.
Note that:
.INDENT 0.0
.IP \(bu 2
All symbols sort before numbers and letters (even the "high" symbols like
tilde, \fB0x7e\fP)
.IP \(bu 2
Differing sequences of letters are compared without regard to case, so
\fBa < aa\fP but also \fBA < aa\fP and \fBa < AA\fP
.IP \(bu 2
Identical sequences of letters are compared with regard to case, with
lowercase before uppercase, so \fBa < A\fP
.UNINDENT
.sp
You can demonstrate the collation sequence for 7\-bit ASCII characters like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
require \(aqrubygems\(aq
require \(aqrestclient\(aq
require \(aqjson\(aq

DB="http://127.0.0.1:5984/collator"

RestClient.delete DB rescue nil
RestClient.put "#{DB}",""

(32..126).each do |c|
    RestClient.put "#{DB}/#{c.to_s(16)}", {"x"=>c.chr}.to_json
end

RestClient.put "#{DB}/_design/test", <<EOS
{
    "views":{
        "one":{
            "map":"function (doc) { emit(doc.x,null); }"
        }
    }
}
EOS

puts RestClient.get("#{DB}/_design/test/_view/one")
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This shows the collation sequence to be:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\(ga ^ _ \- , ; : ! ? . \(aq " ( ) [ ] { } @ * / \e & # % + < = > | ~ $ 0 1 2 3 4 5 6 7 8 9
a A b B c C d D e E f F g G h H i I j J k K l L m M n N o O p P q Q r R s S t T u U v V w W x X y Y z Z
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Key ranges
.sp
Take special care when querying key ranges. For example: the query:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
startkey="Abc"&endkey="AbcZZZZ"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will match "ABC" and "abc1", but not "abc". This is because UCA sorts as:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
abc < Abc < ABC < abc1 < AbcZZZZZ
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For most applications, to avoid problems you should lowercase the \fIstartkey\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
startkey="abc"&endkey="abcZZZZZZZZ"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will match all keys starting with \fB[aA][bB][cC]\fP
.SS Complex keys
.sp
The query \fBstartkey=["foo"]&endkey=["foo",{}]\fP will match most array keys
with "foo" in the first element, such as \fB["foo","bar"]\fP and
\fB["foo",["bar","baz"]]\fP\&. However it will not match \fB["foo",{"an":"object"}]\fP
.SS _all_docs
.sp
The \fI_all_docs\fP  view is a special case because it uses
ASCII collation for doc ids, not UCA:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
startkey="_design/"&endkey="_design/ZZZZZZZZ"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will not find \fB_design/abc\fP because \fI\(aqZ\(aq\fP comes before \fI\(aqa\(aq\fP in the ASCII
sequence. A better solution is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
startkey="_design/"&endkey="_design0"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Raw collation
.sp
To squeeze a little more performance out of views, you can specify
\fB"options":{"collation":"raw"}\fP  within the view definition for native Erlang
collation, especially if you don\(aqt require UCA. This gives a different collation
sequence:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1
false
null
true
{"a":"a"},
["a"]
"a"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Beware that \fB{}\fP is no longer a suitable "high" key sentinel value. Use a
string like \fB"\eufff0"\fP instead.
.SS Joins With Views
.SS Linked Documents
.sp
If your \fImap function\fP emits an object value which has
\fB{\(aq_id\(aq: XXX}\fP and you \fIquery view\fP with
\fBinclude_docs=true\fP parameter, then CouchDB will fetch the document with id
\fBXXX\fP rather than the document which was processed to emit the key/value pair.
.sp
This means that if one document contains the ids of other documents, it can
cause those documents to be fetched in the view too, adjacent to the same key
if required.
.sp
For example, if you have the following hierarchically\-linked documents:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    { "_id": "11111" },
    { "_id": "22222", "ancestors": ["11111"], "value": "hello" },
    { "_id": "33333", "ancestors": ["22222","11111"], "value": "world" }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can emit the values with the ancestor documents adjacent to them in the view
like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    if (doc.value) {
        emit([doc.value, 0], null);
        if (doc.ancestors) {
            for (var i in doc.ancestors) {
                emit([doc.value, Number(i)+1], {_id: doc.ancestors[i]});
            }
        }
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The result you get is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "total_rows": 5,
    "offset": 0,
    "rows": [
        {
            "id": "22222",
            "key": [
                "hello",
                0
            ],
            "value": null,
            "doc": {
                "_id": "22222",
                "_rev": "1\-0eee81fecb5aa4f51e285c621271ff02",
                "ancestors": [
                    "11111"
                ],
                "value": "hello"
            }
        },
        {
            "id": "22222",
            "key": [
                "hello",
                1
            ],
            "value": {
                "_id": "11111"
            },
            "doc": {
                "_id": "11111",
                "_rev": "1\-967a00dff5e02add41819138abb3284d"
            }
        },
        {
            "id": "33333",
            "key": [
                "world",
                0
            ],
            "value": null,
            "doc": {
                "_id": "33333",
                "_rev": "1\-11e42b44fdb3d3784602eca7c0332a43",
                "ancestors": [
                    "22222",
                    "11111"
                ],
                "value": "world"
            }
        },
        {
            "id": "33333",
            "key": [
                "world",
                1
            ],
            "value": {
                "_id": "22222"
            },
            "doc": {
                "_id": "22222",
                "_rev": "1\-0eee81fecb5aa4f51e285c621271ff02",
                "ancestors": [
                    "11111"
                ],
                "value": "hello"
            }
        },
        {
            "id": "33333",
            "key": [
                "world",
                2
            ],
            "value": {
                "_id": "11111"
            },
            "doc": {
                "_id": "11111",
                "_rev": "1\-967a00dff5e02add41819138abb3284d"
            }
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
which makes it very cheap to fetch a document plus all its ancestors in one
query.
.sp
Note that the \fB"id"\fP in the row is still that of the originating document.
The only difference is that \fBinclude_docs\fP fetches a different doc.
.sp
The current revision of the document is resolved at query time, not at the time
the view is generated. This means that if a new revision of the linked document
is added later, it will appear in view queries even though the view itself
hasn\(aqt changed. To force a specific revision of a linked document to be used,
emit a \fB"_rev"\fP property as well as \fB"_id"\fP\&.
.SS Using View Collation
.INDENT 0.0
.TP
.B Author
Christopher Lenz
.TP
.B Date
2007\-10\-05
.TP
.B Source
\fI\%http://www.cmlenz.net/archives/2007/10/couchdb\-joins\fP
.UNINDENT
.sp
Just today, there was a discussion on IRC on how you\(aqd go about modeling a
simple blogging system with “post” and “comment” entities, where any blog
post might have N comments. If you\(aqd be using an SQL database, you\(aqd obviously
have two tables with foreign keys and you\(aqd be using joins. (At least until you
needed to add some \fI\%denormalization\fP).
.sp
But what would the “obvious” approach in CouchDB look like?
.SS Approach #1: Comments Inlined
.sp
A simple approach would be to have one document per blog post, and store the
comments inside that document:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "myslug",
    "_rev": "123456",
    "author": "john",
    "title": "My blog post",
    "content": "Bla bla bla …",
    "comments": [
        {"author": "jack", "content": "…"},
        {"author": "jane", "content": "…"}
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Of course the model of an actual blogging system would be more extensive,
you\(aqd have tags, timestamps, etc, etc. This is just to demonstrate the basics.
.UNINDENT
.UNINDENT
.sp
The obvious advantage of this approach is that the data that belongs together
is stored in one place. Delete the post, and you automatically delete the
corresponding comments, and so on.
.sp
You may be thinking that putting the comments inside the blog post document
would not allow us to query for the comments themselves, but you\(aqd be wrong.
You could trivially write a CouchDB view that would return all comments across
all blog posts, keyed by author:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    for (var i in doc.comments) {
        emit(doc.comments[i].author, doc.comments[i].content);
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now you could list all comments by a particular user by invoking the view and
passing it a \fB?key="username"\fP query string parameter.
.sp
However, this approach has a drawback that can be quite significant for many
applications: To add a comment to a post, you need to:
.INDENT 0.0
.IP \(bu 2
Fetch the blog post document
.IP \(bu 2
Add the new comment to the JSON structure
.IP \(bu 2
Send the updated document to the server
.UNINDENT
.sp
Now if you have multiple client processes adding comments at roughly the same
time, some of them will get a \fIHTTP 409 Conflict\fP error on step 3 (that\(aqs
optimistic concurrency in action). For some applications this makes sense, but
in many other apps, you\(aqd want to append new related data regardless of whether
other data has been added in the meantime.
.sp
The only way to allow non\-conflicting addition of related data is by putting
that related data into separate documents.
.SS Approach #2: Comments Separate
.sp
Using this approach you\(aqd have one document per blog post, and one document per
comment. The comment documents would have a “backlink” to the post they belong
to.
.sp
The blog post document would look similar to the above, minus the comments
property. Also, we\(aqd now have a type property on all our documents so that we
can tell the difference between posts and comments:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "myslug",
    "_rev": "123456",
    "type": "post",
    "author": "john",
    "title": "My blog post",
    "content": "Bla bla bla …"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The comments themselves are stored in separate documents, which also have a type
property (this time with the value “comment”), and additionally feature a post
property containing the ID of the post document they belong to:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "ABCDEF",
    "_rev": "123456",
    "type": "comment",
    "post": "myslug",
    "author": "jack",
    "content": "…"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "DEFABC",
    "_rev": "123456",
    "type": "comment",
    "post": "myslug",
    "author": "jane",
    "content": "…"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To list all comments per blog post, you\(aqd add a simple view, keyed by blog post
ID:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    if (doc.type == "comment") {
        emit(doc.post, {author: doc.author, content: doc.content});
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And you\(aqd invoke that view passing it a \fB?key="post_id"\fP query string
parameter.
.sp
Viewing all comments by author is just as easy as before:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    if (doc.type == "comment") {
        emit(doc.author, {post: doc.post, content: doc.content});
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
So this is better in some ways, but it also has a disadvantage.
Imagine you want to display a blog post with all the associated comments on the
same web page. With our first approach, we needed just a single request to the
CouchDB server, namely a \fBGET\fP request to the document. With this second
approach, we need two requests: a \fBGET\fP request to the post document, and a
\fBGET\fP request to the view that returns all comments for the post.
.sp
That is okay, but not quite satisfactory. Just imagine you wanted to add
threaded comments: you\(aqd now need an additional fetch per comment. What we\(aqd
probably want then would be a way to join the blog post and the various comments
together to be able to retrieve them with a single HTTP request.
.sp
This was when Damien Katz, the author of CouchDB, chimed in to the discussion
on IRC to show us the way.
.SS Optimization: Using the Power of View Collation
.sp
Obvious to Damien, but not at all obvious to the rest of us: it\(aqs fairly simple
to make a view that includes both the content of the blog post document, and
the content of all the comments associated with that post. The way you do that
is by using \fIcomplex keys\fP\&. Until now we\(aqve been using simple string values for
the view keys, but in fact they can be arbitrary JSON values, so let\(aqs make
some use of that:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    if (doc.type == "post") {
        emit([doc._id, 0], doc);
    } else if (doc.type == "comment") {
        emit([doc.post, 1], doc);
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Okay, this may be confusing at first. Let\(aqs take a step back and look at what
views in CouchDB are really about.
.sp
CouchDB views are basically highly efficient on\-disk dictionaries that map keys
to values, where the key is automatically indexed and can be used to filter
and/or sort the results you get back from your views. When you “invoke” a view,
you can say that you\(aqre only interested in a subset of the view rows by
specifying a \fB?key=foo\fP query string parameter. Or you can specify
\fB?startkey=foo\fP and/or \fB?endkey=bar\fP query string parameters to fetch rows
over a range of keys.
.sp
It\(aqs also important to note that keys are always used for collating (i.e.
sorting) the rows. CouchDB has well defined (but as of yet undocumented) rules
for comparing arbitrary JSON objects for collation. For example, the JSON value
\fB["foo", 2]\fP is sorted after (considered “greater than”) the values
\fB["foo"]\fP or \fB["foo", 1, "bar"]\fP, but before e.g. \fB["foo", 2, "bar"]\fP\&.
This feature enables a whole class of tricks that are rather non\-obvious...
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fIviews/collation\fP
.UNINDENT
.UNINDENT
.sp
With that in mind, let\(aqs return to the view function above. First note that,
unlike the previous view functions we\(aqve used here, this view handles both
"post" and "comment" documents, and both of them end up as rows in the same
view. Also, the key in this view is not just a simple string, but an array.
The first element in that array is always the ID of the post, regardless of
whether we\(aqre processing an actual post document, or a comment associated with
a post. The second element is 0 for post documents, and 1 for comment documents.
.sp
Let\(aqs assume we have two blog posts in our database. Without limiting the view
results via \fBkey\fP, \fBstartkey\fP, or \fBendkey\fP, we\(aqd get back something like
the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "total_rows": 5, "offset": 0, "rows": [{
            "id": "myslug",
            "key": ["myslug", 0],
            "value": {...}
        }, {
            "id": "ABCDEF",
            "key": ["myslug", 1],
            "value": {...}
        }, {
            "id": "DEFABC",
            "key": ["myslug", 1],
            "value": {...}
        }, {
            "id": "other_slug",
            "key": ["other_slug", 0],
            "value": {...}
        }, {
            "id": "CDEFAB",
            "key": ["other_slug", 1],
            "value": {...}
        },
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The \fB\&...\fP placeholders here would contain the complete JSON encoding of the
corresponding documents
.UNINDENT
.UNINDENT
.sp
Now, to get a specific blog post and all associated comments, we\(aqd invoke that
view with the query string:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
?startkey=["myslug"]&endkey;=["myslug", 2]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
We\(aqd get back the first three rows, those that belong to the \fBmyslug\fP post,
but not the others. Et voila, we now have the data we need to display a post
with all associated comments, retrieved via a single \fBGET\fP request.
.sp
You may be asking what the 0 and 1 parts of the keys are for. They\(aqre simply
to ensure that the post document is always sorted before the the associated
comment documents. So when you get back the results from this view for a
specific post, you\(aqll know that the first row contains the data for the blog
post itself, and the remaining rows contain the comment data.
.sp
One remaining problem with this model is that comments are not ordered, but
that\(aqs simply because we don\(aqt have date/time information associated with them.
If we had, we\(aqd add the timestamp as third element of the key array, probably
as ISO date/time strings. Now we would continue using the query string
\fB?startkey=["myslug"]&endkey=["myslug", 2]\fP to fetch the blog post and all
associated comments, only now they\(aqd be in chronological order.
.SS View Cookbook for SQL Jockeys
.sp
This is a collection of some common SQL queries and how to get the same result
in CouchDB. The key to remember here is that CouchDB does not work like an SQL
database at all, and that best practices from the SQL world do not translate
well or at all to CouchDB. This document’s “cookbook” assumes that you are
familiar with the CouchDB basics such as creating and updating databases and
documents.
.SS Using Views
.sp
How you would do this in SQL:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
CREATE TABLE
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ALTER TABLE
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
How you can do this in CouchDB?
.sp
Using views is a two\-step process. First you define a view; then you query it.
This is analogous to defining a table structure (with indexes) using
\fBCREATE TABLE\fP or \fBALTER TABLE\fP and querying it using an SQL query.
.SS Defining a View
.sp
Defining a view is done by creating a special document in a CouchDB database.
The only real specialness is the \fB_id\fP of the document, which starts with
\fB_design/\fP — for example, _design/application. Other than that, it is just a
regular CouchDB document. To make sure CouchDB understands that you are defining
a view, you need to prepare the contents of that design document in a special
format. Here is an example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "_design/application",
    "_rev": "1\-C1687D17",
    "views": {
        "viewname": {
            "map": "function(doc) { ... }",
            "reduce": "function(keys, values) { ... }"
        }
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
We are defining a view \fIviewname\fP\&. The definition of the view consists of two
functions: the map function and the reduce function. Specifying a reduce
function is optional. We’ll look at the nature of the functions later. Note that
\fIviewname\fP can be whatever you like: \fBusers\fP, \fBby\-name\fP, or \fBby\-date\fP are
just some examples.
.sp
A single design document can also include multiple view definitions, each
identified by a unique name:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "_design/application",
    "_rev": "1\-C1687D17",
    "views": {
        "viewname": {
            "map": "function(doc) { ... }",
            "reduce": "function(keys, values) { ... }"
        },
        "anotherview": {
            "map": "function(doc) { ... }",
            "reduce": "function(keys, values) { ... }"
        }
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Querying a View
.sp
The name of the design document and the name of the view are significant for
querying the view. To query the view \fIviewname\fP, you perform an HTTP \fBGET\fP
request to the following URI:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/database/_design/application/_view/viewname
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
database is the name of the database you created your design document in. Next
up is the design document name, and then the view name prefixed with \fB_view/\fP\&.
To query \fIanotherview\fP, replace \fIviewname\fP in that URI with \fIanotherview\fP\&.
If you want to query a view in a different design document, adjust the design
document name.
.SS MapReduce Functions
.sp
MapReduce is a concept that solves problems by applying a two\-step process,
aptly named the map phase and the reduce phase. The map phase looks at all
documents in CouchDB separately one after the other and creates a \fImap result\fP\&.
The map result is an ordered list of key/value pairs. Both key and value can
be specified by the user writing the map function. A map function may call the
built\-in \fBemit(key, value)\fP function 0 to N times per document, creating a row
in the map result per invocation.
.sp
CouchDB is smart enough to run a map function only once for every document, even
on subsequent queries on a view. Only changes to documents or new documents need
to be processed anew.
.SS Map functions
.sp
Map functions run in isolation for every document. They can’t modify the
document, and they can’t talk to the outside world—they can’t have side effects.
This is required so that CouchDB can guarantee correct results without having
to recalculate a complete result when only one document gets changed.
.sp
The map result looks like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"total_rows":3,"offset":0,"rows":[
{"id":"fc2636bf50556346f1ce46b4bc01fe30","key":"Lena","value":5},
{"id":"1fb2449f9b9d4e466dbfa47ebe675063","key":"Lisa","value":4},
{"id":"8ede09f6f6aeb35d948485624b28f149","key":"Sarah","value":6}
]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It is a list of rows sorted by the value of key. The id is added automatically
and refers back to the document that created this row. The value is the data
you’re looking for. For example purposes, it’s the girl’s age.
.sp
The map function that produces this result is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    if(doc.name && doc.age) {
        emit(doc.name, doc.age);
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It includes the if statement as a sanity check to ensure that we’re operating
on the right fields and calls the emit function with the name and age as the key
and value.
.SS Look Up by Key
.sp
How you would do this in SQL:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
SELECT field FROM table WHERE value="searchterm"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
How you can do this in CouchDB?
.sp
Use case: get a result (which can be a record or set of records) associated
with a key ("searchterm").
.sp
To look something up quickly, regardless of the storage mechanism, an index is
needed. An index is a data structure optimized for quick search and retrieval.
CouchDB’s map result is stored in such an index, which happens to be a B+ tree.
.sp
To look up a value by "searchterm", we need to put all values into the key of a
view. All we need is a simple map function:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    if(doc.value) {
        emit(doc.value, null);
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This creates a list of documents that have a value field sorted by the data in
the value field. To find all the records that match "searchterm", we query the
view and specify the search term as a query parameter:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/database/_design/application/_view/viewname?key="searchterm"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Consider the documents from the previous section, and say we’re indexing on the
age field of the documents to find all the five\-year\-olds:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    if(doc.age && doc.name) {
        emit(doc.age, doc.name);
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Query:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/ladies/_design/ladies/_view/age?key=5
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Result:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"total_rows":3,"offset":1,"rows":[
{"id":"fc2636bf50556346f1ce46b4bc01fe30","key":5,"value":"Lena"}
]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Easy.
.sp
Note that you have to emit a value. The view result includes the associated
document ID in every row. We can use it to look up more data from the document
itself. We can also use the \fB?include_docs=true\fP parameter to have CouchDB
fetch the individual documents for us.
.SS Look Up by Prefix
.sp
How you would do this in SQL:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
SELECT field FROM table WHERE value LIKE "searchterm%"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
How you can do this in CouchDB?
.sp
Use case: find all documents that have a field value that starts with
\fIsearchterm\fP\&. For example, say you stored a MIME type (like \fItext/html\fP or
\fIimage/jpg\fP) for each document and now you want to find all documents that are
images according to the MIME type.
.sp
The solution is very similar to the previous example: all we need is a map
function that is a little more clever than the first one. But first, an example
document:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": "Hugh Laurie",
    "_rev": "1\-9fded7deef52ac373119d05435581edf",
    "mime\-type": "image/jpg",
    "description": "some dude"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The clue lies in extracting the prefix that we want to search for from our
document and putting it into our view index. We use a regular expression to
match our prefix:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    if(doc["mime\-type"]) {
        // from the start (^) match everything that is not a slash ([^\e/]+) until
        // we find a slash (\e/). Slashes needs to be escaped with a backslash (\e/)
        var prefix = doc["mime\-type"].match(/^[^\e/]+\e//);
        if(prefix) {
          emit(prefix, null);
        }
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
We can now query this view with our desired MIME type prefix and not only find
all images, but also text, video, and all other formats:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/files/_design/finder/_view/by\-mime\-type?key="image/"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Aggregate Functions
.sp
How you would do this in SQL:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
SELECT COUNT(field) FROM table
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
How you can do this in CouchDB?
.sp
Use case: calculate a derived value from your data.
.sp
We haven’t explained reduce functions yet. Reduce functions are similar to
aggregate functions in SQL. They compute a value over multiple documents.
.sp
To explain the mechanics of reduce functions, we’ll create one that doesn’t make
a whole lot of sense. But this example is easy to understand. We’ll explore more
useful reductions later.
.sp
Reduce functions operate on the output of the map function (also called the map
result or intermediate result). The reduce function’s job, unsurprisingly, is to
reduce the list that the map function produces.
.sp
Here’s what our summing reduce function looks like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(keys, values) {
    var sum = 0;
    for(var idx in values) {
        sum = sum + values[idx];
    }
    return sum;
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Here’s an alternate, more idiomatic JavaScript version:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(keys, values) {
    var sum = 0;
    values.forEach(function(element) {
        sum = sum + element;
    });
    return sum;
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Don\(aqt miss effective built\-in \fIreduce functions\fP like
\fB_sum\fP and \fB_count\fP
.UNINDENT
.UNINDENT
.sp
This reduce function takes two arguments: a list of keys and a list of values.
For our summing purposes we can ignore the keys\-list and consider only the value
list. We’re looping over the list and add each item to a running total that
we’re returning at the end of the function.
.sp
You’ll see one difference between the map and the reduce function. The map
function uses \fBemit()\fP to create its result, whereas the reduce function
returns a value.
.sp
For example, from a list of integer values that specify the age, calculate the
sum of all years of life for the news headline,
\fI“786 life years present at event.”\fP A little contrived, but very simple and
thus good for demonstration purposes. Consider the documents and the map view we
used earlier in this document.
.sp
The reduce function to calculate the total age of all girls is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(keys, values) {
    return sum(values);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that, instead of the two earlier versions, we use CouchDB’s predefined
\fBsum()\fP function. It does the same thing as the other two, but it is such
a common piece of code that CouchDB has it included.
.sp
The result for our reduce view now looks like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"rows":[
    {"key":null,"value":15}
]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The total sum of all age fields in all our documents is 15. Just what we wanted.
The key member of the result object is null, as we can’t know anymore which
documents took part in the creation of the reduced result. We’ll cover more
advanced reduce cases later on.
.sp
As a rule of thumb, the reduce function should reduce to a single scalar value.
That is, an integer; a string; or a small, fixed\-size list or object that
includes an aggregated value (or values) from the values argument.
It should never just return values or similar. CouchDB will give you a warning
if you try to use reduce “the wrong way”:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "error":"reduce_overflow_error",
    "message":"Reduce output must shrink more rapidly: Current output: ..."
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Get Unique Values
.sp
How you would do this in SQL:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
SELECT DISTINCT field FROM table
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
How you can do this in CouchDB?
.sp
Getting unique values is not as easy as adding a keyword. But a reduce view and
a special query parameter give us the same result. Let’s say you want a list of
tags that your users have tagged themselves with and no duplicates.
.sp
First, let’s look at the source documents. We punt on \fB_id\fP and \fB_rev\fP
attributes here:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "name":"Chris",
    "tags":["mustache", "music", "couchdb"]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "name":"Noah",
    "tags":["hypertext", "philosophy", "couchdb"]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "name":"Jan",
    "tags":["drums", "bike", "couchdb"]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Next, we need a list of all tags. A map function will do the trick:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    if(doc.name && doc.tags) {
        doc.tags.forEach(function(tag) {
            emit(tag, null);
        });
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The result will look like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"total_rows":9,"offset":0,"rows":[
{"id":"3525ab874bc4965fa3cda7c549e92d30","key":"bike","value":null},
{"id":"3525ab874bc4965fa3cda7c549e92d30","key":"couchdb","value":null},
{"id":"53f82b1f0ff49a08ac79a9dff41d7860","key":"couchdb","value":null},
{"id":"da5ea89448a4506925823f4d985aabbd","key":"couchdb","value":null},
{"id":"3525ab874bc4965fa3cda7c549e92d30","key":"drums","value":null},
{"id":"53f82b1f0ff49a08ac79a9dff41d7860","key":"hypertext","value":null},
{"id":"da5ea89448a4506925823f4d985aabbd","key":"music","value":null},
{"id":"da5ea89448a4506925823f4d985aabbd","key":"mustache","value":null},
{"id":"53f82b1f0ff49a08ac79a9dff41d7860","key":"philosophy","value":null}
]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
As promised, these are all the tags, including duplicates. Since each document
gets run through the map function in isolation, it cannot know if the same key
has been emitted already. At this stage, we need to live with that. To achieve
uniqueness, we need a reduce:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(keys, values) {
    return true;
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This reduce doesn’t do anything, but it allows us to specify a special query
parameter when querying the view:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/dudes/_design/dude\-data/_view/tags?group=true
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB replies:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"rows":[
{"key":"bike","value":true},
{"key":"couchdb","value":true},
{"key":"drums","value":true},
{"key":"hypertext","value":true},
{"key":"music","value":true},
{"key":"mustache","value":true},
{"key":"philosophy","value":true}
]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In this case, we can ignore the value part because it is always true, but the
result includes a list of all our tags and no duplicates!
.sp
With a small change we can put the reduce to good use, too. Let’s see how many
of the non\-unique tags are there for each tag. To calculate the tag frequency,
we just use the summing up we already learned about. In the map function,
we emit a 1 instead of null:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    if(doc.name && doc.tags) {
        doc.tags.forEach(function(tag) {
            emit(tag, 1);
        });
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the reduce function, we return the sum of all values:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(keys, values) {
    return sum(values);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now, if we query the view with the \fB?group=true\fP parameter, we get back the
count for each tag:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"rows":[
{"key":"bike","value":1},
{"key":"couchdb","value":3},
{"key":"drums","value":1},
{"key":"hypertext","value":1},
{"key":"music","value":1},
{"key":"mustache","value":1},
{"key":"philosophy","value":1}
]}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Enforcing Uniqueness
.sp
How you would do this in SQL:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
UNIQUE KEY(column)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
How you can do this in CouchDB?
.sp
Use case: your applications require that a certain value exists only once in a
database.
.sp
This is an easy one: within a CouchDB database, each document must have a
unique \fB_id\fP field. If you require unique values in a database, just assign
them to a document’s \fB_id\fP field and CouchDB will enforce uniqueness for you.
.sp
There’s one caveat, though: in the distributed case, when you are running more
than one CouchDB node that accepts write requests, uniqueness can be guaranteed
only per node or outside of CouchDB. CouchDB will allow two identical IDs to be
written to two different nodes. On replication, CouchDB will detect a conflict
and flag the document accordingly.
.SS Pagination Recipe
.sp
This recipe explains how to paginate over view results.
Pagination is a user interface (UI) pattern that allows the display of a
large number of rows (\fIthe result set\fP) without loading all the rows into the
UI at once. A fixed\-size subset, the \fIpage\fP, is displayed along with next and
previous links or buttons that can move the \fIviewport\fP over the result set to
an adjacent page.
.sp
We assume you’re familiar with creating and querying documents and views as
well as the multiple view query options.
.SS Example Data
.sp
To have some data to work with, we’ll create a list of bands,
one document per band:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{ "name":"Biffy Clyro" }

{ "name":"Foo Fighters" }

{ "name":"Tool" }

{ "name":"Nirvana" }

{ "name":"Helmet" }

{ "name":"Tenacious D" }

{ "name":"Future of the Left" }

{ "name":"A Perfect Circle" }

{ "name":"Silverchair" }

{ "name":"Queens of the Stone Age" }

{ "name":"Kerub" }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS A View
.sp
We need a simple map function that gives us an alphabetical list of band
names. This should be easy, but we’re adding extra smarts to filter out “The”
and “A” in front of band names to put them into the right position:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    if(doc.name) {
        var name = doc.name.replace(/^(A|The) /, "");
        emit(name, null);
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The views result is an alphabetical list of band names. Now say we want to
display band names five at a time and have a link pointing to the next five
names that make up one page, and a link for the previous five,
if we’re not on the first page.
.sp
We learned how to use the \fBstartkey\fP, \fBlimit\fP, and \fBskip\fP parameters in
earlier documents. We’ll use these again here. First, let’s have a look at
the full result set:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"total_rows":11,"offset":0,"rows":[
    {"id":"a0746072bba60a62b01209f467ca4fe2","key":"Biffy Clyro","value":null},
    {"id":"b47d82284969f10cd1b6ea460ad62d00","key":"Foo Fighters","value":null},
    {"id":"45ccde324611f86ad4932555dea7fce0","key":"Tenacious D","value":null},
    {"id":"d7ab24bb3489a9010c7d1a2087a4a9e4","key":"Future of the Left","value":null},
    {"id":"ad2f85ef87f5a9a65db5b3a75a03cd82","key":"Helmet","value":null},
    {"id":"a2f31cfa68118a6ae9d35444fcb1a3cf","key":"Nirvana","value":null},
    {"id":"67373171d0f626b811bdc34e92e77901","key":"Kerub","value":null},
    {"id":"3e1b84630c384f6aef1a5c50a81e4a34","key":"Perfect Circle","value":null},
    {"id":"84a371a7b8414237fad1b6aaf68cd16a","key":"Queens of the Stone Age","value":null},
    {"id":"dcdaf08242a4be7da1a36e25f4f0b022","key":"Silverchair","value":null},
    {"id":"fd590d4ad53771db47b0406054f02243","key":"Tool","value":null}
]}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Setup
.sp
The mechanics of paging are very simple:
.INDENT 0.0
.IP \(bu 2
Display first page
.IP \(bu 2
If there are more rows to show, show next link
.IP \(bu 2
Draw subsequent page
.IP \(bu 2
If this is not the first page, show a previous link
.IP \(bu 2
If there are more rows to show, show next link
.UNINDENT
.sp
Or in a pseudo\-JavaScript snippet:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
var result = new Result();
var page = result.getPage();

page.display();

if(result.hasPrev()) {
    page.display_link(\(aqprev\(aq);
}

if(result.hasNext()) {
    page.display_link(\(aqnext\(aq);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Paging
.sp
To get the first five rows from the view result, you use the \fB?limit=5\fP
query parameter:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X GET http://127.0.0.1:5984/artists/_design/artists/_view/by\-name?limit=5
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The result:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"total_rows":11,"offset":0,"rows":[
    {"id":"a0746072bba60a62b01209f467ca4fe2","key":"Biffy Clyro","value":null},
    {"id":"b47d82284969f10cd1b6ea460ad62d00","key":"Foo Fighters","value":null},
    {"id":"45ccde324611f86ad4932555dea7fce0","key":"Tenacious D","value":null},
    {"id":"d7ab24bb3489a9010c7d1a2087a4a9e4","key":"Future of the Left","value":null},
    {"id":"ad2f85ef87f5a9a65db5b3a75a03cd82","key":"Helmet","value":null}
]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
By comparing the \fBtotal_rows\fP value to our \fBlimit\fP value,
we can determine if there are more pages to display. We also know by the
\fIoffset\fP member that we are on the first page. We can calculate the value for
\fBskip=\fP to get the results for the next page:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
var rows_per_page = 5;
var page = (offset / rows_per_page) + 1; // == 1
var skip = page * rows_per_page; // == 5 for the first page, 10 for the second ...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
So we query CouchDB with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X GET \(aqhttp://127.0.0.1:5984/artists/_design/artists/_view/by\-name?limit=5&skip=5\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note we have to use \fB\(aq\fP (single quotes) to escape the \fB&\fP character that is
special to the shell we execute curl in.
.sp
The result:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"total_rows":11,"offset":5,"rows":[
    {"id":"a2f31cfa68118a6ae9d35444fcb1a3cf","key":"Nirvana","value":null},
    {"id":"67373171d0f626b811bdc34e92e77901","key":"Kerub","value":null},
    {"id":"3e1b84630c384f6aef1a5c50a81e4a34","key":"Perfect Circle","value":null},
    {"id":"84a371a7b8414237fad1b6aaf68cd16a","key":"Queens of the Stone Age",
    "value":null},
    {"id":"dcdaf08242a4be7da1a36e25f4f0b022","key":"Silverchair","value":null}
]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Implementing the \fBhasPrev()\fP and \fBhasNext()\fP method is pretty
straightforward:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function hasPrev()
{
    return page > 1;
}

function hasNext()
{
    var last_page = Math.floor(total_rows / rows_per_page) +
        (total_rows % rows_per_page);
    return page != last_page;
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Paging (Alternate Method)
.sp
The method described above performed poorly with large skip values until
CouchDB 1.2. Additionally, some use cases may call for the following
alternate method even with newer versions of CouchDB. One such case is when
duplicate results should be prevented. Using skip alone it is possible for
new documents to be inserted during pagination which could change the offset
of the start of the subsequent page.
.sp
A correct solution is not much harder. Instead of slicing the result set
into equally sized pages, we look at 10 rows at a time and use \fBstartkey\fP to
jump to the next 10 rows. We even use skip, but only with the value 1.
.sp
Here is how it works:
.INDENT 0.0
.IP \(bu 2
Request \fIrows_per_page + 1\fP rows from the view
.IP \(bu 2
Display \fIrows_per_page\fP rows, \fIstore + 1\fP row as \fInext_startkey\fP and
\fInext_startkey_docid\fP
.IP \(bu 2
As page information, keep \fBstartkey\fP and \fInext_startkey\fP
.IP \(bu 2
Use the \fInext_*\fP values to create the next link, and use the others to
create the previous link
.UNINDENT
.sp
The trick to finding the next page is pretty simple. Instead of requesting 10
rows for a page, you request 11 rows, but display only 10 and use the values
in the 11th row as the \fBstartkey\fP for the next page. Populating the link to
the previous page is as simple as carrying the current \fBstartkey\fP over to the
next page. If there’s no previous \fBstartkey\fP, we are on the first page. We
stop displaying the link to the next page if we get \fIrows_per_page\fP or less
rows back. This is called linked list pagination, as we go from page to
page, or list item to list item, instead of jumping directly to a
pre\-computed page. There is one caveat, though. Can you spot it?
.sp
CouchDB view keys do not have to be unique; you can have multiple index
entries read. What if you have more index entries for a key than rows that
should be on a page? \fBstartkey\fP jumps to the first row, and you’d be screwed
if CouchDB didn’t have an additional parameter for you to use. All view keys
with the same value are internally sorted by \fIdocid\fP, that is, the ID of
the document that created that view row. You can use the \fBstartkey_docid\fP
and \fBendkey_docid\fP parameters to get subsets of these rows. For
pagination, we still don’t need \fBendkey_docid\fP, but \fBstartkey_docid\fP is very
handy. In addition to \fBstartkey\fP and \fBlimit\fP, you also use
\fBstartkey_docid\fP for pagination if, and only if, the extra row you fetch to
find the next page has the same key as the current \fBstartkey\fP\&.
.sp
It is important to note that the \fI*_docid\fP parameters only work in addition to
the \fI*key\fP parameters and are only useful to further narrow down the result set
of a view for a single key. They do not work on their own (the one exception
being the built\-in \fI_all_docs view\fP  that already sorts
by document ID).
.sp
The advantage of this approach is that all the key operations can be
performed on the super\-fast B\-tree index behind the view. Looking up a page
doesn’t include scanning through hundreds and thousands of rows unnecessarily.
.SS Jump to Page
.sp
One drawback of the linked list style pagination is that you can’t
pre\-compute the rows for a particular page from the page number and the rows
per page. Jumping to a specific page doesn’t really work. Our gut reaction,
if that concern is raised, is, “Not even Google is doing that!” and we tend
to get away with it. Google always pretends on the first page to find 10 more
pages of results. Only if you click on the second page (something very few
people actually do) might Google display a reduced set of pages. If you page
through the results, you get links for the previous and next 10 pages,
but no more. Pre\-computing the necessary \fBstartkey\fP and \fBstartkey_docid\fP
for 20 pages is a feasible operation and a pragmatic optimization to know the
rows for every page in a result set that is potentially tens of thousands
of rows long, or more.
.sp
If you really do need to jump to a page over the full range of documents (we
have seen applications that require that), you can still maintain an integer
value index as the view index and take a hybrid approach at solving pagination.
.sp
\fINote\fP: Previously, the functionality provided by CouchDB\(aqs design documents,
in combination with document attachments, was referred to as "CouchApps." The
general principle was that entire web applications could be hosted in CouchDB,
without need for an additional application server.
.sp
Use of CouchDB as a combined standalone database and application server is no
longer recommended. There are significant limitations to a pure CouchDB web
server application stack, including but not limited to: fully\-fledged
fine\-grained security, robust templating and scaffolding, complete developer
tooling, and most importantly, a thriving ecosystem of developers, modules and
frameworks to choose from.
.sp
The developers of CouchDB believe that web developers should pick "the right
tool for the right job". Use CouchDB as your database layer, in conjunction
with any number of other server\-side web application frameworks, such as the
entire Node.JS ecosystem, Python\(aqs Django and Flask, PHP\(aqs Drupal, Java\(aqs
Apache Struts, and more.
.SS Query Server
.sp
The \fIQuery server\fP is an external process that communicates with CouchDB by JSON
protocol through stdio interface and processed all
\fIdesign functions\fP calls:
\fIviews\fP, \fIshows\fP, \fIlists\fP and more.
.sp
The default query server is written in
\fIJavaScript\fP, running via \fI\%Mozilla SpiderMonkey\fP\&.
You can use other languages by setting a Query server key in the \fBlanguage\fP
property of a design document or the \fIContent\-Type\fP header of a
\fItemporary view\fP\&. Design documents that do not specify a \fBlanguage\fP property
are assumed to be of type \fIjavascript\fP\&.
.SS Query Server Protocol
.sp
A \fIQuery Server\fP is an external process that communicates with CouchDB via a
simple, custom JSON protocol over stdin/stdout. It is used to processes all
design functions calls: \fIviews\fP, \fIshows\fP, \fIlists\fP, \fIfilters\fP, \fIupdates\fP and
\fIvalidate_doc_update\fP\&.
.sp
CouchDB communicates with the Query Server process through stdin/stdout with
JSON messages that are terminated by a newline character. Messages that are
sent to the Query Server are always \fIarray\fP\-typed and follow the pattern
\fB[<command>, <*arguments>]\en\fP\&.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In the documentation examples, we omit the trailing \fB\en\fP for greater
readability. Also, examples contain formatted JSON values while real data
is transferred in compact mode without formatting spaces.
.UNINDENT
.UNINDENT
.SS \fBreset\fP
.INDENT 0.0
.TP
.B Command
\fBreset\fP
.TP
.B Arguments
\fIQuery server state\fP (optional)
.TP
.B Returns
\fBtrue\fP
.UNINDENT
.sp
This resets the state of the Query Server and makes it forget all previous
input. If applicable, this is the point to run garbage collection.
.sp
CouchDB sends:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
["reset"]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The Query Server answers:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
true
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To set up new Query Server state, the second argument is used with object data.
.sp
CouchDB sends:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
["reset", {"reduce_limit": true, "timeout": 5000}]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The Query Server answers:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
true
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBadd_lib\fP
.INDENT 0.0
.TP
.B Command
\fBadd_lib\fP
.TP
.B Arguments
CommonJS library object by \fBviews/lib\fP path
.TP
.B Returns
\fBtrue\fP
.UNINDENT
.sp
Adds \fICommonJS\fP library to Query Server state for further usage
in \fImap\fP functions.
.sp
CouchDB sends:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "add_lib",
    {
        "utils": "exports.MAGIC = 42;"
    }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The Query Server answers:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
true
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This library shouldn\(aqt have any side effects nor track its own state
or you\(aqll have a lot of happy debugging time if something goes wrong.
Remember that a complete index rebuild is a heavy operation and this is
the only way to fix mistakes with shared state.
.UNINDENT
.UNINDENT
.SS \fBadd_fun\fP
.INDENT 0.0
.TP
.B Command
\fBadd_fun\fP
.TP
.B Arguments
Map function source code.
.TP
.B Returns
\fBtrue\fP
.UNINDENT
.sp
When creating or updating a view, this is how the Query Server is sent the
view function for evaluation. The Query Server should parse, compile, and
evaluate the function it receives to make it callable later. If this fails, the
Query Server returns an error. CouchDB may store multiple functions before
sending any documents.
.sp
CouchDB sends:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "add_fun",
    "function(doc) { if(doc.score > 50) emit(null, {\(aqplayer_name\(aq: doc.name}); }"
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The Query Server answers:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
true
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBmap_doc\fP
.INDENT 0.0
.TP
.B Command
\fBmap_doc\fP
.TP
.B Arguments
Document object
.TP
.B Returns
Array of key\-value pairs per applied \fIfunction\fP
.UNINDENT
.sp
When the view function is stored in the Query Server, CouchDB starts sending
all the documents in the database, one at a time. The Query Server calls the
previously stored functions one after another with a document and stores its
result. When all functions have been called, the result is returned as a JSON
string.
.sp
CouchDB sends:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "map_doc",
    {
        "_id": "8877AFF9789988EE",
        "_rev": "3\-235256484",
        "name": "John Smith",
        "score": 60
    }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the function above is the only function stored, the Query Server answers:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    [
        [null, {"player_name": "John Smith"}]
    ]
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
That is, an array with the result for every function for the given document.
.sp
If a document is to be excluded from the view, the array should be empty.
.sp
CouchDB sends:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "map_doc",
    {
        "_id": "9590AEB4585637FE",
        "_rev": "1\-674684684",
        "name": "Jane Parker",
        "score": 43
    }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The Query Server answers:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[[]]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBreduce\fP
.INDENT 0.0
.TP
.B Command
\fBreduce\fP
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
Reduce function source
.IP \(bu 2
Array of \fImap function\fP results where each item represented
in format \fB[[key, id\-of\-doc], value]\fP
.UNINDENT
.TP
.B Returns
Array with pair values: \fBtrue\fP and another array with reduced result
.UNINDENT
.sp
If the view has a reduce function defined, CouchDB will enter into the reduce
phase. The Query Server will receive a list of reduce functions and some map
results on which it can apply them.
.sp
CouchDB sends:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "reduce",
    [
        "function(k, v) { return sum(v); }"
    ],
    [
        [[1, "699b524273605d5d3e9d4fd0ff2cb272"], 10],
        [[2, "c081d0f69c13d2ce2050d684c7ba2843"], 20],
        [[null, "foobar"], 3]
    ]
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The Query Server answers:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    true,
    [33]
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that even though the view server receives the map results in the form
\fB[[key, id\-of\-doc], value]\fP, the function may receive them in a different
form. For example, the JavaScript Query Server applies functions on the list of
keys and the list of values.
.SS \fBrereduce\fP
.INDENT 0.0
.TP
.B Command
\fBrereduce\fP
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
Reduce function source
.IP \(bu 2
List of values
.UNINDENT
.UNINDENT
.sp
When building a view, CouchDB will apply the reduce step directly to the output
of the map step and the rereduce step to the output of a previous reduce step.
.sp
CouchDB will send a list of reduce functions and a list of values, with no keys
or document ids to the rereduce step.
.sp
CouchDB sends:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "rereduce",
    [
        "function(k, v, r) { return sum(v); }"
    ],
    [
        33,
        55,
        66
    ]
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The Query Server answers:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    true,
    [154]
]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBddoc\fP
.INDENT 0.0
.TP
.B Command
\fBddoc\fP
.TP
.B Arguments
Array of objects.
.INDENT 7.0
.IP \(bu 2
First phase (ddoc initialization):
.INDENT 2.0
.IP \(bu 2
\fB"new"\fP
.IP \(bu 2
Design document \fB_id\fP
.IP \(bu 2
Design document object
.UNINDENT
.IP \(bu 2
Second phase (design function execution):
.INDENT 2.0
.IP \(bu 2
Design document \fB_id\fP
.IP \(bu 2
Function path as an array of object keys
.IP \(bu 2
Array of function arguments
.UNINDENT
.UNINDENT
.TP
.B Returns
.INDENT 7.0
.IP \(bu 2
First phase (ddoc initialization): \fBtrue\fP
.IP \(bu 2
Second phase (design function execution): custom object depending on
executed function
.UNINDENT
.UNINDENT
.sp
This command acts in two phases: \fIddoc\fP registration and \fIdesign function\fP
execution.
.sp
In the first phase CouchDB sends a full design document content to the Query
Server to let it cache it by \fB_id\fP value for further function execution.
.sp
To do this, CouchDB sends:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "ddoc",
    "new",
    "_design/temp",
    {
        "_id": "_design/temp",
        "_rev": "8\-d7379de23a751dc2a19e5638a7bbc5cc",
        "language": "javascript",
        "shows": {
            "request": "function(doc,req){ return {json: req}; }",
            "hello": "function(doc,req){ return {body: \(aqHello, \(aq + (doc || {})._id + \(aq!\(aq}; }"
        }
    }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The Query Server answers:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
true
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After this, the design document will be ready to serve subcommands in the
second phase.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Each \fBddoc\fP subcommand is the root design document key, so they are not
actually subcommands, but first elements of the JSON path that may be handled
and processed.
.sp
The pattern for subcommand execution is common:
.sp
\fB["ddoc", <design_doc_id>, [<subcommand>, <funcname>], [<argument1>, <argument2>, ...]]\fP
.UNINDENT
.UNINDENT
.SS \fBshows\fP
.INDENT 0.0
.TP
.B Command
\fBddoc\fP
.TP
.B SubCommand
\fBshows\fP
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
Document object or \fBnull\fP if document \fIid\fP isn\(aqt specified in request
.IP \(bu 2
\fIrequest_object\fP
.UNINDENT
.TP
.B Returns
Array with two elements:
.INDENT 7.0
.IP \(bu 2
\fB"resp"\fP
.IP \(bu 2
\fIresponse_object\fP
.UNINDENT
.UNINDENT
.sp
Executes \fIshow function\fP\&.
.sp
Couchdb sends:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "ddoc",
    "_design/temp",
    [
        "shows",
        "doc"
    ],
    [
        null,
        {
            "info": {
                "db_name": "test",
                "doc_count": 8,
                "doc_del_count": 0,
                "update_seq": 105,
                "purge_seq": 0,
                "compact_running": false,
                "disk_size": 15818856,
                "data_size": 1535048,
                "instance_start_time": "1359952188595857",
                "disk_format_version": 6,
                "committed_update_seq": 105
            },
            "id": null,
            "uuid": "169cb4cc82427cc7322cb4463d0021bb",
            "method": "GET",
            "requested_path": [
                "api",
                "_design",
                "temp",
                "_show",
                "request"
            ],
            "path": [
                "api",
                "_design",
                "temp",
                "_show",
                "request"
            ],
            "raw_path": "/api/_design/temp/_show/request",
            "query": {},
            "headers": {
                "Accept": "*/*",
                "Host": "localhost:5984",
                "User\-Agent": "curl/7.26.0"
            },
            "body": "undefined",
            "peer": "127.0.0.1",
            "form": {},
            "cookie": {},
            "userCtx": {
                "db": "api",
                "name": null,
                "roles": [
                    "_admin"
                ]
            },
            "secObj": {}
        }
    ]
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The Query Server sends:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "resp",
    {
        "body": "Hello, undefined!"
    }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBlists\fP
.INDENT 0.0
.TP
.B Command
\fBddoc\fP
.TP
.B SubCommand
\fBlists\fP
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fIview_head_info_object\fP:
.IP \(bu 2
\fIrequest_object\fP
.UNINDENT
.TP
.B Returns
Array. See below for details.
.UNINDENT
.sp
Executes \fIlist function\fP\&.
.sp
The communication protocol for \fIlist\fP functions is a bit complex so let\(aqs use
an example to illustrate.
.sp
Assume we have view a function that emits \fIid\-rev\fP pairs:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc) {
    emit(doc._id, doc._rev);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And we\(aqd like to emulate \fB_all_docs\fP JSON response with list function. Our
\fIfirst\fP version of the list functions looks like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(head, req){
    start({\(aqheaders\(aq: {\(aqContent\-Type\(aq: \(aqapplication/json\(aq}});
    var resp = head;
    var rows = [];
    while(row=getRow()){
        rows.push(row);
    }
    resp.rows = rows;
    return toJSON(resp);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The whole communication session during list function execution could be divided
on three parts:
.INDENT 0.0
.IP 1. 3
Initialization
.sp
The first returned object from the list function is an array with the
following structure:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
["start", <chunks>, <headers>]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Where \fB<chunks>\fP is an array of text chunks that will be sent to the client
and \fB<headers>\fP is an object with response HTTP headers.
.sp
This message is sent from the Query Server to CouchDB on the
\fBstart()\fP call which initializes the HTTP response to the client:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "start",
    [],
    {
        "headers": {
            "Content\-Type": "application/json"
        }
    }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After this, the list function may start to process view rows.
.IP 2. 3
View Processing
.sp
Since view results can be extremely large, it is not wise to pass all its
rows in a single command. Instead, CouchDB can send view rows one by one
to the Query Server allowing view processing and output generation to be
processed as a stream.
.sp
CouchDB sends a special array that carries view row data:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "list_row",
    {
        "id": "0cb42c267fe32d4b56b3500bc503e030",
        "key": "0cb42c267fe32d4b56b3500bc503e030",
        "value": "1\-967a00dff5e02add41819138abb3284d"
    }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the Query Server has something to return on this, it returns an array
with a \fB"chunks"\fP item in the head and an array of data in the tail. For
this example it has nothing to return, so the response will be:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
[
  "chunks",
  []
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When there are no more view rows to process, CouchDB sends a \fIlist_end\fP
message to signify there is no more data to send:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
["list_end"]
.ft P
.fi
.UNINDENT
.UNINDENT
.IP 3. 3
Finalization
.sp
The last stage of the communication process is the returning \fIlist tail\fP:
the last data chunk. After this, processing of the list function will be
complete and the client will receive a complete response.
.sp
For our example the last message is:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "end",
    [
        "{\e"total_rows\e":2,\e"offset\e":0,\e"rows\e":[{\e"id\e":\e"0cb42c267fe32d4b56b3500bc503e030\e",\e"key\e":\e"0cb42c267fe32d4b56b3500bc503e030\e",\e"value\e":\e"1\-967a00dff5e02add41819138abb3284d\e"},{\e"id\e":\e"431926a69504bde41851eb3c18a27b1f\e",\e"key\e":\e"431926a69504bde41851eb3c18a27b1f\e",\e"value\e":\e"1\-967a00dff5e02add41819138abb3284d\e"}]}"
    ]
]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
In this example, we have returned our result in a single message from the Query
Server. This is okay for small numbers of rows, but for large data sets,
perhaps with millions of documents or millions of view rows, this would not be
acceptable.
.sp
Let\(aqs fix our list function and see the changes in communication:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(head, req){
    start({\(aqheaders\(aq: {\(aqContent\-Type\(aq: \(aqapplication/json\(aq}});
    send(\(aq{\(aq);
    send(\(aq"total_rows":\(aq + toJSON(head.total_rows) + \(aq,\(aq);
    send(\(aq"offset":\(aq + toJSON(head.offset) + \(aq,\(aq);
    send(\(aq"rows":[\(aq);
    if (row=getRow()){
        send(toJSON(row));
    }
    while(row=getRow()){
        send(\(aq,\(aq + toJSON(row));
    }
    send(\(aq]\(aq);
    return \(aq}\(aq;
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
"Wait, what?" \- you\(aqd like to ask. Yes, we\(aqd build JSON response manually by
string chunks, but let\(aqs take a look on logs:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[Wed, 24 Jul 2013 05:45:30 GMT] [debug] [<0.19191.1>] OS Process #Port<0.4444> Output :: ["start",["{","\e"total_rows\e":2,","\e"offset\e":0,","\e"rows\e":["],{"headers":{"Content\-Type":"application/json"}}]
[Wed, 24 Jul 2013 05:45:30 GMT] [info] [<0.18963.1>] 127.0.0.1 \- \- GET /blog/_design/post/_list/index/all_docs 200
[Wed, 24 Jul 2013 05:45:30 GMT] [debug] [<0.19191.1>] OS Process #Port<0.4444> Input  :: ["list_row",{"id":"0cb42c267fe32d4b56b3500bc503e030","key":"0cb42c267fe32d4b56b3500bc503e030","value":"1\-967a00dff5e02add41819138abb3284d"}]
[Wed, 24 Jul 2013 05:45:30 GMT] [debug] [<0.19191.1>] OS Process #Port<0.4444> Output :: ["chunks",["{\e"id\e":\e"0cb42c267fe32d4b56b3500bc503e030\e",\e"key\e":\e"0cb42c267fe32d4b56b3500bc503e030\e",\e"value\e":\e"1\-967a00dff5e02add41819138abb3284d\e"}"]]
[Wed, 24 Jul 2013 05:45:30 GMT] [debug] [<0.19191.1>] OS Process #Port<0.4444> Input  :: ["list_row",{"id":"431926a69504bde41851eb3c18a27b1f","key":"431926a69504bde41851eb3c18a27b1f","value":"1\-967a00dff5e02add41819138abb3284d"}]
[Wed, 24 Jul 2013 05:45:30 GMT] [debug] [<0.19191.1>] OS Process #Port<0.4444> Output :: ["chunks",[",{\e"id\e":\e"431926a69504bde41851eb3c18a27b1f\e",\e"key\e":\e"431926a69504bde41851eb3c18a27b1f\e",\e"value\e":\e"1\-967a00dff5e02add41819138abb3284d\e"}"]]
[Wed, 24 Jul 2013 05:45:30 GMT] [debug] [<0.19191.1>] OS Process #Port<0.4444> Input  :: ["list_end"]
[Wed, 24 Jul 2013 05:45:30 GMT] [debug] [<0.19191.1>] OS Process #Port<0.4444> Output :: ["end",["]","}"]]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note, that now the Query Server sends response by lightweight chunks and if
our communication process was extremely slow, the client will see how response
data appears on their screen. Chunk by chunk, without waiting for the complete
result, like they have for our previous list function.
.SS \fBupdates\fP
.INDENT 0.0
.TP
.B Command
\fBddoc\fP
.TP
.B SubCommand
\fBupdates\fP
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
Document object or \fBnull\fP if document \fIid\fP wasn\(aqt specified in request
.IP \(bu 2
\fIrequest_object\fP
.UNINDENT
.TP
.B Returns
Array with there elements:
.INDENT 7.0
.IP \(bu 2
\fB"up"\fP
.IP \(bu 2
Document object or \fBnull\fP if nothing should be stored
.IP \(bu 2
\fIresponse_object\fP
.UNINDENT
.UNINDENT
.sp
Executes \fIupdate function\fP\&.
.sp
CouchDB sends:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "ddoc",
    "_design/id",
    [
        "updates",
        "nothing"
    ],
    [
        null,
        {
            "info": {
                "db_name": "test",
                "doc_count": 5,
                "doc_del_count": 0,
                "update_seq": 16,
                "purge_seq": 0,
                "compact_running": false,
                "disk_size": 8044648,
                "data_size": 7979601,
                "instance_start_time": "1374612186131612",
                "disk_format_version": 6,
                "committed_update_seq": 16
            },
            "id": null,
            "uuid": "7b695cb34a03df0316c15ab529002e69",
            "method": "POST",
            "requested_path": [
                "test",
                "_design",
                "1139",
                "_update",
                "nothing"
            ],
            "path": [
                "test",
                "_design",
                "1139",
                "_update",
                "nothing"
            ],
            "raw_path": "/test/_design/1139/_update/nothing",
            "query": {},
            "headers": {
                "Accept": "*/*",
                "Accept\-Encoding": "identity, gzip, deflate, compress",
                "Content\-Length": "0",
                "Host": "localhost:5984"
            },
            "body": "",
            "peer": "127.0.0.1",
            "form": {},
            "cookie": {},
            "userCtx": {
                "db": "test",
                "name": null,
                "roles": [
                    "_admin"
                ]
            },
            "secObj": {}
        }
    ]
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The Query Server answers:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "up",
    null,
    {"body": "document id wasn\(aqt provided"}
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or in case of successful update:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "up",
    {
        "_id": "7b695cb34a03df0316c15ab529002e69",
        "hello": "world!"
    },
    {"body": "document was updated"}
]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBfilters\fP
.INDENT 0.0
.TP
.B Command
\fBddoc\fP
.TP
.B SubCommand
\fBfilters\fP
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
Array of document objects
.IP \(bu 2
\fIrequest_object\fP
.UNINDENT
.TP
.B Returns
Array of two elements:
.INDENT 7.0
.IP \(bu 2
\fBtrue\fP
.IP \(bu 2
Array of booleans in the same order of input documents.
.UNINDENT
.UNINDENT
.sp
Executes \fIfilter function\fP\&.
.sp
CouchDB sends:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "ddoc",
    "_design/test",
    [
        "filters",
        "random"
    ],
    [
        [
            {
                "_id": "431926a69504bde41851eb3c18a27b1f",
                "_rev": "1\-967a00dff5e02add41819138abb3284d",
                "_revisions": {
                    "start": 1,
                    "ids": [
                        "967a00dff5e02add41819138abb3284d"
                    ]
                }
            },
            {
                "_id": "0cb42c267fe32d4b56b3500bc503e030",
                "_rev": "1\-967a00dff5e02add41819138abb3284d",
                "_revisions": {
                    "start": 1,
                    "ids": [
                        "967a00dff5e02add41819138abb3284d"
                    ]
                }
            }
        ],
        {
            "info": {
                "db_name": "test",
                "doc_count": 5,
                "doc_del_count": 0,
                "update_seq": 19,
                "purge_seq": 0,
                "compact_running": false,
                "disk_size": 8056936,
                "data_size": 7979745,
                "instance_start_time": "1374612186131612",
                "disk_format_version": 6,
                "committed_update_seq": 19
            },
            "id": null,
            "uuid": "7b695cb34a03df0316c15ab529023a81",
            "method": "GET",
            "requested_path": [
                "test",
                "_changes?filter=test",
                "random"
            ],
            "path": [
                "test",
                "_changes"
            ],
            "raw_path": "/test/_changes?filter=test/random",
            "query": {
                "filter": "test/random"
            },
            "headers": {
                "Accept": "application/json",
                "Accept\-Encoding": "identity, gzip, deflate, compress",
                "Content\-Length": "0",
                "Content\-Type": "application/json; charset=utf\-8",
                "Host": "localhost:5984"
            },
            "body": "",
            "peer": "127.0.0.1",
            "form": {},
            "cookie": {},
            "userCtx": {
                "db": "test",
                "name": null,
                "roles": [
                    "_admin"
                ]
            },
            "secObj": {}
        }
    ]
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The Query Server answers:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    true,
    [
        true,
        false
    ]
]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBviews\fP
.INDENT 0.0
.TP
.B Command
\fBddoc\fP
.TP
.B SubCommand
\fBviews\fP
.TP
.B Arguments
Array of document objects
.TP
.B Returns
Array of two elements:
.INDENT 7.0
.IP \(bu 2
\fBtrue\fP
.IP \(bu 2
Array of booleans in the same order of input documents.
.UNINDENT
.UNINDENT
.sp
New in version 1.2.

.sp
Executes \fIview function\fP in place of the filter.
.sp
Acts in the same way as \fIqs/ddoc/filters\fP command.
.SS \fBvalidate_doc_update\fP
.INDENT 0.0
.TP
.B Command
\fBddoc\fP
.TP
.B SubCommand
\fBvalidate_doc_update\fP
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
Document object that will be stored
.IP \(bu 2
Document object that will be replaced
.IP \(bu 2
\fIuserctx_object\fP
.IP \(bu 2
\fIsecurity_object\fP
.UNINDENT
.TP
.B Returns
\fB1\fP
.UNINDENT
.sp
Executes \fIvalidation function\fP\&.
.sp
CouchDB send:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "ddoc",
    "_design/id",
    ["validate_doc_update"],
    [
        {
            "_id": "docid",
            "_rev": "2\-e0165f450f6c89dc6b071c075dde3c4d",
            "score": 10
        },
        {
            "_id": "docid",
            "_rev": "1\-9f798c6ad72a406afdbf470b9eea8375",
            "score": 4
        },
        {
            "name": "Mike",
            "roles": ["player"]
        },
        {
            "admins": {},
            "members": []
        }
    ]
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The Query Server answers:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
While the only valid response for this command is \fBtrue\fP, to prevent the
document from being saved, the Query Server needs to raise an error:
\fBforbidden\fP or \fBunauthorized\fP; these errors will be turned into correct
\fBHTTP 403\fP and \fBHTTP 401\fP responses respectively.
.UNINDENT
.UNINDENT
.SS \fBrewrites\fP
.INDENT 0.0
.TP
.B Command
\fBddoc\fP
.TP
.B SubCommand
\fBrewrites\fP
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fIrequest2_object\fP
.UNINDENT
.TP
.B Returns
\fB1\fP
.UNINDENT
.sp
Executes \fIrewrite function\fP\&.
.sp
CouchDB send:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "ddoc",
    "_design/id",
    ["rewrites"],
    [
        {
            "method": "POST",
            "requested_path": [
                "test",
                "_design",
                "1139",
                "_update",
                "nothing"
            ],
            "path": [
                "test",
                "_design",
                "1139",
                "_update",
                "nothing"
            ],
            "raw_path": "/test/_design/1139/_update/nothing",
            "query": {},
            "headers": {
                "Accept": "*/*",
                "Accept\-Encoding": "identity, gzip, deflate, compress",
                "Content\-Length": "0",
                "Host": "localhost:5984"
            },
            "body": "",
            "peer": "127.0.0.1",
            "cookie": {},
            "userCtx": {
                "db": "test",
                "name": null,
                "roles": [
                    "_admin"
                ]
            },
            "secObj": {}
        }
    ]
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The Query Server answers:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "ok",
    {
        "path": "some/path",
        "query": {"key1": "value1", "key2": "value2"},
        "method": "METHOD",
        "headers": {"Header1": "value1", "Header2": "value2"},
        "body": ""
    }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or in case of direct response:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "ok",
    {
        "headers": {"Content\-Type": "text/plain"},
        "body": "Welcome!",
        "code": 200
    }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or for immediate redirect:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    "ok",
    {
        "headers": {"Location": "http://example.com/path/"},
        "code": 302
    }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Returning errors
.sp
When something goes wrong, the Query Server can inform CouchDB by sending a
special message in response to the received command.
.sp
Error messages prevent further command execution and return an error description
to CouchDB. Errors are logically divided into two groups:
.INDENT 0.0
.IP \(bu 2
\fICommon errors\fP\&. These errors only break the current Query Server command and
return the error info to the CouchDB instance \fIwithout\fP terminating the Query
Server process.
.IP \(bu 2
\fIFatal errors\fP\&. Fatal errors signal a condition that cannot be recovered.
For instance, if your a design function is unable to import a third party
module, it\(aqs better to count such error as fatal and terminate whole process.
.UNINDENT
.SS \fBerror\fP
.sp
To raise an error, the Query Server should respond with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
["error", "error_name", "reason why"]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fB"error_name"\fP helps to classify problems by their type e.g. if it\(aqs
\fB"value_error"\fP to indicate improper data, \fB"not_found"\fP to indicate a
missing resource and \fB"type_error"\fP to indicate an improper data type.
.sp
The \fB"reason why"\fP explains in human\-readable terms what went wrong, and
possibly how to resolve it.
.sp
For example, calling \fIupdatefun\fP against a non\-existent document could
produce the error message:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
["error", "not_found", "Update function requires existent document"]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBforbidden\fP
.sp
The \fIforbidden\fP error is widely used by \fIvdufun\fP to stop further function
processing and prevent storage of the new document revision. Since this is not
actually an error, but an assertion against user actions, CouchDB doesn\(aqt log
it at \fI"error"\fP level, but returns \fIHTTP 403 Forbidden\fP response with error
information object.
.sp
To raise this error, the Query Server should respond with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"forbidden": "reason why"}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBunauthorized\fP
.sp
The \fIunauthorized\fP error mostly acts like \fIforbidden\fP one, but with
the meaning of \fIplease authorize first\fP\&. This small difference helps end users
to understand what they can do to solve the problem. Similar to \fIforbidden\fP,
CouchDB doesn\(aqt log it at \fI"error"\fP level, but returns a \fIHTTP 401 Unauthorized\fP
response with an error information object.
.sp
To raise this error, the Query Server should respond with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"unauthorized": "reason why"}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Logging
.sp
At any time, the Query Server may send some information that will be saved in
CouchDB\(aqs log file. This is done by sending a special \fIlog\fP object with a single
argument, on a separate line:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
["log", "some message"]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CouchDB does not respond, but writes the received message to the log file:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[Sun, 13 Feb 2009 23:31:30 GMT] [info] [<0.72.0>] Query Server Log Message: some message
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
These messages are only logged at \fBinfo level\fP\&.
.SS JavaScript
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
While every design function has access to all JavaScript objects, the table
below describes appropriate usage cases. For example, you may use
\fBemit()\fP in \fImapfun\fP, but \fBgetRow()\fP is not permitted
during \fImapfun\fP\&.
.UNINDENT
.UNINDENT
.TS
center;
|l|l|.
_
T{
JS Function
T}	T{
Reasonable to use in design doc functions
T}
_
T{
\fBemit()\fP
T}	T{
\fImapfun\fP
T}
_
T{
\fBgetRow()\fP
T}	T{
\fIlistfun\fP
T}
_
T{
\fBJSON\fP
T}	T{
any
T}
_
T{
\fBisArray()\fP
T}	T{
any
T}
_
T{
\fBlog()\fP
T}	T{
any
T}
_
T{
\fBprovides()\fP
T}	T{
\fIshowfun\fP, \fIlistfun\fP
T}
_
T{
\fBregisterType()\fP
T}	T{
\fIshowfun\fP, \fIlistfun\fP
T}
_
T{
\fBrequire()\fP
T}	T{
any, except \fIreducefun\fP
T}
_
T{
\fBsend()\fP
T}	T{
\fIlistfun\fP
T}
_
T{
\fBstart()\fP
T}	T{
\fIlistfun\fP
T}
_
T{
\fBsum()\fP
T}	T{
any
T}
_
T{
\fBtoJSON()\fP
T}	T{
any
T}
_
.TE
.SS Design functions context
.sp
Each design function executes in a special context of predefined objects,
modules and functions:
.INDENT 0.0
.TP
.B emit(key, value)
Emits a \fIkey\fP\-\fIvalue\fP pair for further processing by CouchDB after the map
function is done.
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBkey\fP \-\- The view key
.IP \(bu 2
\fBvalue\fP \-\- The \fIkey\fP\(aqs associated value
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc){
    emit(doc._id, doc._rev);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B getRow()
Extracts the next row from a related view result.
.INDENT 7.0
.TP
.B Returns
View result row
.TP
.B Return type
object
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
function(head, req){
    send(\(aq[\(aq);
    row = getRow();
    if (row){
        send(toJSON(row));
        while(row = getRow()){
            send(\(aq,\(aq);
            send(toJSON(row));
        }
    }
    return \(aq]\(aq;
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B JSON
\fI\%JSON2\fP
object.
.UNINDENT
.INDENT 0.0
.TP
.B isArray(obj)
A helper function to check if the provided value is an \fIArray\fP\&.
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBobj\fP \-\- Any JavaScript value
.UNINDENT
.TP
.B Returns
\fBtrue\fP if \fIobj\fP is \fIArray\fP\-typed, \fBfalse\fP otherwise
.TP
.B Return type
boolean
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B log(message)
Log a message to the CouchDB log (at the \fIINFO\fP level).
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBmessage\fP \-\- Message to be logged
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc){
    log(\(aqProcesing doc \(aq + doc[\(aq_id\(aq]);
    emit(doc[\(aq_id\(aq], null);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After the map function has run, the following line can be found in CouchDB
logs (e.g. at \fI/var/log/couchdb/couch.log\fP):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[Sat, 03 Nov 2012 17:38:02 GMT] [info] [<0.7543.0>] OS Process #Port<0.3289> Log :: Processing doc 8d300b86622d67953d102165dbe99467
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B provides(key, func)
Registers callable handler for specified MIME key.
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBkey\fP \-\- MIME key previously defined by \fBregisterType()\fP
.IP \(bu 2
\fBfunc\fP \-\- MIME type handler
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B registerType(key, *mimes)
Registers list of MIME types by associated \fIkey\fP\&.
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBkey\fP \-\- MIME types
.IP \(bu 2
\fBmimes\fP \-\- MIME types enumeration
.UNINDENT
.UNINDENT
.sp
Predefined mappings (\fIkey\fP\-\fIarray\fP):
.INDENT 7.0
.IP \(bu 2
\fBall\fP: \fB*/*\fP
.IP \(bu 2
\fBtext\fP: \fBtext/plain; charset=utf\-8\fP, \fBtxt\fP
.IP \(bu 2
\fBhtml\fP: \fBtext/html; charset=utf\-8\fP
.IP \(bu 2
\fBxhtml\fP: \fBapplication/xhtml+xml\fP, \fBxhtml\fP
.IP \(bu 2
\fBxml\fP: \fBapplication/xml\fP, \fBtext/xml\fP, \fBapplication/x\-xml\fP
.IP \(bu 2
\fBjs\fP: \fBtext/javascript\fP, \fBapplication/javascript\fP,
\fBapplication/x\-javascript\fP
.IP \(bu 2
\fBcss\fP: \fBtext/css\fP
.IP \(bu 2
\fBics\fP: \fBtext/calendar\fP
.IP \(bu 2
\fBcsv\fP: \fBtext/csv\fP
.IP \(bu 2
\fBrss\fP: \fBapplication/rss+xml\fP
.IP \(bu 2
\fBatom\fP: \fBapplication/atom+xml\fP
.IP \(bu 2
\fByaml\fP: \fBapplication/x\-yaml\fP, \fBtext/yaml\fP
.IP \(bu 2
\fBmultipart_form\fP: \fBmultipart/form\-data\fP
.IP \(bu 2
\fBurl_encoded_form\fP: \fBapplication/x\-www\-form\-urlencoded\fP
.IP \(bu 2
\fBjson\fP: \fBapplication/json\fP, \fBtext/x\-json\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B require(path)
Loads CommonJS module by a specified \fIpath\fP\&. The path should not start with
a slash.
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBpath\fP \-\- A CommonJS module path started from design document root
.UNINDENT
.TP
.B Returns
Exported statements
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B send(chunk)
Sends a single string \fIchunk\fP in response.
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBchunk\fP \-\- Text chunk
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
function(head, req){
    send(\(aqHello,\(aq);
    send(\(aq \(aq);
    send(\(aqCouch\(aq);
    return ;
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B start(init_resp)
Initiates chunked response. As an option, a custom
\fIresponse\fP object may be sent at this point.
For \fIlist\fP\-functions only!
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
list functions may set the \fIHTTP response code\fP and \fIheaders\fP by calling
this function. This function must be called before \fBsend()\fP,
\fBgetRow()\fP or a \fIreturn\fP statement; otherwise, the query server will
implicitly call this function with the empty object (\fB{}\fP).
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
function(head, req){
    start({
        "code": 302,
        "headers": {
            "Location": "http://couchdb.apache.org"
        }
    });
    return "Relax!";
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B sum(arr)
Sum \fIarr\fP\(aqs items.
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBarr\fP \-\- Array of numbers
.UNINDENT
.TP
.B Return type
number
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B toJSON(obj)
Encodes \fIobj\fP to JSON string. This is an alias for the \fBJSON.stringify\fP
method.
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBobj\fP \-\- JSON\-encodable object
.UNINDENT
.TP
.B Returns
JSON string
.UNINDENT
.UNINDENT
.SS CommonJS Modules
.sp
Support for \fI\%CommonJS Modules\fP
(introduced in CouchDB 0.11.0) allows you to create modular design functions
without the need for duplication of functionality.
.sp
Here\(aqs a CommonJS module that checks user permissions:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function user_context(userctx, secobj) {
    var is_admin = function() {
        return userctx.indexOf(\(aq_admin\(aq) != \-1;
    }
    return {\(aqis_admin\(aq: is_admin}
}

exports[\(aquser\(aq] = user_context
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Each module has access to additional global variables:
.INDENT 0.0
.IP \(bu 2
\fBmodule\fP (\fIobject\fP): Contains information about the stored module
.INDENT 2.0
.IP \(bu 2
\fBid\fP (\fIstring\fP): The module id; a JSON path in ddoc context
.IP \(bu 2
\fBcurrent\fP (\fIcode\fP): Compiled module code object
.IP \(bu 2
\fBparent\fP (\fIobject\fP): Parent frame
.IP \(bu 2
\fBexports\fP (\fIobject\fP): Export statements
.UNINDENT
.IP \(bu 2
\fBexports\fP (\fIobject\fP): Shortcut to the \fBmodule.exports\fP object
.UNINDENT
.sp
The CommonJS module can be added to a design document, like so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "views": {
        "lib": {
            "security": "function user_context(userctx, secobj) { ... }"
        }
    },
    "validate_doc_update": "function(newdoc, olddoc, userctx, secobj) {
        user = require(\(aqviews/lib/security\(aq).user(userctx, secobj);
        return user.is_admin();
    }"
    "_id": "_design/test"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Modules paths are relative to the design document\(aqs \fBviews\fP object, but
modules can only be loaded from the object referenced via \fBlib\fP\&. The
\fBlib\fP structure can still be used for view functions as well, by simply
storing view functions at e.g. \fBviews.lib.map\fP, \fBviews.lib.reduce\fP, etc.
.SS Erlang
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The Erlang query server is disabled by default.
Read \fIconfiguration guide\fP about
reasons why and how to enable it.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B Emit(Id, Value)
Emits \fIkey\fP\-\fIvalue\fP pairs to view indexer process.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
fun({Doc}) \->
    <<K,_/binary>> = proplists:get_value(<<"_rev">>, Doc, null),
    V = proplists:get_value(<<"_id">>, Doc, null),
    Emit(<<K>>, V)
end.
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B FoldRows(Fun, Acc)
Helper to iterate over all rows in a list function.
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBFun\fP \-\- Function object.
.IP \(bu 2
\fBAcc\fP \-\- The value previously returned by \fIFun\fP\&.
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
fun(Head, {Req}) \->
    Fun = fun({Row}, Acc) \->
        Id = couch_util:get_value(<<"id">>, Row),
        Send(list_to_binary(io_lib:format("Previous doc id: ~p~n", [Acc]))),
        Send(list_to_binary(io_lib:format("Current  doc id: ~p~n", [Id]))),
        {ok, Id}
    end,
    FoldRows(Fun, nil),
    ""
end.
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GetRow()
Retrieves the next row from a related view result.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
%% FoldRows background implementation.
%% https://git\-wip\-us.apache.org/repos/asf?p=couchdb.git;a=blob;f=src/couchdb/couch_native_process.erl;hb=HEAD#l368
%%
foldrows(GetRow, ProcRow, Acc) \->
    case GetRow() of
        nil \->
            {ok, Acc};
        Row \->
            case (catch ProcRow(Row, Acc)) of
                {ok, Acc2} \->
                    foldrows(GetRow, ProcRow, Acc2);
                {stop, Acc2} \->
                    {ok, Acc2}
            end
end.
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B Log(Msg)
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBMsg\fP \-\- Log a message at the \fIINFO\fP level.
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
fun({Doc}) \->
    <<K,_/binary>> = proplists:get_value(<<"_rev">>, Doc, null),
    V = proplists:get_value(<<"_id">>, Doc, null),
    Log(lists:flatten(io_lib:format("Hello from ~s doc!", [V]))),
    Emit(<<K>>, V)
end.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After the map function has run, the following line can be found in
CouchDB logs (e.g. at \fI/var/log/couchdb/couch.log\fP):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[Sun, 04 Nov 2012 11:33:58 GMT] [info] [<0.9144.2>] Hello from 8d300b86622d67953d102165dbe99467 doc!
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B Send(Chunk)
Sends a single string \fIChunk\fP in response.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
fun(Head, {Req}) \->
    Send("Hello,"),
    Send(" "),
    Send("Couch"),
    "!"
end.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The function above produces the following response:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
Hello, Couch!
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B Start(Headers)
.INDENT 7.0
.TP
.B Arguments
.INDENT 7.0
.IP \(bu 2
\fBHeaders\fP \-\- Proplist of \fIresponse object\fP\&.
.UNINDENT
.UNINDENT
.sp
Initialize \fIlistfun\fP response. At this point, response code and headers
may be defined. For example, this function redirects to the CouchDB
web site:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
fun(Head, {Req}) \->
    Start({[{<<"code">>, 302},
            {<<"headers">>, {[
                {<<"Location">>, <<"http://couchdb.apache.org">>}]
            }}
        ]}),
    "Relax!"
end.
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Fauxton
.SS Fauxton Setup
.sp
Fauxton is included with CouchDB 2.0, so make sure CouchDB is running, then go to:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
http://127.0.0.1:5984/_utils/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can also upgrade to the latest version of Fauxton by using npm:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ npm install \-g fauxton
$ fauxton
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
(Recent versions of \fI\%node.js\fP and \fI\%npm\fP are required.)
.SS Fauxton Visual Guide
.INDENT 0.0
.TP
.B You can find the Visual Guide here:
\fI\%http://couchdb.apache.org/fauxton\-visual\-guide\fP
.UNINDENT
.SS Development Server
.sp
Recent versions of \fI\%node.js\fP and \fI\%npm\fP are required.
.sp
Using the dev server is the easiest way to use Fauxton, specially when developing for it:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ git clone https://github.com/apache/couchdb\-fauxton.git
$ npm install && npm run dev
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Understanding Fauxton Code layout
.sp
Each bit of functionality is its own separate module or addon.
.sp
All core modules are stored under \fIapp/module\fP and any addons that are optional
are under \fIapp/addons\fP\&.
.sp
We use \fI\%backbone.js\fP and \fI\%Backbone.layoutmanager\fP quite heavily, so best to
get an idea how they work. Its best at this point to read through a couple of
the modules and addons to get an idea of how they work.
.sp
Two good starting points are \fIapp/addon/config\fP and \fIapp/modules/databases\fP\&.
.sp
Each module must have a \fIbase.js\fP file, this is read and compile when Fauxton is
deployed.
.sp
The \fIresource.js\fP file is usually for your \fBBackbone.Models\fP and
\fBBackbone.Collections\fP, \fIview.js\fP for your \fBBackbone.Views\fP\&.
.sp
The \fIroutes.js\fP is used to register a url path for your view along with what
layout, data, breadcrumbs and api point is required for the view.
.SS ToDo items
.sp
Checkout \fIJIRA\fP or \fI\%GitHub Issues\fP  for a list of items to do.
.SS Best Practices
.sp
In this chapter, we present some of the best ways to use Apache CouchDB. These
usage patterns reflect many years of real\-world use. We hope that these will
jump\-start your next project, or improve the performance of your current
system.
.SS Document Design Considerations
.sp
When designing your database, and your document structure, there are a number of
best practices to take into consideration. Especially for people accustomed to
relational databases, some of these techniques may be non\-obvious.
.SS Don\(aqt rely on CouchDB\(aqs auto\-UUID generation
.sp
While CouchDB will generate a unique identifier for the \fB_id\fP field of any doc
that you create, in most cases you are better off generating them yourself for
a few reasons:
.INDENT 0.0
.IP \(bu 2
If for any reason you miss the \fB200 OK\fP reply from CouchDB, and storing the
document is attempted again, you would end up with the same document content
stored under duplicate \fB_id\fPs. This could easily happen with intermediary
proxies and cache systems that may not inform developers that the failed
transaction is being retried.
.IP \(bu 2
\fB_id\fPs are are the only unique enforced value within CouchDB so you might
as well make use of this. CouchDB stores its documents in a B+ tree. Each
additional or updated document is stored as a leaf node, and may require
re\-writing intermediary and parent nodes. You may be able to take advantage of
sequencing your own ids more effectively than the automatically generated ids
if you can arrange them to be sequential yourself.
.UNINDENT
.SS Alternatives to auto\-incrementing sequences
.sp
Because of replication, as well as the distributed nature of CouchDB, it is not
practical to use auto\-incrementing sequences with CouchDB. These are often used
to ensure unique identifiers for each row in a database table. CouchDB generates
unique ids on its own and you can specify your own as well, so you don\(aqt really
need a sequence here. If you use a sequence for something else, you will be
better off finding another way to express it in CouchDB in another way.
.SS Document submission using HTML Forms
.sp
It is possible to write to a CouchDB document directly from an HTML form by
using a document \fIupdate function\fP\&. Here\(aqs how:
.SS The HTML form
.sp
First, write an HTML form. Here\(aqs a simple "Contact Us" form excerpt:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<form action="/dbname/_design/ddocname/_update/contactform" method="post">
    <div>
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" />
    </div>
    <div>
        <label for="mail">Email:</label>
        <input type="text" id="mail" name="email" />
    </div>
    <div>
        <label for="msg">Message:</label>
        <textarea id="msg" name="message"></textarea>
    </div>
</form>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Customize the \fB/dbname/_design/ddocname/_update/contactform\fP portion of the
form action URL to reflect the exact path to your database, design document
and update function (see below).
.sp
As CouchDB
\fIno longer recommends the use of CouchDB\-hosted web applications\fP
, you may want to use a reverse proxy to expose CouchDB as a subdirectory of
your web application.  If so, add that prefix to the \fBaction\fP destination in
the form.
.sp
Another option is to alter CouchDB\(aqs \fICORS\fP settings and use a
cross\-domain POST. \fIBe sure you understand all security implications before
doing this!\fP
.SS The update function
.sp
Then, write an update function. This is the server\-side JavaScript function
that will receive the \fBPOST\fP\-ed data.
.sp
The first argument to the function will be the document that is being processed
(if it exists). Because we are using \fBPOST\fP and not \fBPUT\fP, this should be
empty in our scenario \- but we should check to be sure. The \fBPOST\fP\-ed data
will be passed as the second parameter to the function, along with any query
parameters and the full request headers.
.sp
Here\(aqs a sample handler that extracts the form data, generates a document _id
based on the email address and timestamp, and saves the document. It then
returns a JSON success response back to the browser.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc, req) {

    if (doc) {
        return [doc, toJSON({"error": "request already filed"})]
    }

    if !(request.form && request.form.email) {
        return [null, toJSON({"error": "incomplete form"})]
    }

    var date = new Date()
    var newdoc = req.form
    newdoc._id = req.form.email + "_" + date.toISOString()

    return [newdoc, toJSON({"success":"ok"})]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Place the above function in your design document under the \fBupdates\fP key.
.sp
Note that this function does not attempt any sort of input validation or
sanitization. That is best handled by a
\fIvalidate document update function\fP instead.  (A "VDU" will
validate any document written to the database, not just those that use your
update function.)
.sp
If the first element passed to \fBreturn\fP is a document, the HTTP response
headers will include \fBX\-Couch\-Id\fP, the \fB_id\fP value for the newly created
document, and \fBX\-Couch\-Update\-NewRev\fP, the \fB_rev\fP value for the newly
created document. This is handy if your client\-side code wants to access or
update the document in a future call.
.SS Example output
.sp
Here\(aqs the worked sample above, using \fBcurl\fP to simulate the form POST.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ curl \-X PUT localhost:5984/testdb/_design/myddoc \-d \(aq{ "updates": { "contactform": "function(doc, req) { ... }" } }\(aq
{"ok":true,"id":"_design/myddoc","rev":"1\-2a2b0951fcaf7287817573b03bba02ed"}

$ curl \-\-data "name=Lin&email=lin@example.com&message=I Love CouchDB" http://localhost:5984/testdb/_design/myddoc/_update/contactform
*   Trying 127.0.0.1...
* TCP_NODELAY set
* Connected to localhost (127.0.0.1) port 5984 (#1)
> POST /testdb/_design/myddoc/_update/contactform HTTP/1.1
> Host: localhost:5984
> User\-Agent: curl/7.59.0
> Accept: */*
> Content\-Length: 53
> Content\-Type: application/x\-www\-form\-urlencoded
>
* upload completely sent off: 53 out of 53 bytes
< HTTP/1.1 201 Created
< Content\-Length: 16
< Content\-Type: text/html; charset=utf\-8
< Date: Thu, 05 Apr 2018 19:56:42 GMT
< Server: CouchDB/2.2.0\-948a1311c (Erlang OTP/19)
< X\-Couch\-Id: lin%40example.com_2018\-04\-05T19:51:22.278Z
< X\-Couch\-Request\-ID: 03a5f4fbe0
< X\-Couch\-Update\-NewRev: 1\-34483732407fcc6cfc5b60ace48b9da9
< X\-CouchDB\-Body\-Time: 0
<
* Connection #1 to host localhost left intact
{"success":"ok"}

$ curl http://localhost:5984/testdb/lin\e@example.com_2018\-04\-05T19:51:22.278Z
{"_id":"lin@example.com_2018\-04\-05T19:51:22.278Z","_rev":"1\-34483732407fcc6cfc5b60ace48b9da9","name":"Lin","email":"lin@example.com","message":"I Love CouchDB"}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS JavaScript development tips
.sp
Working with Apache CouchDB\(aqs JavaScript environment is a lot different than
working with traditional JavaScript development environments. Here are some
tips and tricks that will ease the difficulty.
.INDENT 0.0
.IP \(bu 2
Remember that CouchDB\(aqs JavaScript engine is old, only supporting the
ECMA\-262 5th edition ("ES5") of the language. ES6/2015 and newer constructs
cannot be used.
.IP \(bu 2
The \fBlog()\fP function will log output to the CouchDB log file or stream.
You can log strings, objects, and arrays directly, without first converting
to JSON.  Use this in conjunction with a local CouchDB instance for best
results.
.IP \(bu 2
Be sure to guard all document accesses to avoid exceptions when fields
or subfields are missing: \fBif (doc && doc.myarray && doc.myarray.length)...\fP
.UNINDENT
.SS nginx as a Reverse Proxy
.sp
CouchDB recommends the use of \fI\%HAProxy\fP as a load balancer and reverse proxy.
The team\(aqs experience with using it in production has shown it to be superior
for configuration and montioring capabilities, as well as overall performance.
.sp
CouchDB\(aqs sample haproxy configuration is present in the \fI\%code repository\fP and
release tarball as \fBrel/haproxy.cfg\fP\&.
.sp
However, \fBnginx\fP is a suitable alternative. Below are instructions on
configuring nginx appropriately.
.SS Basic configuration
.sp
Here\(aqs a basic excerpt from an nginx config file in
\fB<nginx config directory>/sites\-available/default\fP\&. This will proxy all
requests from \fBhttp://domain.com/...\fP to \fBhttp://localhost:5984/...\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
location / {
    proxy_pass http://localhost:5984;
    proxy_redirect off;
    proxy_buffering off;
    proxy_set_header Host $host;
    proxy_set_header X\-Forwarded\-For $proxy_add_x_forwarded_for;
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Proxy buffering \fBmust\fP be disabled, or continuous replication will not
function correctly behind nginx.
.SS Reverse proxying CouchDB in a subdirectory with nginx
.sp
It can be useful to provide CouchDB as a subdirectory of your overall domain,
especially to avoid CORS concerns. Here\(aqs an excerpt of a basic nginx
configuration that proxies the URL \fBhttp://domain.com/couchdb\fP to
\fBhttp://localhost:5984\fP so that requests appended to the subdirectory, such
as \fBhttp://domain.com/couchdb/db1/doc1\fP are proxied to
\fBhttp://localhost:5984/db1/doc1\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
location /couchdb {
    rewrite /couchdb/(.*) /$1 break;
    proxy_pass http://localhost:5984;
    proxy_redirect off;
    proxy_buffering off;
    proxy_set_header Host $host;
    proxy_set_header X\-Forwarded\-For $proxy_add_x_forwarded_for;
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that in the above configuration, the \fIVerify Installation\fP link in
Fauxton may not succeed.
.SS Authentication with nginx as a reverse proxy
.sp
Here\(aqs a sample config setting with basic authentication enabled, placing
CouchDB in the \fB/couchdb\fP subdirectory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
location /couchdb {
    auth_basic "Restricted";
    auth_basic_user_file htpasswd;
    rewrite /couchdb/(.*) /$1 break;
    proxy_pass http://localhost:5984;
    proxy_redirect off;
    proxy_buffering off;
    proxy_set_header Host $host;
    proxy_set_header X\-Forwarded\-For $proxy_add_x_forwarded_for;
    proxy_set_header Authorization "";
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This setup leans entirely on nginx performing authorization, and forwarding
requests to CouchDB with no authentication (with CouchDB in Admin Party mode).
For a better solution, see \fIapi/auth/proxy\fP\&.
.SS SSL with nginx
.sp
In order to enable SSL, just enable the nginx SSL module, and add another
proxy header:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ssl on;
ssl_certificate PATH_TO_YOUR_PUBLIC_KEY.pem;
ssl_certificate_key PATH_TO_YOUR_PRIVATE_KEY.key;
ssl_protocols SSLv3;
ssl_session_cache shared:SSL:1m;

location / {
    proxy_pass http://localhost:5984;
    proxy_redirect off;
    proxy_set_header Host $host;
    proxy_buffering off;
    proxy_set_header X\-Forwarded\-For $proxy_add_x_forwarded_for;
    proxy_set_header X\-Forwarded\-Ssl on;
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fBX\-Forwarded\-Ssl\fP header tells CouchDB that it should use the \fBhttps\fP
scheme instead of the \fBhttp\fP scheme. Otherwise, all CouchDB\-generated
redirects will fail.
.SS API Reference
.sp
The components of the API URL path help determine the part of the CouchDB
server that is being accessed. The result is the structure of the URL request
both identifies and effectively describes the area of the database you are
accessing.
.sp
As with all URLs, the individual components are separated by a forward slash.
.sp
As a general rule, URL components and JSON fields starting with the \fB_\fP
(underscore) character represent a special component or entity within the
server or returned object. For example, the URL fragment \fB/_all_dbs\fP gets a
list of all of the databases in a CouchDB instance.
.sp
This reference is structured according to the URL structure, as below.
.SS API Basics
.sp
The CouchDB API is the primary method of interfacing to a CouchDB instance.
Requests are made using HTTP and requests are used to request information from
the database, store new data, and perform views and formatting of the
information stored within the documents.
.sp
Requests to the API can be categorised by the different areas of the CouchDB
system that you are accessing, and the HTTP method used to send the request.
Different methods imply different operations, for example retrieval of
information from the database is typically handled by the \fBGET\fP operation,
while updates are handled by either a \fBPOST\fP or \fBPUT\fP request. There are
some differences between the information that must be supplied for the
different methods. For a guide to the basic HTTP methods and request structure,
see \fIapi/format\fP\&.
.sp
For nearly all operations, the submitted data, and the returned data structure,
is defined within a JavaScript Object Notation (JSON) object. Basic information
on the content and data types for JSON are provided in \fIjson\fP\&.
.sp
Errors when accessing the CouchDB API are reported using standard HTTP Status
Codes. A guide to the generic codes returned by CouchDB are provided in
\fIerrors\fP\&.
.sp
When accessing specific areas of the CouchDB API, specific information and
examples on the HTTP methods and request, JSON structures, and error codes are
provided.
.SS Request Format and Responses
.sp
CouchDB supports the following HTTP request methods:
.INDENT 0.0
.IP \(bu 2
\fBGET\fP
.sp
Request the specified item. As with normal HTTP requests, the format of the
URL defines what is returned. With CouchDB this can include static items,
database documents, and configuration and statistical information. In most
cases the information is returned in the form of a JSON document.
.IP \(bu 2
\fBHEAD\fP
.sp
The \fBHEAD\fP method is used to get the HTTP header of a \fBGET\fP request
without the body of the response.
.IP \(bu 2
\fBPOST\fP
.sp
Upload data. Within CouchDB \fBPOST\fP is used to set values, including
uploading documents, setting document values, and starting certain
administration commands.
.IP \(bu 2
\fBPUT\fP
.sp
Used to put a specified resource. In CouchDB \fBPUT\fP is used to create new
objects, including databases, documents, views and design documents.
.IP \(bu 2
\fBDELETE\fP
.sp
Deletes the specified resource, including documents, views, and design
documents.
.IP \(bu 2
\fBCOPY\fP
.sp
A special method that can be used to copy documents and objects.
.UNINDENT
.sp
If you use an unsupported HTTP request type with an URL that does not support
the specified type then a \fB405 \- Method Not Allowed\fP will be returned,
listing the supported HTTP methods. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "error":"method_not_allowed",
    "reason":"Only GET,HEAD allowed"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The CouchDB design document API and the functions when returning HTML (for
example as part of a show or list) enables you to include custom HTTP headers
through the \fBheaders\fP block of the return object.
.SS HTTP Headers
.sp
Because CouchDB uses HTTP for all communication, you need to ensure that the
correct HTTP headers are supplied (and processed on retrieval) so that you get
the right format and encoding. Different environments and clients will be more
or less strict on the effect of these HTTP headers (especially when not
present). Where possible you should be as specific as possible.
.SS Request Headers
.INDENT 0.0
.IP \(bu 2
\fBAccept\fP
.sp
Specifies the list of accepted data types to be returned by the server (i.e.
that are accepted/understandable by the client). The format should be a list
of one or more MIME types, separated by colons.
.sp
For the majority of requests the definition should be for JSON data
(\fBapplication/json\fP). For attachments you can either specify the MIME type
explicitly, or use \fB*/*\fP to specify that all file types are supported. If
the \fBAccept\fP header is not supplied, then the \fB*/*\fP MIME type is assumed
(i.e. client accepts all formats).
.sp
The use of \fBAccept\fP in queries for CouchDB is not required, but is highly
recommended as it helps to ensure that the data returned can be processed by
the client.
.sp
If you specify a data type using the \fBAccept\fP header, CouchDB will honor
the specified type in the \fBContent\-type\fP header field returned. For
example, if you explicitly request \fBapplication/json\fP in the \fBAccept\fP of
a request, the returned HTTP headers will use the value in the returned
\fBContent\-type\fP field.
.sp
For example, when sending a request without an explicit \fBAccept\fP header, or
when specifying \fB*/*\fP:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes HTTP/1.1
Host: couchdb:5984
Accept: */*
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The returned headers are:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Server: CouchDB (Erlang/OTP)
Date: Thu, 13 Jan 2011 13:39:34 GMT
Content\-Type: text/plain;charset=utf\-8
Content\-Length: 227
Cache\-Control: must\-revalidate
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 2.0
.INDENT 3.5
The returned content type is \fBtext/plain\fP even though the information
returned by the request is in JSON format.
.UNINDENT
.UNINDENT
.sp
Explicitly specifying the \fBAccept\fP header:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes HTTP/1.1
Host: couchdb:5984
Accept: application/json
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The headers returned include the \fBapplication/json\fP content type:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Server: CouchDB (Erlang/OTP)
Date: Thu, 13 Jan 2013 13:40:11 GMT
Content\-Type: application/json
Content\-Length: 227
Cache\-Control: must\-revalidate
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBContent\-type\fP
.sp
Specifies the content type of the information being supplied within the
request. The specification uses MIME type specifications. For the majority of
requests this will be JSON (\fBapplication/json\fP). For some settings the MIME
type will be plain text. When uploading attachments it should be the
corresponding MIME type for the attachment or binary
(\fBapplication/octet\-stream\fP).
.sp
The use of the \fBContent\-type\fP on a request is highly recommended.
.UNINDENT
.SS Response Headers
.sp
Response headers are returned by the server when sending back content and
include a number of different header fields, many of which are standard HTTP
response header and have no significance to CouchDB operation. The list of
response headers important to CouchDB are listed below.
.INDENT 0.0
.IP \(bu 2
\fBCache\-control\fP
.sp
The cache control HTTP response header provides a suggestion for client
caching mechanisms on how to treat the returned information. CouchDB
typically returns the \fBmust\-revalidate\fP, which indicates that the
information should be revalidated if possible. This is used to ensure that
the dynamic nature of the content is correctly updated.
.IP \(bu 2
\fBContent\-length\fP
.sp
The length (in bytes) of the returned content.
.IP \(bu 2
\fBContent\-type\fP
.sp
Specifies the MIME type of the returned data. For most request, the returned
MIME type is \fBtext/plain\fP\&. All text is encoded in Unicode (UTF\-8), and this
is explicitly stated in the returned \fBContent\-type\fP, as
\fBtext/plain;charset=utf\-8\fP\&.
.IP \(bu 2
\fBEtag\fP
.sp
The \fBEtag\fP HTTP header field is used to show the revision for a document,
or a view.
.sp
ETags have been assigned to a map/reduce group (the collection of views in a
single design document). Any change to any of the indexes for those views
would generate a new ETag for all view URLs in a single design doc, even if
that specific view\(aqs results had not changed.
.sp
Each \fB_view\fP URL has its own ETag which only gets updated when changes are
made to the database that effect that index. If the index for that specific
view does not change, that view keeps the original ETag head (therefore
sending back \fB304 \- Not Modified\fP more often).
.IP \(bu 2
\fBTransfer\-Encoding\fP
.sp
If the response uses an encoding, then it is specified in this header field.
.sp
\fBTransfer\-Encoding: chunked\fP means that the response is sent in parts, a
method known as \fI\%chunked transfer encoding\fP\&. This is used when CouchDB does
not know beforehand the size of the data it will send (for example,
the \fIchanges feed\fP).
.UNINDENT
.SS JSON Basics
.sp
The majority of requests and responses to CouchDB use the JavaScript Object
Notation (JSON) for formatting the content and structure of the data and
responses.
.sp
JSON is used because it is the simplest and easiest solution for working with
data within a web browser, as JSON structures can be evaluated and used as
JavaScript objects within the web browser environment. JSON also integrates
with the server\-side JavaScript used within CouchDB.
.sp
JSON supports the same basic types as supported by JavaScript, these are:
.INDENT 0.0
.IP \(bu 2
Array \- a list of values enclosed in square brackets. For example:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
["one", "two", "three"]
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Boolean \- a \fBtrue\fP or \fBfalse\fP value. You can use these strings directly.
For example:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
{ "value": true}
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Number \- an integer or floating\-point number.
.IP \(bu 2
Object \- a set of key/value pairs (i.e. an associative array, or hash). The
key must be a string, but the value can be any of the supported JSON values.
For example:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "servings" : 4,
    "subtitle" : "Easy to make in advance, and then cook when ready",
    "cooktime" : 60,
    "title" : "Chicken Coriander"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In CouchDB, the JSON object is used to represent a variety of structures,
including the main CouchDB document.
.IP \(bu 2
String \- this should be enclosed by double\-quotes and supports Unicode
characters and backslash escaping. For example:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
"A String"
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Parsing JSON into a JavaScript object is supported through the \fBJSON.parse()\fP
function in JavaScript, or through various libraries that will perform the
parsing of the content into a JavaScript object for you. Libraries for parsing
and generating JSON are available in many languages, including Perl, Python,
Ruby, Erlang and others.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Care should be taken to ensure that your JSON structures are valid,
invalid structures will cause CouchDB to return an HTTP status code of 500
(server error).
.UNINDENT
.UNINDENT
.SS Number Handling
.sp
Developers and users new to computer handling of numbers often encounter
surprises when expecting that a number stored in JSON format does not
necessarily return as the same number as compared character by character.
.sp
Any numbers defined in JSON that contain a decimal point or exponent will be
passed through the Erlang VM\(aqs idea of the "double" data type. Any numbers that
are used in views will pass through the view server\(aqs idea of a number (the
common JavaScript case means even integers pass through a double due to
JavaScript\(aqs definition of a number).
.sp
Consider this document that we write to CouchDB:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id":"30b3b38cdbd9e3a587de9b8122000cff",
    "number": 1.1
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now let’s read that document back from CouchDB:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id":"30b3b38cdbd9e3a587de9b8122000cff",
    "_rev":"1\-f065cee7c3fd93aa50f6c97acde93030",
    "number":1.1000000000000000888
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
What happens is CouchDB is changing the textual representation of the
result of decoding what it was given into some numerical format. In most
cases this is an \fI\%IEEE 754\fP double precision floating point number which
is exactly what almost all other languages use as well.
.sp
What Erlang does a bit differently than other languages is that it does not
attempt to pretty print the resulting output to use the shortest number of
characters. For instance, this is why we have this relationship:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ejson:encode(ejson:decode(<<"1.1">>)).
<<"1.1000000000000000888">>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
What can be confusing here is that internally those two formats decode into the
same IEEE\-754 representation. And more importantly, it will decode into a
fairly close representation when passed through all major parsers that we know
about.
.sp
While we\(aqve only been discussing cases where the textual representation
changes, another important case is when an input value contains more precision
than can actually represented in a double. (You could argue that this case is
actually "losing" data if you don\(aqt accept that numbers are stored in doubles).
.sp
Here\(aqs a log for a couple of the more common JSON libraries that happen to be
on the author\(aqs machine:
.sp
Ejson (CouchDB\(aqs current parser) at CouchDB sha 168a663b:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ ./utils/run \-i
Erlang R14B04 (erts\-5.8.5) [source] [64\-bit] [smp:2:2] [rq:2]
[async\-threads:4] [hipe] [kernel\-poll:true]

Eshell V5.8.5  (abort with ^G)
1> ejson:encode(ejson:decode(<<"1.01234567890123456789012345678901234567890">>)).
<<"1.0123456789012346135">>
2> F = ejson:encode(ejson:decode(<<"1.01234567890123456789012345678901234567890">>)).
<<"1.0123456789012346135">>
3> ejson:encode(ejson:decode(F)).
<<"1.0123456789012346135">>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Node:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ node \-v
v0.6.15
$ node
JSON.stringify(JSON.parse("1.01234567890123456789012345678901234567890"))
\(aq1.0123456789012346\(aq
var f = JSON.stringify(JSON.parse("1.01234567890123456789012345678901234567890"))
undefined
JSON.stringify(JSON.parse(f))
\(aq1.0123456789012346\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Python:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python
Python 2.7.2 (default, Jun 20 2012, 16:23:33)
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang\-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
import json
json.dumps(json.loads("1.01234567890123456789012345678901234567890"))
\(aq1.0123456789012346\(aq
f = json.dumps(json.loads("1.01234567890123456789012345678901234567890"))
json.dumps(json.loads(f))
\(aq1.0123456789012346\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Ruby:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ irb \-\-version
irb 0.9.5(05/04/13)
require \(aqJSON\(aq
=> true
JSON.dump(JSON.load("[1.01234567890123456789012345678901234567890]"))
=> "[1.01234567890123]"
f = JSON.dump(JSON.load("[1.01234567890123456789012345678901234567890]"))
=> "[1.01234567890123]"
JSON.dump(JSON.load(f))
=> "[1.01234567890123]"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
A small aside on Ruby, it requires a top level object or array, so I just
wrapped the value. Should be obvious it doesn\(aqt affect the result of
parsing the number though.
.UNINDENT
.UNINDENT
.sp
Spidermonkey:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ js \-h 2>&1 | head \-n 1
JavaScript\-C 1.8.5 2011\-03\-31
$ js
js> JSON.stringify(JSON.parse("1.01234567890123456789012345678901234567890"))
"1.0123456789012346"
js> var f = JSON.stringify(JSON.parse("1.01234567890123456789012345678901234567890"))
js> JSON.stringify(JSON.parse(f))
"1.0123456789012346"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
As you can see they all pretty much behave the same except for Ruby actually
does appear to be losing some precision over the other libraries.
.sp
The astute observer will notice that ejson (the CouchDB JSON library) reported
an extra three digits. While its tempting to think that this is due to some
internal difference, its just a more specific case of the 1.1 input as
described above.
.sp
The important point to realize here is that a double can only hold a finite
number of values. What we\(aqre doing here is generating a string that when passed
through the "standard" floating point parsing algorithms (ie, \fBstrtod\fP) will
result in the same bit pattern in memory as we started with. Or, slightly
different, the bytes in a JSON serialized number are chosen such that they
refer to a single specific value that a double can represent.
.sp
The important point to understand is that we\(aqre mapping from one infinite set
onto a finite set. An easy way to see this is by reflecting on this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1.0 == 1.00 == 1.000 = 1.(infinite zeros)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Obviously a computer can\(aqt hold infinite bytes so we have to decimate our
infinitely sized set to a finite set that can be represented concisely.
.sp
The game that other JSON libraries are playing is merely:
.sp
"How few characters do I have to use to select this specific value for a
double"
.sp
And that game has lots and lots of subtle details that are difficult to
duplicate in C without a significant amount of effort (it took Python over a
year to get it sorted with their fancy build systems that automatically run on
a number of different architectures).
.sp
Hopefully we\(aqve shown that CouchDB is not doing anything "funky" by changing
input. Its behaving the same as any other common JSON library does, its just
not pretty printing its output.
.sp
On the other hand, if you actually are in a position where an IEEE\-754 double
is not a satisfactory data type for your numbers, then the answer as has been
stated is to not pass your numbers through this representation. In JSON this is
accomplished by encoding them as a string or by using integer types (although
integer types can still bite you if you use a platform that has a different
integer representation than normal, ie, JavaScript).
.sp
Further information can be found easily, including the
\fI\%Floating Point Guide\fP, and  \fI\%David Goldberg\(aqs Reference\fP\&.
.sp
Also, if anyone is really interested in changing this behavior, we\(aqre all ears
for contributions to \fI\%jiffy\fP (which is theoretically going to replace ejson
when we get around to updating the build system). The places we\(aqve looked for
inspiration are TCL and Python. If you know a decent implementation of this
float printing algorithm give us a holler.
.SS HTTP Status Codes
.sp
With the interface to CouchDB working through HTTP, error codes and statuses
are reported using a combination of the HTTP status code number, and
corresponding data in the body of the response data.
.sp
A list of the error codes returned by CouchDB, and generic descriptions of the
related errors are provided below. The meaning of different status codes for
specific request types are provided in the corresponding API call reference.
.INDENT 0.0
.IP \(bu 2
\fB200 \- OK\fP
.sp
Request completed successfully.
.IP \(bu 2
\fB201 \- Created\fP
.sp
Document created successfully.
.IP \(bu 2
\fB202 \- Accepted\fP
.sp
Request has been accepted, but the corresponding operation may not have
completed. This is used for background operations, such as database
compaction.
.IP \(bu 2
\fB304 \- Not Modified\fP
.sp
The additional content requested has not been modified. This is used with the
ETag system to identify the version of information returned.
.IP \(bu 2
\fB400 \- Bad Request\fP
.sp
Bad request structure. The error can indicate an error with the request URL,
path or headers. Differences in the supplied MD5 hash and content also
trigger this error, as this may indicate message corruption.
.IP \(bu 2
\fB401 \- Unauthorized\fP
.sp
The item requested was not available using the supplied authorization, or
authorization was not supplied.
.IP \(bu 2
\fB403 \- Forbidden\fP
.sp
The requested item or operation is forbidden.
.IP \(bu 2
\fB404 \- Not Found\fP
.sp
The requested content could not be found. The content will include further
information, as a JSON object, if available. The structure will contain two
keys, \fBerror\fP and \fBreason\fP\&. For example:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
{"error":"not_found","reason":"no_db_file"}
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
\fB405 \- Method Not Allowed\fP
.sp
A request was made using an invalid HTTP request type for the URL requested.
For example, you have requested a \fBPUT\fP when a \fBPOST\fP is required. Errors
of this type can also triggered by invalid URL strings.
.IP \(bu 2
\fB406 \- Not Acceptable\fP
.sp
The requested content type is not supported by the server.
.IP \(bu 2
\fB409 \- Conflict\fP
.sp
Request resulted in an update conflict.
.IP \(bu 2
\fB412 \- Precondition Failed\fP
.sp
The request headers from the client and the capabilities of the server do not
match.
.IP \(bu 2
\fB413 \- Request Entity Too Large\fP
.sp
A document exceeds the configured \fBcouchdb/max_document_size\fP
value or the entire request exceeds the
\fBhttpd/max_http_request_size\fP value.
.IP \(bu 2
\fB415 \- Unsupported Media Type\fP
.sp
The content types supported, and the content type of the information being
requested or submitted indicate that the content type is not supported.
.IP \(bu 2
\fB416 \- Requested Range Not Satisfiable\fP
.sp
The range specified in the request header cannot be satisfied by the server.
.IP \(bu 2
\fB417 \- Expectation Failed\fP
.sp
When sending documents in bulk, the bulk load operation failed.
.IP \(bu 2
\fB500 \- Internal Server Error\fP
.sp
The request was invalid, either because the supplied JSON was invalid, or
invalid information was supplied as part of the request.
.UNINDENT
.SS Server
.sp
The CouchDB server interface provides the basic interface to a
CouchDB server for obtaining CouchDB information and getting and setting
configuration information.
.SS \fB/\fP
.INDENT 0.0
.TP
.B GET /
Accessing the root of a CouchDB instance returns meta information about the
instance. The response is a JSON structure containing information about the
server, including a welcome message and the version of the server.
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET / HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 179
Content\-Type: application/json
Date: Sat, 10 Aug 2013 06:33:33 GMT
Server: CouchDB (Erlang/OTP)

{
    "couchdb": "Welcome",
    "uuid": "85fb71bf700c17267fef77535820e371",
    "vendor": {
        "name": "The Apache Software Foundation",
        "version": "1.3.1"
    },
    "version": "1.3.1"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/_active_tasks\fP
.sp
Changed in version 2.1.0: Because of how the scheduling replicator works, continuous replication jobs could be periodically stopped and then started later. When they are not running they will not appear in the \fB_active_tasks\fP endpoint

.INDENT 0.0
.TP
.B GET /_active_tasks
List of running tasks, including the task type, name, status
and process ID. The result is a JSON array of the currently running tasks,
with each task being described with a single object. Depending on operation
type set of response object fields might be different.
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBchanges_done\fP (\fInumber\fP) \-\- Processed changes
.IP \(bu 2
\fBdatabase\fP (\fIstring\fP) \-\- Source database
.IP \(bu 2
\fBpid\fP (\fIstring\fP) \-\- Process ID
.IP \(bu 2
\fBprogress\fP (\fInumber\fP) \-\- Current percentage progress
.IP \(bu 2
\fBstarted_on\fP (\fInumber\fP) \-\- Task start time as unix timestamp
.IP \(bu 2
\fBstatus\fP (\fIstring\fP) \-\- Task status message
.IP \(bu 2
\fBtask\fP (\fIstring\fP) \-\- Task name
.IP \(bu 2
\fBtotal_changes\fP (\fInumber\fP) \-\- Total changes to process
.IP \(bu 2
\fBtype\fP (\fIstring\fP) \-\- Operation Type
.IP \(bu 2
\fBupdated_on\fP (\fInumber\fP) \-\- Unix timestamp of last operation update
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_active_tasks HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 1690
Content\-Type: application/json
Date: Sat, 10 Aug 2013 06:37:31 GMT
Server: CouchDB (Erlang/OTP)

[
    {
        "changes_done": 64438,
        "database": "mailbox",
        "pid": "<0.12986.1>",
        "progress": 84,
        "started_on": 1376116576,
        "total_changes": 76215,
        "type": "database_compaction",
        "updated_on": 1376116619
    },
    {
        "changes_done": 14443,
        "database": "mailbox",
        "design_document": "c9753817b3ba7c674d92361f24f59b9f",
        "pid": "<0.10461.3>",
        "progress": 18,
        "started_on": 1376116621,
        "total_changes": 76215,
        "type": "indexer",
        "updated_on": 1376116650
    },
    {
        "changes_done": 5454,
        "database": "mailbox",
        "design_document": "_design/meta",
        "pid": "<0.6838.4>",
        "progress": 7,
        "started_on": 1376116632,
        "total_changes": 76215,
        "type": "indexer",
        "updated_on": 1376116651
    },
    {
        "checkpointed_source_seq": 68585,
        "continuous": false,
        "doc_id": null,
        "doc_write_failures": 0,
        "docs_read": 4524,
        "docs_written": 4524,
        "missing_revisions_found": 4524,
        "pid": "<0.1538.5>",
        "progress": 44,
        "replication_id": "9bc1727d74d49d9e157e260bb8bbd1d5",
        "revisions_checked": 4524,
        "source": "mailbox",
        "source_seq": 154419,
        "started_on": 1376116644,
        "target": "http://mailsrv:5984/mailbox",
        "type": "replication",
        "updated_on": 1376116651
    }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/_all_dbs\fP
.INDENT 0.0
.TP
.B GET /_all_dbs
Returns a list of all the databases in the CouchDB instance.
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_all_dbs HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 52
Content\-Type: application/json
Date: Sat, 10 Aug 2013 06:57:48 GMT
Server: CouchDB (Erlang/OTP)

[
   "_users",
   "contacts",
   "docs",
   "invoices",
   "locations"
]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/_dbs_info\fP
.sp
New in version 2.2.

.INDENT 0.0
.TP
.B POST /_dbs_info
Returns information of a list of the specified databases in the CouchDB
instance. This enables you to request information about multiple databases
in a single request, in place of multiple \fBGET /{db}\fP requests.
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.UNINDENT
.TP
.B Request JSON Object
.INDENT 7.0
.IP \(bu 2
\fBkeys\fP (\fIarray\fP) \-\- Array of database names to be requested
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Missing keys or exceeded keys in request
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /_dbs_info HTTP/1.1
Accept: application/json
Host: localhost:5984
Content\-Type: application/json

{
    "keys": [
        "animals",
        "plants"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Sat, 20 Dec 2017 06:57:48 GMT
Server: CouchDB (Erlang/OTP)

[
  {
    "key": "animals",
    "info": {
      "db_name": "animals",
      "update_seq": "52232",
      "sizes": {
        "file": 1178613587,
        "external": 1713103872,
        "active": 1162451555
      },
      "purge_seq": 0,
      "other": {
        "data_size": 1713103872
      },
      "doc_del_count": 0,
      "doc_count": 52224,
      "disk_size": 1178613587,
      "disk_format_version": 6,
      "data_size": 1162451555,
      "compact_running": false,
      "cluster": {
        "q": 8,
        "n": 3,
        "w": 2,
        "r": 2
      },
      "instance_start_time": "0"
    }
  },
  {
    "key": "plants",
    "info": {
      "db_name": "plants",
      "update_seq": "303",
      "sizes": {
        "file": 3872387,
        "external": 2339,
        "active": 67475
      },
      "purge_seq": 0,
      "other": {
        "data_size": 2339
      },
      "doc_del_count": 0,
      "doc_count": 11,
      "disk_size": 3872387,
      "disk_format_version": 6,
      "data_size": 67475,
      "compact_running": false,
      "cluster": {
        "q": 8,
        "n": 3,
        "w": 2,
        "r": 2
      },
      "instance_start_time": "0"
    }
  }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The supported number of the specified databases in the list can be limited
by modifying the \fImax_db_number_for_dbs_info_req\fP entry in configuration
file. The default limit is 100.
.UNINDENT
.UNINDENT
.SS \fB/_cluster_setup\fP
.sp
New in version 2.0.

.INDENT 0.0
.TP
.B GET /_cluster_setup
Returns the status of the node or cluster, per the cluster setup wizard.
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBensure_dbs_exist\fP (\fIarray\fP) \-\- List of system databases to ensure exist
on the node/cluster. Defaults to
\fB["_users","_replicator","_global_changes"]\fP\&.
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBstate\fP (\fIstring\fP) \-\- Current \fBstate\fP of the node and/or cluster (see
below)
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.UNINDENT
.UNINDENT
.sp
The \fBstate\fP returned indicates the current node or cluster state, and
is one of the following:
.INDENT 7.0
.IP \(bu 2
\fBcluster_disabled\fP: The current node is completely unconfigured.
.IP \(bu 2
\fBsingle_node_disabled\fP: The current node is configured as a single
(standalone) node (\fB[cluster] n=1\fP), but either does not have a
server\-level admin user defined, or does not have the standard system
databases created. If the \fBensure_dbs_exist\fP query parameter is
specified, the list of databases provided overrides the default list
of standard system databases.
.IP \(bu 2
\fBsingle_node_enabled\fP: The current node is configured as a single
(standalone) node, has a server\-level admin user defined, and has
the \fBensure_dbs_exist\fP list (explicit or default) of databases
created.
.IP \(bu 2
\fBcluster_enabled\fP: The current node has \fB[cluster] n\fP > 1, is not
bound to \fB127.0.0.1\fP and has a server\-level admin user defined.
However, the full set of standard system databases have not been
created yet. If the \fBensure_dbs_exist\fP query parameter is
specified, the list of databases provided overrides the default list
of standard system databases.
.IP \(bu 2
\fBcluster_finished\fP: The current node has \fB[cluster] n\fP > 1, is not
bound to \fB127.0.0.1\fP, has a server\-level admin user defined \fIand\fP
has the \fBensure_dbs_exist\fP list (explicit or default) of databases
created.
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_cluster_setup HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
X\-CouchDB\-Body\-Time: 0
X\-Couch\-Request\-ID: 5c058bdd37
Server: CouchDB/2.1.0\-7f17678 (Erlang OTP/17)
Date: Sun, 30 Jul 2017 06:33:18 GMT
Content\-Type: application/json
Content\-Length: 29
Cache\-Control: must\-revalidate

{"state":"cluster_enabled"}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B POST /_cluster_setup
Configure a node as a single (standalone) node, as part of a cluster,
or finalise a cluster.
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.UNINDENT
.TP
.B Request JSON Object
.INDENT 7.0
.IP \(bu 2
\fBaction\fP (\fIstring\fP) \-\- .INDENT 2.0
.IP \(bu 2
\fBenable_single_node\fP: Configure the current node
as a single, standalone CouchDB server.
.IP \(bu 2
\fBenable_cluster\fP: Configure the local or remote
node as one node, preparing it to be joined to a
new CouchDB cluster.
.IP \(bu 2
\fBadd_node\fP: Add the specified remote node to
this cluster\(aqs list of nodes, joining it to the
cluster.
.IP \(bu 2
\fBfinish_cluster\fP: Finalise the cluster by
creating the standard system databases.
.UNINDENT

.IP \(bu 2
\fBbind_address\fP (\fIstring\fP) \-\- The IP address to which to bind the current
node. The special value \fB0.0.0.0\fP may be specified to bind to all
interfaces on the host. (enable_cluster and enable_single_node only)
.IP \(bu 2
\fBusername\fP (\fIstring\fP) \-\- The username of the server\-level administrator to
create. (enable_cluster and enable_single_node only), or the remote
server\(aqs administrator username (add_node)
.IP \(bu 2
\fBpassword\fP (\fIstring\fP) \-\- The password for the server\-level administrator to
create. (enable_cluster and enable_single_node only), or the remote
server\(aqs administrator username (add_node)
.IP \(bu 2
\fBport\fP (\fInumber\fP) \-\- The TCP port to which to bind this node
(enable_cluster and enable_single_node only) or the TCP port to which
to bind a remote node (add_node only).
.IP \(bu 2
\fBnode_count\fP (\fInumber\fP) \-\- The total number of nodes to be joined into
the cluster, including this one. Used to determine the value of the
cluster\(aqs \fBn\fP, up to a maximum of 3. (enable_cluster only)
.IP \(bu 2
\fBremote_node\fP (\fIstring\fP) \-\- The IP address of the remote node to setup as
part of this cluster\(aqs list of nodes. (enable_cluster only)
.IP \(bu 2
\fBremote_current_user\fP (\fIstring\fP) \-\- The username of the server\-level
administrator authorized on the remote node. (enable_cluster only)
.IP \(bu 2
\fBremote_current_password\fP (\fIstring\fP) \-\- The password of the server\-level
administrator authorized on the remote node. (enable_cluster only)
.IP \(bu 2
\fBhost\fP (\fIstring\fP) \-\- The remote node IP of the node to add to the cluster.
(add_node only)
.IP \(bu 2
\fBensure_dbs_exist\fP (\fIarray\fP) \-\- List of system databases to ensure exist
on the node/cluster. Defaults to
\fB["_users","_replicator","_global_changes"]\fP\&.
.UNINDENT
.UNINDENT
.sp
\fINo example request/response included here. For a worked example, please
see\fP \fIcluster/setup/api\fP\&.
.UNINDENT
.SS \fB/_db_updates\fP
.sp
New in version 1.4.

.INDENT 0.0
.TP
.B GET /_db_updates
Returns a list of all database events in the CouchDB instance.
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBfeed\fP (\fIstring\fP) \-\- .INDENT 2.0
.IP \(bu 2
\fBnormal\fP: Returns all historical DB changes, then
closes the connection. \fIDefault.\fP
.IP \(bu 2
\fBlongpoll\fP: Closes the connection after the first
event.
.IP \(bu 2
\fBcontinuous\fP: Send a line of JSON per event.
Keeps the socket open until \fBtimeout\fP\&.
.IP \(bu 2
\fBeventsource\fP: Like, \fBcontinuous\fP, but sends
the events in \fI\%EventSource\fP format.
.UNINDENT

.IP \(bu 2
\fBtimeout\fP (\fInumber\fP) \-\- Number of seconds until CouchDB closes the
connection. Default is \fB60\fP\&.
.IP \(bu 2
\fBheartbeat\fP (\fInumber\fP) \-\- Period in \fImilliseconds\fP after which an empty
line is sent in the results. Only applicable for \fBlongpoll\fP,
\fBcontinuous\fP, and \fBeventsource\fP feeds. Overrides any timeout to
keep the feed alive indefinitely. Default is \fB60000\fP\&. May be \fBtrue\fP
to use default value.
.IP \(bu 2
\fBsince\fP (\fIstring\fP) \-\- Return only updates since the specified sequence ID.
May be the string \fBnow\fP to begin showing only new updates.
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.IP \(bu 2
\fI\%Transfer\-Encoding\fP \-\- \fBchunked\fP
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBresults\fP (\fIarray\fP) \-\- An array of database events. For \fBlongpoll\fP and
\fBcontinuous\fP modes, the entire response is the contents of the
\fBresults\fP array.
.IP \(bu 2
\fBlast_seq\fP (\fIstring\fP) \-\- The last sequence ID reported.
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.UNINDENT
.UNINDENT
.sp
The \fBresults\fP field of database updates:
.INDENT 7.0
.TP
.B JSON Object
.INDENT 7.0
.IP \(bu 2
\fBdb_name\fP (\fIstring\fP) \-\- Database name.
.IP \(bu 2
\fBtype\fP (\fIstring\fP) \-\- A database event is one of \fBcreated\fP, \fBupdated\fP,
\fBdeleted\fP\&.
.IP \(bu 2
\fBseq\fP (\fIjson\fP) \-\- Update sequence of the event.
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_db_updates HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Sat, 18 Mar 2017 19:01:35 GMT
Etag: "C1KU98Y6H0LGM7EQQYL6VSL07"
Server: CouchDB/2.0.0 (Erlang OTP/17)
Transfer\-Encoding: chunked
X\-Couch\-Request\-ID: ad87efc7ff
X\-CouchDB\-Body\-Time: 0

{
    "results":[
        {"db_name":"mailbox","type":"created","seq":"1\-g1AAAAFReJzLYWBg4MhgTmHgzcvPy09JdcjLz8gvLskBCjMlMiTJ____PyuDOZExFyjAnmJhkWaeaIquGIf2JAUgmWQPMiGRAZcaB5CaePxqEkBq6vGqyWMBkgwNQAqobD4h"},
        {"db_name":"mailbox","type":"deleted","seq":"2\-g1AAAAFReJzLYWBg4MhgTmHgzcvPy09JdcjLz8gvLskBCjMlMiTJ____PyuDOZEpFyjAnmJhkWaeaIquGIf2JAUgmWQPMiGRAZcaB5CaePxqEkBq6vGqyWMBkgwNQAqobD4hdQsg6vYTUncAou4\-IXUPIOpA7ssCAIFHa60"},
    ],
    "last_seq": "2\-g1AAAAFReJzLYWBg4MhgTmHgzcvPy09JdcjLz8gvLskBCjMlMiTJ____PyuDOZEpFyjAnmJhkWaeaIquGIf2JAUgmWQPMiGRAZcaB5CaePxqEkBq6vGqyWMBkgwNQAqobD4hdQsg6vYTUncAou4\-IXUPIOpA7ssCAIFHa60"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/_membership\fP
.sp
New in version 2.0.

.INDENT 0.0
.TP
.B GET /_membership
Displays the nodes that are part of the cluster as \fBcluster_nodes\fP\&. The
field \fBall_nodes\fP displays all nodes this node knows about, including the
ones that are part of the cluster. The endpoint is useful when setting up a
cluster, see \fIcluster/nodes\fP
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_membership HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Sat, 11 Jul 2015 07:02:41 GMT
Server: CouchDB (Erlang/OTP)
Content\-Length: 142

{
    "all_nodes": [
        "node1@127.0.0.1",
        "node2@127.0.0.1",
        "node3@127.0.0.1"
    ],
    "cluster_nodes": [
        "node1@127.0.0.1",
        "node2@127.0.0.1",
        "node3@127.0.0.1"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/_replicate\fP
.INDENT 0.0
.TP
.B POST /_replicate
Request, configure, or stop, a replication operation.
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.UNINDENT
.TP
.B Request JSON Object
.INDENT 7.0
.IP \(bu 2
\fBcancel\fP (\fIboolean\fP) \-\- Cancels the replication
.IP \(bu 2
\fBcontinuous\fP (\fIboolean\fP) \-\- Configure the replication to be continuous
.IP \(bu 2
\fBcreate_target\fP (\fIboolean\fP) \-\- Creates the target database.
Required administrator\(aqs privileges on target server.
.IP \(bu 2
\fBdoc_ids\fP (\fIarray\fP) \-\- Array of document IDs to be synchronized
.IP \(bu 2
\fBfilter\fP (\fIstring\fP) \-\- The name of a \fIfilter function\fP\&.
.IP \(bu 2
\fBproxy\fP (\fIstring\fP) \-\- Address of a proxy server through which replication
should occur (protocol can be "http" or "socks5")
.IP \(bu 2
\fBsource\fP (\fIstring/object\fP) \-\- Source database name or URL or an object
which contains the full URL of the source database with additional
parameters like headers. Eg: \(aqsource_db_name\(aq or
\(aq\fI\%http://example.com/source_db_name\fP\(aq or
{"url":"url in here", "headers": {"header1":"value1", ...}}
.IP \(bu 2
\fBtarget\fP (\fIstring/object\fP) \-\- Target database name or URL or an object
which contains the full URL of the target database with additional
parameters like headers. Eg: \(aqtarget_db_name\(aq or
\(aq\fI\%http://example.com/target_db_name\fP\(aq or
{"url":"url in here", "headers": {"header1":"value1", ...}}
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBhistory\fP (\fIarray\fP) \-\- Replication history (see below)
.IP \(bu 2
\fBok\fP (\fIboolean\fP) \-\- Replication status
.IP \(bu 2
\fBreplication_id_version\fP (\fInumber\fP) \-\- Replication protocol version
.IP \(bu 2
\fBsession_id\fP (\fIstring\fP) \-\- Unique session ID
.IP \(bu 2
\fBsource_last_seq\fP (\fInumber\fP) \-\- Last sequence number read from source
database
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Replication request successfully completed
.IP \(bu 2
\fI\%202 Accepted\fP \-\- Continuous replication request has been accepted
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid JSON data
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Either the source or target DB is not found or attempt to
cancel unknown replication task
.IP \(bu 2
\fI\%500 Internal Server Error\fP \-\- JSON specification was invalid
.UNINDENT
.UNINDENT
.sp
The specification of the replication request is controlled through the
JSON content of the request. The JSON should be an object with the
fields defining the source, target and other options.
.sp
The \fIReplication history\fP is an array of objects with following structure:
.INDENT 7.0
.TP
.B JSON Object
.INDENT 7.0
.IP \(bu 2
\fBdoc_write_failures\fP (\fInumber\fP) \-\- Number of document write failures
.IP \(bu 2
\fBdocs_read\fP (\fInumber\fP) \-\- Number of documents read
.IP \(bu 2
\fBdocs_written\fP (\fInumber\fP) \-\- Number of documents written to target
.IP \(bu 2
\fBend_last_seq\fP (\fInumber\fP) \-\- Last sequence number in changes stream
.IP \(bu 2
\fBend_time\fP (\fIstring\fP) \-\- Date/Time replication operation completed in
\fI\%RFC 2822\fP format
.IP \(bu 2
\fBmissing_checked\fP (\fInumber\fP) \-\- Number of missing documents checked
.IP \(bu 2
\fBmissing_found\fP (\fInumber\fP) \-\- Number of missing documents found
.IP \(bu 2
\fBrecorded_seq\fP (\fInumber\fP) \-\- Last recorded sequence number
.IP \(bu 2
\fBsession_id\fP (\fIstring\fP) \-\- Session ID for this replication operation
.IP \(bu 2
\fBstart_last_seq\fP (\fInumber\fP) \-\- First sequence number in changes stream
.IP \(bu 2
\fBstart_time\fP (\fIstring\fP) \-\- Date/Time replication operation started in
\fI\%RFC 2822\fP format
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /_replicate HTTP/1.1
Accept: application/json
Content\-Length: 36
Content\-Type: application/json
Host: localhost:5984

{
    "source": "db_a",
    "target": "db_b"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 692
Content\-Type: application/json
Date: Sun, 11 Aug 2013 20:38:50 GMT
Server: CouchDB (Erlang/OTP)

{
    "history": [
        {
            "doc_write_failures": 0,
            "docs_read": 10,
            "docs_written": 10,
            "end_last_seq": 28,
            "end_time": "Sun, 11 Aug 2013 20:38:50 GMT",
            "missing_checked": 10,
            "missing_found": 10,
            "recorded_seq": 28,
            "session_id": "142a35854a08e205c47174d91b1f9628",
            "start_last_seq": 1,
            "start_time": "Sun, 11 Aug 2013 20:38:50 GMT"
        },
        {
            "doc_write_failures": 0,
            "docs_read": 1,
            "docs_written": 1,
            "end_last_seq": 1,
            "end_time": "Sat, 10 Aug 2013 15:41:54 GMT",
            "missing_checked": 1,
            "missing_found": 1,
            "recorded_seq": 1,
            "session_id": "6314f35c51de3ac408af79d6ee0c1a09",
            "start_last_seq": 0,
            "start_time": "Sat, 10 Aug 2013 15:41:54 GMT"
        }
    ],
    "ok": true,
    "replication_id_version": 3,
    "session_id": "142a35854a08e205c47174d91b1f9628",
    "source_last_seq": 28
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Replication Operation
.sp
The aim of the replication is that at the end of the process, all active
documents on the source database are also in the destination database and all
documents that were deleted in the source databases are also deleted (if they
exist) on the destination database.
.sp
Replication can be described as either push or pull replication:
.INDENT 0.0
.IP \(bu 2
\fIPull replication\fP is where the \fBsource\fP is the remote CouchDB instance,
and the \fBtarget\fP is the local database.
.sp
Pull replication is the most useful solution to use if your source database
has a permanent IP address, and your destination (local) database may have a
dynamically assigned IP address (for example, through DHCP). This is
particularly important if you are replicating to a mobile or other device
from a central server.
.IP \(bu 2
\fIPush replication\fP is where the \fBsource\fP is a local database, and
\fBtarget\fP is a remote database.
.UNINDENT
.SS Specifying the Source and Target Database
.sp
You must use the URL specification of the CouchDB database if you want to
perform replication in either of the following two situations:
.INDENT 0.0
.IP \(bu 2
Replication with a remote database (i.e. another instance of CouchDB on the
same host, or a different host)
.IP \(bu 2
Replication with a database that requires authentication
.UNINDENT
.sp
For example, to request replication between a database local to the CouchDB
instance to which you send the request, and a remote database you might use the
following request:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST http://couchdb:5984/_replicate HTTP/1.1
Content\-Type: application/json
Accept: application/json

{
    "source" : "recipes",
    "target" : "http://coucdb\-remote:5984/recipes",
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In all cases, the requested databases in the \fBsource\fP and \fBtarget\fP
specification must exist. If they do not, an error will be returned within the
JSON object:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "error" : "db_not_found"
    "reason" : "could not open http://couchdb\-remote:5984/ol1ka/",
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can create the target database (providing your user credentials allow it)
by adding the \fBcreate_target\fP field to the request object:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST http://couchdb:5984/_replicate HTTP/1.1
Content\-Type: application/json
Accept: application/json

{
    "create_target" : true
    "source" : "recipes",
    "target" : "http://couchdb\-remote:5984/recipes",
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fBcreate_target\fP field is not destructive. If the database already
exists, the replication proceeds as normal.
.SS Single Replication
.sp
You can request replication of a database so that the two databases can be
synchronized. By default, the replication process occurs one time and
synchronizes the two databases together. For example, you can request a single
synchronization between two databases by supplying the \fBsource\fP and
\fBtarget\fP fields within the request JSON content.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST http://couchdb:5984/_replicate HTTP/1.1
Accept: application/json
Content\-Type: application/json

{
    "source" : "recipes",
    "target" : "recipes\-snapshot",
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the above example, the databases \fBrecipes\fP and \fBrecipes\-snapshot\fP will
be synchronized. These databases are local to the CouchDB instance where the
request was made. The response will be a JSON structure containing the success
(or failure) of the synchronization process, and statistics about the process:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "ok" : true,
    "history" : [
        {
            "docs_read" : 1000,
            "session_id" : "52c2370f5027043d286daca4de247db0",
            "recorded_seq" : 1000,
            "end_last_seq" : 1000,
            "doc_write_failures" : 0,
            "start_time" : "Thu, 28 Oct 2010 10:24:13 GMT",
            "start_last_seq" : 0,
            "end_time" : "Thu, 28 Oct 2010 10:24:14 GMT",
            "missing_checked" : 0,
            "docs_written" : 1000,
            "missing_found" : 1000
        }
    ],
    "session_id" : "52c2370f5027043d286daca4de247db0",
    "source_last_seq" : 1000
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Continuous Replication
.sp
Synchronization of a database with the previously noted methods happens only
once, at the time the replicate request is made. To have the target database
permanently replicated from the source, you must set the \fBcontinuous\fP field
of the JSON object within the request to true.
.sp
With continuous replication changes in the source database are replicated to
the target database in perpetuity until you specifically request that
replication ceases.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST http://couchdb:5984/_replicate HTTP/1.1
Accept: application/json
Content\-Type: application/json

{
    "continuous" : true
    "source" : "recipes",
    "target" : "http://couchdb\-remote:5984/recipes",
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Changes will be replicated between the two databases as long as a network
connection is available between the two instances.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Two keep two databases synchronized with each other, you need to set
replication in both directions; that is, you must replicate from \fBsource\fP
to \fBtarget\fP, and separately from \fBtarget\fP to \fBsource\fP\&.
.UNINDENT
.UNINDENT
.SS Canceling Continuous Replication
.sp
You can cancel continuous replication by adding the \fBcancel\fP field to the
JSON request object and setting the value to true. Note that the structure of
the request must be identical to the original for the cancellation request to
be honoured. For example, if you requested continuous replication, the
cancellation request must also contain the \fBcontinuous\fP field.
.sp
For example, the replication request:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST http://couchdb:5984/_replicate HTTP/1.1
Content\-Type: application/json
Accept: application/json

{
    "source" : "recipes",
    "target" : "http://couchdb\-remote:5984/recipes",
    "create_target" : true,
    "continuous" : true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Must be canceled using the request:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST http://couchdb:5984/_replicate HTTP/1.1
Accept: application/json
Content\-Type: application/json

{
    "cancel" : true,
    "continuous" : true
    "create_target" : true,
    "source" : "recipes",
    "target" : "http://couchdb\-remote:5984/recipes",
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Requesting cancellation of a replication that does not exist results in a 404
error.
.SS \fB/_scheduler/jobs\fP
.INDENT 0.0
.TP
.B GET /_scheduler/jobs
List of replication jobs. Includes replications created via
\fIapi/server/replicate\fP endpoint as well as those created from
replication documents. Does not include replications which have completed
or have failed to start because replication documents were malformed. Each
job description will include source and target information, replication id,
a history of recent event, and a few other things.
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBlimit\fP (\fInumber\fP) \-\- How many results to return
.IP \(bu 2
\fBskip\fP (\fInumber\fP) \-\- How many result to skip starting at the beginning,
ordered by replication ID
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\fInumber\fP) \-\- How many results were skipped
.IP \(bu 2
\fBtotal_rows\fP (\fInumber\fP) \-\- Total number of replication jobs
.IP \(bu 2
\fBid\fP (\fIstring\fP) \-\- Replication ID.
.IP \(bu 2
\fBdatabase\fP (\fIstring\fP) \-\- Replication document database
.IP \(bu 2
\fBdoc_id\fP (\fIstring\fP) \-\- Replication document ID
.IP \(bu 2
\fBhistory\fP (\fIlist\fP) \-\- Timestamped history of events as a list of objects
.IP \(bu 2
\fBpid\fP (\fIstring\fP) \-\- Replication process ID
.IP \(bu 2
\fBnode\fP (\fIstring\fP) \-\- Cluster node where the job is running
.IP \(bu 2
\fBsource\fP (\fIstring\fP) \-\- Replication source
.IP \(bu 2
\fBtarget\fP (\fIstring\fP) \-\- Replication target
.IP \(bu 2
\fBstart_time\fP (\fIstring\fP) \-\- Timestamp of when the replication was started
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_scheduler/jobs HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 1690
Content\-Type: application/json
Date: Sat, 29 Apr 2017 05:05:16 GMT
Server: CouchDB (Erlang/OTP)

{
    "jobs": [
        {
            "database": "_replicator",
            "doc_id": "cdyno\-0000001\-0000003",
            "history": [
                {
                    "timestamp": "2017\-04\-29T05:01:37Z",
                    "type": "started"
                },
                {
                    "timestamp": "2017\-04\-29T05:01:37Z",
                    "type": "added"
                }
            ],
            "id": "8f5b1bd0be6f9166ccfd36fc8be8fc22+continuous",
            "node": "node1@127.0.0.1",
            "pid": "<0.1850.0>",
            "source": "http://myserver.com/foo",
            "start_time": "2017\-04\-29T05:01:37Z",
            "target": "http://adm:*****@localhost:15984/cdyno\-0000003/",
            "user": null
        },
        {
            "database": "_replicator",
            "doc_id": "cdyno\-0000001\-0000002",
            "history": [
                {
                    "timestamp": "2017\-04\-29T05:01:37Z",
                    "type": "started"
                },
                {
                    "timestamp": "2017\-04\-29T05:01:37Z",
                    "type": "added"
                }
            ],
            "id": "e327d79214831ca4c11550b4a453c9ba+continuous",
            "node": "node2@127.0.0.1",
            "pid": "<0.1757.0>",
            "source": "http://myserver.com/foo",
            "start_time": "2017\-04\-29T05:01:37Z",
            "target": "http://adm:*****@localhost:15984/cdyno\-0000002/",
            "user": null
        }
    ],
    "offset": 0,
    "total_rows": 2
 }
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/_scheduler/docs\fP
.sp
Changed in version 2.1.0: Use this endpoint to monitor the state of
document\-based replications. Previously needed to poll both
documents and \fB_active_tasks\fP to get a complete state
summary

.INDENT 0.0
.TP
.B GET /_scheduler/docs
List of replication document states. Includes information about all the
documents, even in \fBcompleted\fP and \fBfailed\fP states. For each document
it returns the document ID, the database, the replication ID, source and
target, and other information.
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBlimit\fP (\fInumber\fP) \-\- How many results to return
.IP \(bu 2
\fBskip\fP (\fInumber\fP) \-\- How many result to skip starting at the beginning, if
ordered by document ID
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\fInumber\fP) \-\- How many results were skipped
.IP \(bu 2
\fBtotal_rows\fP (\fInumber\fP) \-\- Total number of replication documents.
.IP \(bu 2
\fBid\fP (\fIstring\fP) \-\- Replication ID, or \fBnull\fP if state is \fBcompleted\fP or
\fBfailed\fP
.IP \(bu 2
\fBstate\fP (\fIstring\fP) \-\- One of following states (see \fIreplicator/states\fP
for descriptions): \fBinitializing\fP, \fBrunning\fP,
\fBcompleted\fP, \fBpending\fP, \fBcrashing\fP, \fBerror\fP,
\fBfailed\fP
.IP \(bu 2
\fBdatabase\fP (\fIstring\fP) \-\- Database where replication document came from
.IP \(bu 2
\fBdoc_id\fP (\fIstring\fP) \-\- Replication document ID
.IP \(bu 2
\fBnode\fP (\fIstring\fP) \-\- Cluster node where the job is running
.IP \(bu 2
\fBsource\fP (\fIstring\fP) \-\- Replication source
.IP \(bu 2
\fBtarget\fP (\fIstring\fP) \-\- Replication target
.IP \(bu 2
\fBstart_time\fP (\fIstring\fP) \-\- Timestamp of when the replication was started
.IP \(bu 2
\fBlast_update\fP (\fIstring\fP) \-\- Timestamp of last state update
.IP \(bu 2
\fBinfo\fP (\fIobject\fP) \-\- May contain additional information about the state.
For error states, this will be a string. For success
states this will contain a JSON object (see below).
.IP \(bu 2
\fBerror_count\fP (\fInumber\fP) \-\- Consecutive errors count. Indicates how many
times in a row this replication has crashed.
Replication will be retried with an exponential
backoff based on this number. As soon as the
replication succeeds this count is reset to 0.
To can be used to get an idea why a particular
replication is not making progress.
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.UNINDENT
.UNINDENT
.sp
The \fBinfo\fP field of a scheduler doc:
.INDENT 7.0
.TP
.B JSON Object
.INDENT 7.0
.IP \(bu 2
\fBrevisions_checked\fP (\fInumber\fP) \-\- The count of revisions which have been
checked since this replication began.
.IP \(bu 2
\fBmissing_revisions_found\fP (\fInumber\fP) \-\- The count of revisions which were
found on the source, but missing from the target.
.IP \(bu 2
\fBdocs_read\fP (\fInumber\fP) \-\- The count of docs which have been read from the
source.
.IP \(bu 2
\fBdocs_written\fP (\fInumber\fP) \-\- The count of docs which have been written to the
target.
.IP \(bu 2
\fBchanges_pending\fP (\fInumber\fP) \-\- The count of changes not yet replicated.
.IP \(bu 2
\fBdoc_write_failures\fP (\fInumber\fP) \-\- The count of docs which failed to be
written to the target.
.IP \(bu 2
\fBcheckpointed_source_seq\fP (\fIobject\fP) \-\- The source sequence id which was last
successfully replicated.
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_scheduler/docs HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Type: application/json
Date: Sat, 29 Apr 2017 05:10:08 GMT
Server: Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked

{
    "docs": [
        {
            "database": "_replicator",
            "doc_id": "cdyno\-0000001\-0000002",
            "error_count": 0,
            "id": "e327d79214831ca4c11550b4a453c9ba+continuous",
            "info": null,
            "last_updated": "2017\-04\-29T05:01:37Z",
            "node": "node2@127.0.0.1",
            "proxy": null,
            "source": "http://myserver.com/foo",
            "start_time": "2017\-04\-29T05:01:37Z",
            "state": "running",
            "target": "http://adm:*****@localhost:15984/cdyno\-0000002/"
        },
        {
            "database": "_replicator",
            "doc_id": "cdyno\-0000001\-0000003",
            "error_count": 0,
            "id": "8f5b1bd0be6f9166ccfd36fc8be8fc22+continuous",
            "info": null,
            "last_updated": "2017\-04\-29T05:01:37Z",
            "node": "node1@127.0.0.1",
            "proxy": null,
            "source": "http://myserver.com/foo",
            "start_time": "2017\-04\-29T05:01:37Z",
            "state": "running",
            "target": "http://adm:*****@localhost:15984/cdyno\-0000003/"
        }
    ],
    "offset": 0,
    "total_rows": 2
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET /_scheduler/docs/{replicator_db}
Get information about replication documents from a replicator database.
The default replicator database is \fB_replicator\fP but other replicator
databases can exist if their name ends with the suffix \fB/_replicator\fP\&.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
As a convenience slashes (\fB/\fP) in replicator db names do not
have to be escaped. So \fB/_scheduler/docs/other/_replicator\fP is valid
and equivalent to \fB/_scheduler/docs/other%2f_replicator\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBlimit\fP (\fInumber\fP) \-\- How many results to return
.IP \(bu 2
\fBskip\fP (\fInumber\fP) \-\- How many result to skip starting at the beginning, if
ordered by document ID
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\fInumber\fP) \-\- How many results were skipped
.IP \(bu 2
\fBtotal_rows\fP (\fInumber\fP) \-\- Total number of replication documents.
.IP \(bu 2
\fBid\fP (\fIstring\fP) \-\- Replication ID, or \fBnull\fP if state is \fBcompleted\fP or
\fBfailed\fP
.IP \(bu 2
\fBstate\fP (\fIstring\fP) \-\- One of following states (see \fIreplicator/states\fP
for descriptions): \fBinitializing\fP, \fBrunning\fP,
\fBcompleted\fP, \fBpending\fP, \fBcrashing\fP, \fBerror\fP,
\fBfailed\fP
.IP \(bu 2
\fBdatabase\fP (\fIstring\fP) \-\- Database where replication document came from
.IP \(bu 2
\fBdoc_id\fP (\fIstring\fP) \-\- Replication document ID
.IP \(bu 2
\fBnode\fP (\fIstring\fP) \-\- Cluster node where the job is running
.IP \(bu 2
\fBsource\fP (\fIstring\fP) \-\- Replication source
.IP \(bu 2
\fBtarget\fP (\fIstring\fP) \-\- Replication target
.IP \(bu 2
\fBstart_time\fP (\fIstring\fP) \-\- Timestamp of when the replication was started
.IP \(bu 2
\fBlast_update\fP (\fIstring\fP) \-\- Timestamp of last state update
.IP \(bu 2
\fBinfo\fP (\fIobject\fP) \-\- May contain additional information about the state.
For error states, this will be a string. For success
states this will contain a JSON object (see below).
.IP \(bu 2
\fBerror_count\fP (\fInumber\fP) \-\- Consecutive errors count. Indicates how many
times in a row this replication has crashed.
Replication will be retried with an exponential
backoff based on this number. As soon as the
replication succeeds this count is reset to 0.
To can be used to get an idea why a particular
replication is not making progress.
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.UNINDENT
.UNINDENT
.sp
The \fBinfo\fP field of a scheduler doc:
.INDENT 7.0
.TP
.B JSON Object
.INDENT 7.0
.IP \(bu 2
\fBrevisions_checked\fP (\fInumber\fP) \-\- The count of revisions which have been
checked since this replication began.
.IP \(bu 2
\fBmissing_revisions_found\fP (\fInumber\fP) \-\- The count of revisions which were
found on the source, but missing from the target.
.IP \(bu 2
\fBdocs_read\fP (\fInumber\fP) \-\- The count of docs which have been read from the
source.
.IP \(bu 2
\fBdocs_written\fP (\fInumber\fP) \-\- The count of docs which have been written to the
target.
.IP \(bu 2
\fBchanges_pending\fP (\fInumber\fP) \-\- The count of changes not yet replicated.
.IP \(bu 2
\fBdoc_write_failures\fP (\fInumber\fP) \-\- The count of docs which failed to be
written to the target.
.IP \(bu 2
\fBcheckpointed_source_seq\fP (\fIobject\fP) \-\- The source sequence id which was last
successfully replicated.
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_scheduler/docs/other/_replicator HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Type: application/json
Date: Sat, 29 Apr 2017 05:10:08 GMT
Server: Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked

{
    "docs": [
        {
            "database": "other/_replicator",
            "doc_id": "cdyno\-0000001\-0000002",
            "error_count": 0,
            "id": "e327d79214831ca4c11550b4a453c9ba+continuous",
            "info": null,
            "last_updated": "2017\-04\-29T05:01:37Z",
            "node": "node2@127.0.0.1",
            "proxy": null,
            "source": "http://myserver.com/foo",
            "start_time": "2017\-04\-29T05:01:37Z",
            "state": "running",
            "target": "http://adm:*****@localhost:15984/cdyno\-0000002/"
        }
    ],
    "offset": 0,
    "total_rows": 1
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET /_scheduler/docs/{replicator_db}/{docid}
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
As a convenience slashes (\fB/\fP) in replicator db names do not
have to be escaped. So \fB/_scheduler/docs/other/_replicator\fP is valid
and equivalent to \fB/_scheduler/docs/other%2f_replicator\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBid\fP (\fIstring\fP) \-\- Replication ID, or \fBnull\fP if state is \fBcompleted\fP or
\fBfailed\fP
.IP \(bu 2
\fBstate\fP (\fIstring\fP) \-\- One of following states (see \fIreplicator/states\fP
for descriptions): \fBinitializing\fP, \fBrunning\fP,
\fBcompleted\fP, \fBpending\fP, \fBcrashing\fP, \fBerror\fP,
\fBfailed\fP
.IP \(bu 2
\fBdatabase\fP (\fIstring\fP) \-\- Database where replication document came from
.IP \(bu 2
\fBdoc_id\fP (\fIstring\fP) \-\- Replication document ID
.IP \(bu 2
\fBnode\fP (\fIstring\fP) \-\- Cluster node where the job is running
.IP \(bu 2
\fBsource\fP (\fIstring\fP) \-\- Replication source
.IP \(bu 2
\fBtarget\fP (\fIstring\fP) \-\- Replication target
.IP \(bu 2
\fBstart_time\fP (\fIstring\fP) \-\- Timestamp of when the replication was started
.IP \(bu 2
\fBlast_update\fP (\fIstring\fP) \-\- Timestamp of last state update
.IP \(bu 2
\fBinfo\fP (\fIobject\fP) \-\- May contain additional information about the state.
For error states, this will be a string. For success
states this will contain a JSON object (see below).
.IP \(bu 2
\fBerror_count\fP (\fInumber\fP) \-\- Consecutive errors count. Indicates how many
times in a row this replication has crashed.
Replication will be retried with an exponential
backoff based on this number. As soon as the
replication succeeds this count is reset to 0.
To can be used to get an idea why a particular
replication is not making progress.
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.UNINDENT
.UNINDENT
.sp
The \fBinfo\fP field of a scheduler doc:
.INDENT 7.0
.TP
.B JSON Object
.INDENT 7.0
.IP \(bu 2
\fBrevisions_checked\fP (\fInumber\fP) \-\- The count of revisions which have been
checked since this replication began.
.IP \(bu 2
\fBmissing_revisions_found\fP (\fInumber\fP) \-\- The count of revisions which were
found on the source, but missing from the target.
.IP \(bu 2
\fBdocs_read\fP (\fInumber\fP) \-\- The count of docs which have been read from the
source.
.IP \(bu 2
\fBdocs_written\fP (\fInumber\fP) \-\- The count of docs which have been written to the
target.
.IP \(bu 2
\fBchanges_pending\fP (\fInumber\fP) \-\- The count of changes not yet replicated.
.IP \(bu 2
\fBdoc_write_failures\fP (\fInumber\fP) \-\- The count of docs which failed to be
written to the target.
.IP \(bu 2
\fBcheckpointed_source_seq\fP (\fIobject\fP) \-\- .INDENT 2.0
.TP
.B The source sequence id which was last
successfully replicated.
.UNINDENT
.sp
\fBRequest\fP:

.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_scheduler/docs/other/_replicator/cdyno\-0000001\-0000002 HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Type: application/json
Date: Sat, 29 Apr 2017 05:10:08 GMT
Server: Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked

{
    "database": "other/_replicator",
    "doc_id": "cdyno\-0000001\-0000002",
    "error_count": 0,
    "id": "e327d79214831ca4c11550b4a453c9ba+continuous",
    "info": null,
    "last_updated": "2017\-04\-29T05:01:37Z",
    "node": "node2@127.0.0.1",
    "proxy": null,
    "source": "http://myserver.com/foo",
    "start_time": "2017\-04\-29T05:01:37Z",
    "state": "running",
    "target": "http://adm:*****@localhost:15984/cdyno\-0000002/"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/_node/{node\-name}/_stats\fP
.INDENT 0.0
.TP
.B GET /_node/{node\-name}/_stats
The \fB_stats\fP resource returns a JSON object containing the statistics
for the running server. The object is structured with top\-level sections
collating the statistics for a range of entries, with each individual
statistic being easily identified, and the content of each statistic is
self\-describing.
.sp
The literal string \fB_local\fP serves as an alias for the local node name, so
for all stats URLs, \fB{node\-name}\fP may be replaced \fB_local\fP, to
interact with the local node\(aqs statistics.
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_node/_local/_stats/couchdb/request_time HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 187
Content\-Type: application/json
Date: Sat, 10 Aug 2013 11:41:11 GMT
Server: CouchDB (Erlang/OTP)

{
  "value": {
    "min": 0,
    "max": 0,
    "arithmetic_mean": 0,
    "geometric_mean": 0,
    "harmonic_mean": 0,
    "median": 0,
    "variance": 0,
    "standard_deviation": 0,
    "skewness": 0,
    "kurtosis": 0,
    "percentile": [
      [
        50,
        0
      ],
      [
        75,
        0
      ],
      [
        90,
        0
      ],
      [
        95,
        0
      ],
      [
        99,
        0
      ],
      [
        999,
        0
      ]
    ],
    "histogram": [
      [
        0,
        0
      ]
    ],
    "n": 0
  },
  "type": "histogram",
  "desc": "length of a request inside CouchDB without MochiWeb"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The fields provide the current, minimum and maximum, and a collection of
statistical means and quantities. The quantity in each case is not defined, but
the descriptions below provide sufficient detail to determine units.
.sp
Statistics are reported by \(aqgroup\(aq.  The statistics are divided into the
following top\-level sections:
.INDENT 0.0
.IP \(bu 2
\fBcouch_log\fP: Logging subsystem
.IP \(bu 2
\fBcouch_replicator\fP: Replication scheduler and subsystem
.IP \(bu 2
\fBcouchdb\fP: Primary CouchDB database operations
.IP \(bu 2
\fBfabric\fP: Cluster\-related operations
.IP \(bu 2
\fBglobal_changes\fP: Global changes feed
.IP \(bu 2
\fBmem3\fP: Node membership\-related statistics
.IP \(bu 2
\fBpread\fP: CouchDB file\-related exceptions
.IP \(bu 2
\fBrexi\fP: Cluster internal RPC\-related statistics
.UNINDENT
.sp
The type of the statistic is included in the \fBtype\fP field, and is one of
the following:
.INDENT 0.0
.IP \(bu 2
\fBcounter\fP: Monotonically increasing counter, resets on restart
.IP \(bu 2
\fBhistogram\fP: Binned set of values with meaningful subdivisions
.IP \(bu 2
\fBgauge\fP: Single numerical value that can go up and down
.UNINDENT
.sp
You can also access individual statistics by quoting the statistics sections
and statistic ID as part of the URL path. For example, to get the
\fBrequest_time\fP statistics within the \fBcouchdb\fP section for the target
node, you can use:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_node/_local/_stats/couchdb/request_time HTTP/1.1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This returns an entire statistics object, as with the full request, but
containing only the requested individual statistic.
.SS \fB/_node/{node\-name}/_system\fP
.INDENT 0.0
.TP
.B GET /_node/{node\-name}/_system
The \fB_system\fP resource returns a JSON object containing various
system\-level statistics for the running server. The object is structured
with top\-level sections collating the statistics for a range of entries,
with each individual statistic being easily identified, and the content of
each statistic is self\-describing.
.sp
The literal string \fB_local\fP serves as an alias for the local node name, so
for all stats URLs, \fB{node\-name}\fP may be replaced \fB_local\fP, to
interact with the local node\(aqs statistics.
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_node/_local/_system HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 187
Content\-Type: application/json
Date: Sat, 10 Aug 2013 11:41:11 GMT
Server: CouchDB (Erlang/OTP)

{
  "uptime": 259,
  "memory": {
  ...
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
These statistics are generally intended for CouchDB developers only.
.UNINDENT
.SS \fB/_utils\fP
.INDENT 0.0
.TP
.B GET /_utils
Accesses the built\-in Fauxton administration interface for CouchDB.
.INDENT 7.0
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Location\fP \-\- New URI location
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%301 Moved Permanently\fP \-\- Redirects to \fBGET /_utils/\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET /_utils/
.INDENT 7.0
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fItext/html\fP
.IP \(bu 2
\fI\%Last\-Modified\fP \-\- Static files modification timestamp
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/_up\fP
.sp
New in version 2.0.

.INDENT 0.0
.TP
.B GET /_up
Confirms that the server is up, running, and ready to respond to requests.
If \fBmaintenance_mode\fP is
\fBtrue\fP or \fBnolb\fP, the endpoint will return a 404 response.
.INDENT 7.0
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%404 Not Found\fP \-\- The server is unavaialble for requests at this time.
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 16
Content\-Type: application/json
Date: Sat, 17 Mar 2018 04:46:26 GMT
Server: CouchDB/2.2.0\-f999071ec (Erlang OTP/19)
X\-Couch\-Request\-ID: c57a3b2787
X\-CouchDB\-Body\-Time: 0

{"status":"ok"}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/_uuids\fP
.sp
Changed in version 2.0.0.

.INDENT 0.0
.TP
.B GET /_uuids
Requests one or more Universally Unique Identifiers (UUIDs) from the
CouchDB instance. The response is a JSON object providing a list of UUIDs.
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBcount\fP (\fInumber\fP) \-\- Number of UUIDs to return. Default is \fB1\fP\&.
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.IP \(bu 2
\fI\%ETag\fP \-\- Response hash
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Requested more UUIDs than is \fBallowed\fP to retrieve
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_uuids?count=10 HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Length: 362
Content\-Type: application/json
Date: Sat, 10 Aug 2013 11:46:25 GMT
ETag: "DGRWWQFLUDWN5MRKSLKQ425XV"
Expires: Fri, 01 Jan 1990 00:00:00 GMT
Pragma: no\-cache
Server: CouchDB (Erlang/OTP)

{
    "uuids": [
        "75480ca477454894678e22eec6002413",
        "75480ca477454894678e22eec600250b",
        "75480ca477454894678e22eec6002c41",
        "75480ca477454894678e22eec6003b90",
        "75480ca477454894678e22eec6003fca",
        "75480ca477454894678e22eec6004bef",
        "75480ca477454894678e22eec600528f",
        "75480ca477454894678e22eec6005e0b",
        "75480ca477454894678e22eec6006158",
        "75480ca477454894678e22eec6006161"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The UUID type is determined by the \fBUUID algorithm\fP setting in the CouchDB configuration.
.sp
The UUID type may be changed at any time through the
\fIConfiguration API\fP\&. For example, the UUID type
could be changed to \fBrandom\fP by sending this HTTP request:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
PUT http://couchdb:5984/_node/nonode@nohost/_config/uuids/algorithm HTTP/1.1
Content\-Type: application/json
Accept: */*

"random"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can verify the change by obtaining a list of UUIDs:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "uuids" : [
        "031aad7b469956cf2826fcb2a9260492",
        "6ec875e15e6b385120938df18ee8e496",
        "cff9e881516483911aa2f0e98949092d",
        "b89d37509d39dd712546f9510d4a9271",
        "2e0dbf7f6c4ad716f21938a016e4e59f"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fB/favicon.ico\fP
.INDENT 0.0
.TP
.B GET /favicon.ico
Binary content for the \fIfavicon.ico\fP site icon.
.INDENT 7.0
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIimage/x\-icon\fP
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%404 Not Found\fP \-\- The requested content could not be found
.UNINDENT
.UNINDENT
.UNINDENT
.SS Authentication
.sp
Interfaces for obtaining session and authorization data.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
We also strongly recommend you \fIset up SSL\fP to
improve all authentication methods\(aq security.
.UNINDENT
.UNINDENT
.SS Basic Authentication
.sp
\fI\%Basic authentication\fP (\fI\%RFC 2617\fP) is a quick and simple way to authenticate
with CouchDB. The main drawback is the need to send user credentials with each
request which may be insecure and could hurt operation performance (since
CouchDB must compute the password hash with every request):
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET / HTTP/1.1
Accept: application/json
Authorization: Basic cm9vdDpyZWxheA==
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 177
Content\-Type: application/json
Date: Mon, 03 Dec 2012 00:44:47 GMT
Server: CouchDB (Erlang/OTP)

{
    "couchdb":"Welcome",
    "uuid":"0a959b9b8227188afc2ac26ccdf345a6",
    "version":"1.3.0",
    "vendor": {
        "version":"1.3.0",
        "name":"The Apache Software Foundation"
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Cookie Authentication
.sp
For cookie authentication (\fI\%RFC 2109\fP) CouchDB generates a token that the
client can use for the next few requests to CouchDB. Tokens are valid until
a timeout. When CouchDB sees a valid token in a subsequent request, it will
authenticate the user by this token without requesting the password again. By
default, cookies are valid for 10 minutes, but it\(aqs \fBadjustable\fP\&. Also it\(aqs possible to make cookies
\fBpersistent\fP\&.
.sp
To obtain the first token and thus authenticate a user for the first time, the
\fIusername\fP and \fIpassword\fP must be sent to the \fI_session API\fP\&.
.SS \fB/_session\fP
.INDENT 0.0
.TP
.B POST /_session
Initiates new session for specified user credentials by providing \fICookie\fP
value.
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/x\-www\-form\-urlencoded\fP
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBnext\fP (\fIstring\fP) \-\- Enforces redirect after successful login to the
specified location. This location is relative from server root.
\fIOptional\fP\&.
.UNINDENT
.TP
.B Form Parameters
.INDENT 7.0
.IP \(bu 2
\fBname\fP \-\- User name
.IP \(bu 2
\fBpassword\fP \-\- Password
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Set\-Cookie\fP \-\- Authorization token
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBok\fP (\fIboolean\fP) \-\- Operation status
.IP \(bu 2
\fBname\fP (\fIstring\fP) \-\- Username
.IP \(bu 2
\fBroles\fP (\fIarray\fP) \-\- List of user roles
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Successfully authenticated
.IP \(bu 2
\fI\%302 Found\fP \-\- Redirect after successful authentication
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Username or password wasn\(aqt recognized
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /_session HTTP/1.1
Accept: application/json
Content\-Length: 24
Content\-Type: application/x\-www\-form\-urlencoded
Host: localhost:5984

name=root&password=relax
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It\(aqs also possible to send data as JSON:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /_session HTTP/1.1
Accept: application/json
Content\-Length: 37
Content\-Type: application/json
Host: localhost:5984

{
    "name": "root",
    "password": "relax"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 43
Content\-Type: application/json
Date: Mon, 03 Dec 2012 01:23:14 GMT
Server: CouchDB (Erlang/OTP)
Set\-Cookie: AuthSession=cm9vdDo1MEJCRkYwMjq0LO0ylOIwShrgt8y\-UkhI\-c6BGw; Version=1; Path=/; HttpOnly

{"ok":true,"name":"root","roles":["_admin"]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If \fBnext\fP query parameter was provided the response will trigger
redirection to the specified location in case of successful authentication:
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /_session?next=/blog/_design/sofa/_rewrite/recent\-posts HTTP/1.1
Accept: application/json
Content\-Type: application/x\-www\-form\-urlencoded
Host: localhost:5984

name=root&password=relax
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 302 Moved Temporarily
Cache\-Control: must\-revalidate
Content\-Length: 43
Content\-Type: application/json
Date: Mon, 03 Dec 2012 01:32:46 GMT
Location: http://localhost:5984/blog/_design/sofa/_rewrite/recent\-posts
Server: CouchDB (Erlang/OTP)
Set\-Cookie: AuthSession=cm9vdDo1MEJDMDEzRTp7Vu5GKCkTxTVxwXbpXsBARQWnhQ; Version=1; Path=/; HttpOnly

{"ok":true,"name":null,"roles":["_admin"]}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET /_session
Returns information about the authenticated user, including a
\fIuserctx_object\fP, the authentication method and database that were
used, and a list of configured authentication handlers on the server.
.INDENT 7.0
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBbasic\fP (\fIboolean\fP) \-\- Accept \fIBasic Auth\fP by requesting this resource.
\fIOptional\fP\&.
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBok\fP (\fIboolean\fP) \-\- Operation status
.IP \(bu 2
\fBuserCtx\fP (\fIobject\fP) \-\- User context for the current user
.IP \(bu 2
\fBinfo\fP (\fIobject\fP) \-\- Server authentication configuration
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Successfully authenticated.
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Username or password wasn\(aqt recognized.
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_session HTTP/1.1
Host: localhost:5984
Accept: application/json
Cookie: AuthSession=cm9vdDo1MEJDMDQxRDpqb\-Ta9QfP9hpdPjHLxNTKg_Hf9w
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 175
Content\-Type: application/json
Date: Fri, 09 Aug 2013 20:27:45 GMT
Server: CouchDB (Erlang/OTP)
Set\-Cookie: AuthSession=cm9vdDo1MjA1NTBDMTqmX2qKt1KDR\-\-GUC80DQ6\-Ew_XIw; Version=1; Path=/; HttpOnly

{
    "info": {
        "authenticated": "cookie",
        "authentication_db": "_users",
        "authentication_handlers": [
            "cookie",
            "default"
        ]
    },
    "ok": true,
    "userCtx": {
        "name": "root",
        "roles": [
            "_admin"
        ]
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B DELETE /_session
Closes user\(aqs session by instructing the browser to clear the cookie. This
does not invalidate the session from the server\(aqs perspective, as there is
no way to do this because CouchDB cookies are stateless. This means calling
this endpoint is purely optional from a client perspective, and it does not
protect against theft of a session cookie.
.INDENT 7.0
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Successfully close session.
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
DELETE /_session HTTP/1.1
Accept: application/json
Cookie: AuthSession=cm9vdDo1MjA1NEVGMDo1QXNQkqC_0Qmgrk8Fw61_AzDeXw
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 12
Content\-Type: application/json
Date: Fri, 09 Aug 2013 20:30:12 GMT
Server: CouchDB (Erlang/OTP)
Set\-Cookie: AuthSession=; Version=1; Path=/; HttpOnly

{
    "ok": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Proxy Authentication
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
To use this authentication method make sure that the
\fB{chttpd_auth, proxy_authentication_handler}\fP value in added to the
list of the active \fBchttpd/authentication_handlers\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[chttpd]
authentication_handlers = {chttpd_auth, cookie_authentication_handler}, {chttpd_auth, proxy_authentication_handler}, {chttpd_auth, default_authentication_handler}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fIProxy authentication\fP is very useful in case your application already uses
some external authentication service and you don\(aqt want to duplicate users and
their roles in CouchDB.
.sp
This authentication method allows creation of a \fIuserctx_object\fP for
remotely authenticated user. By default, the client just needs to pass specific
headers to CouchDB with related requests:
.INDENT 0.0
.IP \(bu 2
\fBX\-Auth\-CouchDB\-UserName\fP:
username;
.IP \(bu 2
\fBX\-Auth\-CouchDB\-Roles\fP:
comma\-separated (\fB,\fP) list of user roles;
.IP \(bu 2
\fBX\-Auth\-CouchDB\-Token\fP:
authentication token. When
\fBproxy_use_secret\fP
is set (which is strongly recommended!), this header provides an HMAC of the
username to authenticate and the secret token to prevent requests from
untrusted sources.
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_session HTTP/1.1
Host: localhost:5984
Accept: application/json
Content\-Type: application/json; charset=utf\-8
X\-Auth\-CouchDB\-Roles: users,blogger
X\-Auth\-CouchDB\-UserName: foo
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 190
Content\-Type: application/json
Date: Fri, 14 Jun 2013 10:16:03 GMT
Server: CouchDB (Erlang/OTP)

{
    "info": {
        "authenticated": "proxy",
        "authentication_db": "_users",
        "authentication_handlers": [
            "cookie",
            "proxy",
            "default"
        ]
    },
    "ok": true,
    "userCtx": {
        "name": "foo",
        "roles": [
            "users",
            "blogger"
        ]
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that you don\(aqt need to request \fIsession\fP
to be authenticated by this method if all required HTTP headers are provided.
.SS Configuration
.sp
The CouchDB Server Configuration API provide an interface to query and update
the various configuration values within a running CouchDB instance.
.SS Accessing the local node\(aqs configuration
.sp
The literal string \fB_local\fP serves as an alias for the local node name, so
for all configuration URLs, \fB{node\-name}\fP may be replaced \fB_local\fP, to
interact with the local node\(aqs configuration.
.SS \fB/_node/{node\-name}/_config\fP
.INDENT 0.0
.TP
.B GET /_node/{node\-name}/_config
Returns the entire CouchDB server configuration as a JSON structure. The
structure is organized by different configuration sections, with
individual values.
.INDENT 7.0
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_node/nonode@nohost/_config HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 4148
Content\-Type: application/json
Date: Sat, 10 Aug 2013 12:01:42 GMT
Server: CouchDB (Erlang/OTP)

{
    "attachments": {
        "compressible_types": "text/*, application/javascript, application/json,  application/xml",
        "compression_level": "8"
    },
    "couchdb": {
        "users_db_suffix": "_users",
        "database_dir": "/var/lib/couchdb",
        "delayed_commits": "true",
        "max_attachment_chunk_size": "4294967296",
        "max_dbs_open": "100",
        "os_process_timeout": "5000",
        "uri_file": "/var/lib/couchdb/couch.uri",
        "util_driver_dir": "/usr/lib64/couchdb/erlang/lib/couch\-1.5.0/priv/lib",
        "view_index_dir": "/var/lib/couchdb"
    },
    "chttpd": {
        "backlog": "512",
        "bind_address": "0.0.0.0",
        "docroot": "./share/www",
        "port": "5984",
        "require_valid_user": "false",
        "socket_options": "[{recbuf, 262144}, {sndbuf, 262144}, {nodelay, true}]"
    },
    "daemons": {
        "auth_cache": "{couch_auth_cache, start_link, []}",
        "db_update_notifier": "{couch_db_update_notifier_sup, start_link, []}",
        "external_manager": "{couch_external_manager, start_link, []}",
        "httpd": "{couch_httpd, start_link, []}",
        "query_servers": "{couch_query_servers, start_link, []}",
        "stats_aggregator": "{couch_stats_aggregator, start, []}",
        "stats_collector": "{couch_stats_collector, start, []}",
        "uuids": "{couch_uuids, start, []}",
        "view_manager": "{couch_view, start_link, []}"
    },
    "httpd": {
        "allow_jsonp": "false",
        "authentication_handlers": "{couch_httpd_auth, cookie_authentication_handler}, {couch_httpd_auth, default_authentication_handler}",
        "bind_address": "192.168.0.2",
        "default_handler": "{couch_httpd_db, handle_request}",
        "max_connections": "2048",
        "port": "5984",
        "secure_rewrites": "true",
        "vhost_global_handlers": "_utils, _uuids, _session, _users"
    },
    "httpd_db_handlers": {
        "_changes": "{couch_httpd_db, handle_changes_req}",
        "_compact": "{couch_httpd_db, handle_compact_req}",
        "_design": "{couch_httpd_db, handle_design_req}",
        "_temp_view": "{couch_httpd_view, handle_temp_view_req}",
        "_view_cleanup": "{couch_httpd_db, handle_view_cleanup_req}"
    },
    "httpd_design_handlers": {
        "_info": "{couch_httpd_db,   handle_design_info_req}",
        "_list": "{couch_httpd_show, handle_view_list_req}",
        "_rewrite": "{couch_httpd_rewrite, handle_rewrite_req}",
        "_show": "{couch_httpd_show, handle_doc_show_req}",
        "_update": "{couch_httpd_show, handle_doc_update_req}",
        "_view": "{couch_httpd_view, handle_view_req}"
    },
    "httpd_global_handlers": {
        "/": "{couch_httpd_misc_handlers, handle_welcome_req, <<\e"Welcome\e">>}",
        "_active_tasks": "{couch_httpd_misc_handlers, handle_task_status_req}",
        "_all_dbs": "{couch_httpd_misc_handlers, handle_all_dbs_req}",
        "_config": "{couch_httpd_misc_handlers, handle_config_req}",
        "_replicate": "{couch_httpd_misc_handlers, handle_replicate_req}",
        "_restart": "{couch_httpd_misc_handlers, handle_restart_req}",
        "_session": "{couch_httpd_auth, handle_session_req}",
        "_stats": "{couch_httpd_stats_handlers, handle_stats_req}",
        "_utils": "{couch_httpd_misc_handlers, handle_utils_dir_req, \e"/usr/share/couchdb/www\e"}",
        "_uuids": "{couch_httpd_misc_handlers, handle_uuids_req}",
        "favicon.ico": "{couch_httpd_misc_handlers, handle_favicon_req, \e"/usr/share/couchdb/www\e"}"
    },
    "log": {
        "writer": "file",
        "file": "/var/log/couchdb/couch.log",
        "include_sasl": "true",
        "level": "info"
    },
    "query_server_config": {
        "reduce_limit": "true"
    },
    "query_servers": {
        "javascript": "/usr/bin/couchjs /usr/share/couchdb/server/main.js"
    },
    "replicator": {
        "max_http_pipeline_size": "10",
        "max_http_sessions": "10"
    },
    "stats": {
        "rate": "1000",
        "samples": "[0, 60, 300, 900]"
    },
    "uuids": {
        "algorithm": "utc_random"
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB_node/{node\-name}/_config/section\fP
.INDENT 0.0
.TP
.B GET /_node/{node\-name}/_config/{section}
Gets the configuration structure for a single section.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsection\fP \-\- Configuration section name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_node/nonode@nohost/_config/httpd HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 444
Content\-Type: application/json
Date: Sat, 10 Aug 2013 12:10:40 GMT
Server: CouchDB (Erlang/OTP)

{
    "allow_jsonp": "false",
    "authentication_handlers": "{couch_httpd_auth, cookie_authentication_handler}, {couch_httpd_auth, default_authentication_handler}",
    "bind_address": "127.0.0.1",
    "default_handler": "{couch_httpd_db, handle_request}",
    "enable_cors": "false",
    "port": "5984",
    "secure_rewrites": "true",
    "vhost_global_handlers": "_utils, _uuids, _session, _users"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/_node/node/_config/section/key\fP
.INDENT 0.0
.TP
.B GET /_node/{node\-name}/_config/{section}/{key}
Gets a single configuration value from within a specific configuration
section.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsection\fP \-\- Configuration section name
.IP \(bu 2
\fBkey\fP \-\- Configuration option name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /_node/nonode@nohost/_config/log/level HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 8
Content\-Type: application/json
Date: Sat, 10 Aug 2013 12:12:59 GMT
Server: CouchDB (Erlang/OTP)

"debug"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
The returned value will be the JSON of the value, which may be a string
or numeric value, or an array or object. Some client environments may
not parse simple strings or numeric values as valid JSON.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B PUT /_node/{node\-name}/_config/{section}/{key}
Updates a configuration value. The new value should be supplied in the
request body in the corresponding JSON format. If you are setting a string
value, you must supply a valid JSON string. In response CouchDB sends old
value for target section key.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsection\fP \-\- Configuration section name
.IP \(bu 2
\fBkey\fP \-\- Configuration option name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid JSON request body
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.IP \(bu 2
\fI\%500 Internal Server Error\fP \-\- Error setting configuration
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
PUT /_node/nonode@nohost/_config/log/level HTTP/1.1
Accept: application/json
Content\-Length: 7
Content\-Type: application/json
Host: localhost:5984

"info"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 8
Content\-Type: application/json
Date: Sat, 10 Aug 2013 12:12:59 GMT
Server: CouchDB (Erlang/OTP)

"debug"
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B DELETE /_node/{node\-name}/_config/{section}/{key}
Deletes a configuration value. The returned JSON will be the value of the
configuration parameter before it was deleted.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsection\fP \-\- Configuration section name
.IP \(bu 2
\fBkey\fP \-\- Configuration option name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Specified configuration option not found
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
DELETE /_node/nonode@nohost/_config/log/level HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 7
Content\-Type: application/json
Date: Sat, 10 Aug 2013 12:29:03 GMT
Server: CouchDB (Erlang/OTP)

"info"
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Databases
.sp
The Database endpoint provides an interface to an entire database with in
CouchDB. These are database\-level, rather than document\-level requests.
.sp
For all these requests, the database name within the URL path
should be the database name that you wish to perform the operation on.
For example, to obtain the meta information for the database
\fBrecipes\fP, you would use the HTTP request:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For clarity, the form below is used in the URL paths:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /db
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Where \fBdb\fP is the name of any database.
.SS \fB/db\fP
.INDENT 0.0
.TP
.B HEAD /{db}
Returns the HTTP Headers containing a minimal amount of information
about the specified database. Since the response body is empty, using the
HEAD method is a lightweight way to check if the database exists already or
not.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Database exists
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Requested database not found
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HEAD /test HTTP/1.1
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Mon, 12 Aug 2013 01:27:41 GMT
Server: CouchDB (Erlang/OTP)
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET /{db}
Gets information about the specified database.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBcluster.n\fP (\fInumber\fP) \-\- Replicas. The number of copies of every document.
.IP \(bu 2
\fBcluster.q\fP (\fInumber\fP) \-\- Shards. The number of range partitions.
.IP \(bu 2
\fBcluster.r\fP (\fInumber\fP) \-\- Read quorum. The number of consistent copies
of a document that need to be read before a successful reply.
.IP \(bu 2
\fBcluster.w\fP (\fInumber\fP) \-\- Write quorum. The number of copies of a document
that need to be written before a successful reply.
.IP \(bu 2
\fBcompact_running\fP (\fIboolean\fP) \-\- Set to \fBtrue\fP if the database compaction
routine is operating on this database.
.IP \(bu 2
\fBdb_name\fP (\fIstring\fP) \-\- The name of the database.
.IP \(bu 2
\fBdisk_format_version\fP (\fInumber\fP) \-\- The version of the physical format used
for the data when it is stored on disk.
.IP \(bu 2
\fBdata_size\fP (\fInumber\fP) \-\- \fIDeprecated.\fP Use \fBsizes.active\fP instead.
.IP \(bu 2
\fBdisk_size\fP (\fInumber\fP) \-\- \fIDeprecated.\fP Use \fBsizes.file\fP instead.
.IP \(bu 2
\fBdoc_count\fP (\fInumber\fP) \-\- A count of the documents in the specified
database.
.IP \(bu 2
\fBdoc_del_count\fP (\fInumber\fP) \-\- Number of deleted documents
.IP \(bu 2
\fBinstance_start_time\fP (\fIstring\fP) \-\- Always \fB"0"\fP\&. (Returned for legacy
reasons.)
.IP \(bu 2
\fBother\fP (\fIobject\fP) \-\- Used by Cloudant. \fIDeprecated.\fP
.IP \(bu 2
\fBpurge_seq\fP (\fInumber\fP) \-\- The number of purge operations on the database.
.IP \(bu 2
\fBsizes.active\fP (\fInumber\fP) \-\- The size of live data inside the database, in
bytes.
.IP \(bu 2
\fBsizes.external\fP (\fInumber\fP) \-\- The uncompressed size of database contents
in bytes.
.IP \(bu 2
\fBsizes.file\fP (\fInumber\fP) \-\- The size of the database file on disk in bytes.
Views indexes are not included in the calculation.
.IP \(bu 2
\fBupdate_seq\fP (\fIstring\fP) \-\- An opaque string that describes the state
of the database. Do not rely on this string for counting the number
of updates.
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Requested database not found
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /receipts HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 258
Content\-Type: application/json
Date: Mon, 12 Aug 2013 01:38:57 GMT
Server: CouchDB (Erlang/OTP)

{
    "cluster": {
        "n": 3,
        "q": 8,
        "r": 2,
        "w": 2
    },
    "compact_running": false,
    "data_size": 65031503,
    "db_name": "receipts",
    "disk_format_version": 6,
    "disk_size": 137433211,
    "doc_count": 6146,
    "doc_del_count": 64637,
    "instance_start_time": "0",
    "other": {
        "data_size": 66982448
    },
    "purge_seq": 0,
    "sizes": {
        "active": 65031503,
        "external": 66982448,
        "file": 137433211
    },
    "update_seq": "292786\-g1AAAAF..."
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B PUT /{db}
Creates a new database. The database name \fB{db}\fP must be composed by
following next rules:
.INDENT 7.0
.IP \(bu 2
Name must begin with a lowercase letter (\fBa\-z\fP)
.IP \(bu 2
Lowercase characters (\fBa\-z\fP)
.IP \(bu 2
Digits (\fB0\-9\fP)
.IP \(bu 2
Any of the characters \fB_\fP, \fB$\fP, \fB(\fP, \fB)\fP, \fB+\fP, \fB\-\fP, and
\fB/\fP\&.
.UNINDENT
.sp
If you\(aqre familiar with \fI\%Regular Expressions\fP, the rules above could be
written as \fB^[a\-z][a\-z0\-9_$()+/\-]*$\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBq\fP (\fIinteger\fP) \-\- Shards, aka the number of range partitions. Default is
8, unless overridden in the \fBcluster config\fP\&.
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.IP \(bu 2
\fI\%Location\fP \-\- Database URI location
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBok\fP (\fIboolean\fP) \-\- Operation status. Available in case of success
.IP \(bu 2
\fBerror\fP (\fIstring\fP) \-\- Error type. Available if response code is \fB4xx\fP
.IP \(bu 2
\fBreason\fP (\fIstring\fP) \-\- Error description. Available if response code is
\fB4xx\fP
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%201 Created\fP \-\- Database created successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid database name
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.IP \(bu 2
\fI\%412 Precondition Failed\fP \-\- Database already exists
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
PUT /db HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 12
Content\-Type: application/json
Date: Mon, 12 Aug 2013 08:01:45 GMT
Location: http://localhost:5984/db
Server: CouchDB (Erlang/OTP)

{
    "ok": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If we repeat the same request to CouchDB, it will response with \fB412\fP
since the database already exists:
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
PUT /db HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 412 Precondition Failed
Cache\-Control: must\-revalidate
Content\-Length: 95
Content\-Type: application/json
Date: Mon, 12 Aug 2013 08:01:16 GMT
Server: CouchDB (Erlang/OTP)

{
    "error": "file_exists",
    "reason": "The database could not be created, the file already exists."
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If an invalid database name is supplied, CouchDB returns response with
\fB400\fP:
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
PUT /_db HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 400 Bad Request
Cache\-Control: must\-revalidate
Content\-Length: 194
Content\-Type: application/json
Date: Mon, 12 Aug 2013 08:02:10 GMT
Server: CouchDB (Erlang/OTP)

{
    "error": "illegal_database_name",
    "reason": "Name: \(aq_db\(aq. Only lowercase characters (a\-z), digits (0\-9), and any of the characters _, $, (, ), +, \-, and / are allowed. Must begin with a letter."
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B DELETE /{db}
Deletes the specified database, and all the documents and attachments
contained within it.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
To avoid deleting a database, CouchDB will respond with the HTTP status
code 400 when the request URL includes a ?rev= parameter. This suggests
that one wants to delete a document but forgot to add the document id
to the URL.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBok\fP (\fIboolean\fP) \-\- Operation status
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Database removed successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid database name or forgotten document id by accident
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Database doesn\(aqt exist
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
DELETE /db HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 12
Content\-Type: application/json
Date: Mon, 12 Aug 2013 08:54:00 GMT
Server: CouchDB (Erlang/OTP)

{
    "ok": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B POST /{db}
Creates a new document in the specified database, using the supplied JSON
document structure.
.sp
If the JSON structure includes the \fB_id\fP field, then the document will be
created with the specified document ID.
.sp
If the \fB_id\fP field is not specified, a new unique ID will be generated,
following whatever UUID algorithm is configured for that server.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.IP \(bu 2
\fBX\-Couch\-Full\-Commit\fP \-\- Overrides server\(aqs
\fBcommit policy\fP\&. Possible values
are: \fBfalse\fP and \fBtrue\fP\&. \fIOptional\fP\&.
.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBbatch\fP (\fIstring\fP) \-\- Stores document in \fIbatch mode\fP Possible values: \fBok\fP\&. \fIOptional\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.IP \(bu 2
\fI\%Location\fP \-\- Document\(aqs URI
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBid\fP (\fIstring\fP) \-\- Document ID
.IP \(bu 2
\fBok\fP (\fIboolean\fP) \-\- Operation status
.IP \(bu 2
\fBrev\fP (\fIstring\fP) \-\- Revision info
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%201 Created\fP \-\- Document created and stored on disk
.IP \(bu 2
\fI\%202 Accepted\fP \-\- Document data accepted, but not yet stored on disk
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid database name
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Write privileges required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Database doesn\(aqt exist
.IP \(bu 2
\fI\%409 Conflict\fP \-\- A Conflicting Document with same ID already exists
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db HTTP/1.1
Accept: application/json
Content\-Length: 81
Content\-Type: application/json

{
    "servings": 4,
    "subtitle": "Delicious with fresh bread",
    "title": "Fish Stew"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 95
Content\-Type: application/json
Date: Tue, 13 Aug 2013 15:19:25 GMT
Location: http://localhost:5984/db/ab39fe0993049b84cfa81acd6ebad09d
Server: CouchDB (Erlang/OTP)

{
    "id": "ab39fe0993049b84cfa81acd6ebad09d",
    "ok": true,
    "rev": "1\-9c65296036141e575d32ba9c034dd3ee"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Specifying the Document ID
.sp
The document ID can be specified by including the \fB_id\fP field in the
JSON of the submitted record. The following request will create the same
document with the ID \fBFishStew\fP\&.
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db HTTP/1.1
Accept: application/json
Content\-Length: 98
Content\-Type: application/json

{
    "_id": "FishStew",
    "servings": 4,
    "subtitle": "Delicious with fresh bread",
    "title": "Fish Stew"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 71
Content\-Type: application/json
Date: Tue, 13 Aug 2013 15:19:25 GMT
ETag: "1\-9c65296036141e575d32ba9c034dd3ee"
Location: http://localhost:5984/db/FishStew
Server: CouchDB (Erlang/OTP)

{
    "id": "FishStew",
    "ok": true,
    "rev": "1\-9c65296036141e575d32ba9c034dd3ee"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Batch Mode Writes
.sp
You can write documents to the database at a higher rate by using the batch
option. This collects document writes together in memory (on a per\-user basis)
before they are committed to disk. This increases the risk of the documents not
being stored in the event of a failure, since the documents are not written to
disk immediately.
.sp
Batch mode is not suitable for critical data, but may be ideal for applications
such as log data, when the risk of some data loss due to a crash is acceptable.
.sp
To use batch mode, append the \fBbatch=ok\fP query argument to the URL of a
\fBPOST /{db}\fP, \fBPUT /{db}/{docid}\fP, or \fBDELETE /{db}/{docid}\fP request. The
CouchDB server will respond with an HTTP \fI\%202 Accepted\fP response code
immediately.
.sp
Documents in the batch may be manually flushed by using the
\fBPOST /{db}/_ensure_full_commit\fP endpoint.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Creating or updating documents with batch mode doesn\(aqt guarantee that all
documents will be successfully stored on disk. For example, individual
documents may not be saved due to conflicts, rejection by
\fIvalidation function\fP or by other reasons, even if overall
the batch was successfully submitted.
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db?batch=ok HTTP/1.1
Accept: application/json
Content\-Length: 98
Content\-Type: application/json

{
    "_id": "FishStew",
    "servings": 4,
    "subtitle": "Delicious with fresh bread",
    "title": "Fish Stew"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 202 Accepted
Cache\-Control: must\-revalidate
Content\-Length: 28
Content\-Type: application/json
Date: Tue, 13 Aug 2013 15:19:25 GMT
Location: http://localhost:5984/db/FishStew
Server: CouchDB (Erlang/OTP)

{
    "id": "FishStew",
    "ok": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fB/db/_all_docs\fP
.INDENT 0.0
.TP
.B GET /{db}/_all_docs
Executes the built\-in \fI_all_docs\fP \fIview\fP, returning all of the
documents in the database.  With the exception of the URL parameters
(described below), this endpoint works identically to any other view. Refer
to the \fIview endpoint\fP documentation for a complete
description of the available query parameters and the format of the returned
data.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /db/_all_docs HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Sat, 10 Aug 2013 16:22:56 GMT
ETag: "1W2DJUZFZSZD9K78UFA3GZWB4"
Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked

{
    "offset": 0,
    "rows": [
        {
            "id": "16e458537602f5ef2a710089dffd9453",
            "key": "16e458537602f5ef2a710089dffd9453",
            "value": {
                "rev": "1\-967a00dff5e02add41819138abb3284d"
            }
        },
        {
            "id": "a4c51cdfa2069f3e905c431114001aff",
            "key": "a4c51cdfa2069f3e905c431114001aff",
            "value": {
                "rev": "1\-967a00dff5e02add41819138abb3284d"
            }
        },
        {
            "id": "a4c51cdfa2069f3e905c4311140034aa",
            "key": "a4c51cdfa2069f3e905c4311140034aa",
            "value": {
                "rev": "5\-6182c9c954200ab5e3c6bd5e76a1549f"
            }
        },
        {
            "id": "a4c51cdfa2069f3e905c431114003597",
            "key": "a4c51cdfa2069f3e905c431114003597",
            "value": {
                "rev": "2\-7051cbe5c8faecd085a3fa619e6e6337"
            }
        },
        {
            "id": "f4ca7773ddea715afebc4b4b15d4f0b3",
            "key": "f4ca7773ddea715afebc4b4b15d4f0b3",
            "value": {
                "rev": "2\-7051cbe5c8faecd085a3fa619e6e6337"
            }
        }
    ],
    "total_rows": 5
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B POST /{db}/_all_docs
The \fBPOST\fP to \fB_all_docs\fP allows to specify multiple keys to be
selected from the database. This enables you to request multiple
documents in a single request, in place of multiple \fBGET /{db}/{docid}\fP
requests.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.UNINDENT
.TP
.B Request JSON Object
.INDENT 7.0
.IP \(bu 2
\fBkeys\fP (\fIarray\fP) \-\- Return only documents that match the specified keys.
\fIOptional\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db/_all_docs HTTP/1.1
Accept: application/json
Content\-Length: 70
Content\-Type: application/json
Host: localhost:5984

{
    "keys" : [
        "Zingylemontart",
        "Yogurtraita"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "total_rows" : 2666,
    "rows" : [
        {
            "value" : {
                "rev" : "1\-a3544d296de19e6f5b932ea77d886942"
            },
            "id" : "Zingylemontart",
            "key" : "Zingylemontart"
        },
        {
            "value" : {
                "rev" : "1\-91635098bfe7d40197a1b98d7ee085fc"
            },
            "id" : "Yogurtraita",
            "key" : "Yogurtraita"
        }
    ],
    "offset" : 0
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_design_docs\fP
.sp
New in version 2.2.

.INDENT 0.0
.TP
.B GET /{db}/_design_docs
Returns a JSON structure of all of the design documents in a given
database. The information is returned as a JSON structure containing meta
information about the return structure, including a list of all design
documents and basic contents, consisting the ID, revision and key. The key
is the from the design document\(aqs \fB_id\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBconflicts\fP (\fIboolean\fP) \-\- Includes \fIconflicts\fP information in response.
Ignored if \fIinclude_docs\fP isn\(aqt \fBtrue\fP\&. Default is \fBfalse\fP\&.
.IP \(bu 2
\fBdescending\fP (\fIboolean\fP) \-\- Return the design documents in descending by
key order. Default is \fBfalse\fP\&.
.IP \(bu 2
\fBendkey\fP (\fIstring\fP) \-\- Stop returning records when the specified key is
reached. \fIOptional\fP\&.
.IP \(bu 2
\fBend_key\fP (\fIstring\fP) \-\- Alias for \fIendkey\fP param.
.IP \(bu 2
\fBendkey_docid\fP (\fIstring\fP) \-\- Stop returning records when the specified
design document ID is reached. \fIOptional\fP\&.
.IP \(bu 2
\fBend_key_doc_id\fP (\fIstring\fP) \-\- Alias for \fIendkey_docid\fP param.
.IP \(bu 2
\fBinclude_docs\fP (\fIboolean\fP) \-\- Include the full content of the design
documents in the return. Default is \fBfalse\fP\&.
.IP \(bu 2
\fBinclusive_end\fP (\fIboolean\fP) \-\- Specifies whether the specified end key
should be included in the result. Default is \fBtrue\fP\&.
.IP \(bu 2
\fBkey\fP (\fIstring\fP) \-\- Return only design documents that match the specified
key. \fIOptional\fP\&.
.IP \(bu 2
\fBkeys\fP (\fIstring\fP) \-\- Return only design documents that match the specified
keys. \fIOptional\fP\&.
.IP \(bu 2
\fBlimit\fP (\fInumber\fP) \-\- Limit the number of the returned design documents to
the specified number. \fIOptional\fP\&.
.IP \(bu 2
\fBskip\fP (\fInumber\fP) \-\- Skip this number of records before starting to return
the results. Default is \fB0\fP\&.
.IP \(bu 2
\fBstartkey\fP (\fIstring\fP) \-\- Return records starting with the specified key.
\fIOptional\fP\&.
.IP \(bu 2
\fBstart_key\fP (\fIstring\fP) \-\- Alias for \fIstartkey\fP param.
.IP \(bu 2
\fBstartkey_docid\fP (\fIstring\fP) \-\- Return records starting with the specified
design document ID. \fIOptional\fP\&.
.IP \(bu 2
\fBstart_key_doc_id\fP (\fIstring\fP) \-\- Alias for \fIstartkey_docid\fP param.
.IP \(bu 2
\fBupdate_seq\fP (\fIboolean\fP) \-\- Response includes an \fBupdate_seq\fP value
indicating which sequence id of the underlying database the view
reflects. Default is \fBfalse\fP\&.
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.IP \(bu 2
\fI\%ETag\fP \-\- Response signature
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\fInumber\fP) \-\- Offset where the design document list started
.IP \(bu 2
\fBrows\fP (\fIarray\fP) \-\- Array of view row objects. By default the information
returned contains only the design document ID and revision.
.IP \(bu 2
\fBtotal_rows\fP (\fInumber\fP) \-\- Number of design documents in the database. Note
that this is not the number of rows returned in the actual query.
.IP \(bu 2
\fBupdate_seq\fP (\fInumber\fP) \-\- Current update sequence for the database
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /db/_design_docs HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Sat, 23 Dec 2017 16:22:56 GMT
ETag: "1W2DJUZFZSZD9K78UFA3GZWB4"
Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked

{
    "offset": 0,
    "rows": [
        {
            "id": "_design/ddoc01",
            "key": "_design/ddoc01",
            "value": {
                "rev": "1\-7407569d54af5bc94c266e70cbf8a180"
            }
        },
        {
            "id": "_design/ddoc02",
            "key": "_design/ddoc02",
            "value": {
                "rev": "1\-d942f0ce01647aa0f46518b213b5628e"
            }
        },
        {
            "id": "_design/ddoc03",
            "key": "_design/ddoc03",
            "value": {
                "rev": "1\-721fead6e6c8d811a225d5a62d08dfd0"
            }
        },
        {
            "id": "_design/ddoc04",
            "key": "_design/ddoc04",
            "value": {
                "rev": "1\-32c76b46ca61351c75a84fbcbceece2f"
            }
        },
        {
            "id": "_design/ddoc05",
            "key": "_design/ddoc05",
            "value": {
                "rev": "1\-af856babf9cf746b48ae999645f9541e"
            }
        }
    ],
    "total_rows": 5
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B POST /{db}/_design_docs
The \fBPOST\fP to \fB_design_docs\fP allows to specify multiple keys to be
selected from the database. This enables you to request multiple
design documents in a single request, in place of multiple
\fBGET /{db}/{docid}\fP requests.
.sp
The request body should contain a list of the keys to be returned as an
array to a \fBkeys\fP object. For example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db/_all_docs HTTP/1.1
Accept: application/json
Content\-Length: 70
Content\-Type: application/json
Host: localhost:5984

{
    "keys" : [
        "_design/ddoc02",
        "_design/ddoc05"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The returned JSON is the all documents structure, but with only the
selected keys in the output:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "total_rows" : 5,
    "rows" : [
        {
            "value" : {
                "rev" : "1\-d942f0ce01647aa0f46518b213b5628e"
            },
            "id" : "_design/ddoc02",
            "key" : "_design/ddoc02"
        },
        {
            "value" : {
                "rev" : "1\-af856babf9cf746b48ae999645f9541e"
            },
            "id" : "_design/ddoc05",
            "key" : "_design/ddoc05"
        }
    ],
    "offset" : 0
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Sending multiple queries to a database
.sp
New in version 2.2.

.INDENT 0.0
.TP
.B POST /{db}/_all_docs/queries
Executes multiple specified built\-in view queries of all documents in this
database. This enables you to request multiple queries in a single
request, in place of multiple \fBPOST /{db}/_all_docs\fP requests.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.UNINDENT
.TP
.B Request JSON Object
.INDENT 7.0
.IP \(bu 2
\fBqueries\fP \-\- An array of query objects with fields for the
parameters of each individual view query to be executed. The field names
and their meaning are the same as the query parameters of a
regular \fI_all_docs request\fP\&.
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.IP \(bu 2
\fI\%ETag\fP \-\- Response signature
.IP \(bu 2
\fI\%Transfer\-Encoding\fP \-\- \fBchunked\fP
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBresults\fP (\fIarray\fP) \-\- An array of result objects \- one for each query. Each
result object contains the same fields as the response to a regular
\fI_all_docs request\fP\&.
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid request
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Read permission required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Specified database is missing
.IP \(bu 2
\fI\%500 Internal Server Error\fP \-\- Query execution error
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db/_all_docs/queries HTTP/1.1
Content\-Type: application/json
Accept: application/json
Host: localhost:5984

{
    "queries": [
        {
            "keys": [
                "meatballs",
                "spaghetti"
            ]
        },
        {
            "limit": 3,
            "skip": 2
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Wed, 20 Dec 2017 11:17:07 GMT
ETag: "1H8RGBCK3ABY6ACDM7ZSC30QK"
Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked

{
    "results" : [
        {
            "rows": [
                {
                    "id": "SpaghettiWithMeatballs",
                    "key": "meatballs",
                    "value": 1
                },
                {
                    "id": "SpaghettiWithMeatballs",
                    "key": "spaghetti",
                    "value": 1
                },
                {
                    "id": "SpaghettiWithMeatballs",
                    "key": "tomato sauce",
                    "value": 1
                }
            ],
            "total_rows": 3
        },
        {
            "offset" : 2,
            "rows" : [
                {
                    "id" : "Adukiandorangecasserole\-microwave",
                    "key" : "Aduki and orange casserole \- microwave",
                    "value" : [
                        null,
                        "Aduki and orange casserole \- microwave"
                    ]
                },
                {
                    "id" : "Aioli\-garlicmayonnaise",
                    "key" : "Aioli \- garlic mayonnaise",
                    "value" : [
                        null,
                        "Aioli \- garlic mayonnaise"
                    ]
                },
                {
                    "id" : "Alabamapeanutchicken",
                    "key" : "Alabama peanut chicken",
                    "value" : [
                        null,
                        "Alabama peanut chicken"
                    ]
                }
            ],
            "total_rows" : 2667
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The multiple queries are also supported in /db/_local_docs/queries and
/db/_design_docs/queries (similar to /db/_all_docs/queries).
.UNINDENT
.UNINDENT
.SS \fB/db/_bulk_get\fP
.INDENT 0.0
.TP
.B POST /{db}/_bulk_get
This method can be called to query several documents in bulk. It is well
suited for fetching a specific revision of documents, as replicators do for
example, or for getting revision history.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBrevs\fP (\fIboolean\fP) \-\- Give the revisions history
.UNINDENT
.TP
.B Request JSON Object
.INDENT 7.0
.IP \(bu 2
\fBdocs\fP (\fIarray\fP) \-\- List of document objects, with \fBid\fP, and optionnaly
\fBrev\fP and \fBatts_since\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBresults\fP (\fIobject\fP) \-\- the documents, with the additionnal \fB_revisions\fP
property that lists the parent revisions if \fBrevs=true\fP
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- The request provided invalid JSON data or invalid query parameter
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Read permission required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Invalid database name
.IP \(bu 2
\fI\%415 Unsupported Media Type\fP \-\- Bad \fI\%Content\-Type\fP value
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db/_bulk_get HTTP/1.1
Accept: application/json
Content\-Type:application/json
Host: localhost:5984

{
    "docs": [
        {
            "id": "foo"
            "rev": "4\-753875d51501a6b1883a9d62b4d33f91",
        },
        {
            "id": "foo"
            "rev": "1\-4a7e4ae49c4366eaed8edeaea8f784ad",
        },
        {
            "id": "bar",
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Mon, 19 Mar 2018 15:27:34 GMT
Server: CouchDB (Erlang/OTP)

{
  "results": [
    {
      "id": "foo",
      "docs": [
        {
          "ok": {
            "_id": "bbb",
            "_rev": "4\-753875d51501a6b1883a9d62b4d33f91",
            "value": "this is foo",
            "_revisions": {
              "start": 4,
              "ids": [
                "753875d51501a6b1883a9d62b4d33f91",
                "efc54218773c6acd910e2e97fea2a608",
                "2ee767305024673cfb3f5af037cd2729",
                "4a7e4ae49c4366eaed8edeaea8f784ad"
              ]
            }
          }
        }
      ]
    },
    {
      "id": "foo",
      "docs": [
        {
          "ok": {
            "_id": "bbb",
            "_rev": "1\-4a7e4ae49c4366eaed8edeaea8f784ad",
            "value": "this is the first revision of foo",
            "_revisions": {
              "start": 1,
              "ids": [
                "4a7e4ae49c4366eaed8edeaea8f784ad"
              ]
            }
          }
        }
      ]
    },
    {
      "id": "bar",
      "docs": [
        {
          "ok": {
            "_id": "bar",
            "_rev": "2\-9b71d36dfdd9b4815388eb91cc8fb61d",
            "baz": true,
            "_revisions": {
              "start": 2,
              "ids": [
                "9b71d36dfdd9b4815388eb91cc8fb61d",
                "309651b95df56d52658650fb64257b97"
              ]
            }
          }
        }
      ]
    }
  ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_bulk_docs\fP
.INDENT 0.0
.TP
.B POST /{db}/_bulk_docs
The bulk document API allows you to create and update multiple documents
at the same time within a single request. The basic operation is similar
to creating or updating a single document, except that you batch the
document structure and information.
.sp
When creating new documents the document ID (\fB_id\fP) is optional.
.sp
For updating existing documents, you must provide the document ID, revision
information (\fB_rev\fP), and new document values.
.sp
In case of batch deleting documents all fields as document ID, revision
information and deletion status (\fB_deleted\fP) are required.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.IP \(bu 2
\fBX\-Couch\-Full\-Commit\fP \-\- Overrides server\(aqs
\fBcommit policy\fP\&. Possible values
are: \fBfalse\fP and \fBtrue\fP\&. \fIOptional\fP
.UNINDENT
.TP
.B Request JSON Object
.INDENT 7.0
.IP \(bu 2
\fBdocs\fP (\fIarray\fP) \-\- List of documents objects
.IP \(bu 2
\fBnew_edits\fP (\fIboolean\fP) \-\- If \fBfalse\fP, prevents the database from
assigning them new revision IDs. Default is \fBtrue\fP\&. \fIOptional\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Array of Objects
.INDENT 7.0
.IP \(bu 2
\fBid\fP (\fIstring\fP) \-\- Document ID
.IP \(bu 2
\fBrev\fP (\fIstring\fP) \-\- New document revision token. Available
if document has saved without errors. \fIOptional\fP
.IP \(bu 2
\fBerror\fP (\fIstring\fP) \-\- Error type. \fIOptional\fP
.IP \(bu 2
\fBreason\fP (\fIstring\fP) \-\- Error reason. \fIOptional\fP
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%201 Created\fP \-\- Document(s) have been created or updated
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- The request provided invalid JSON data
.IP \(bu 2
\fI\%417 Expectation Failed\fP \-\- Occurs when at least one document was rejected by a
\fIvalidation function\fP
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db/_bulk_docs HTTP/1.1
Accept: application/json
Content\-Length: 109
Content\-Type:application/json
Host: localhost:5984

{
    "docs": [
        {
            "_id": "FishStew"
        },
        {
            "_id": "LambStew",
            "_rev": "2\-0786321986194c92dd3b57dfbfc741ce",
            "_deleted": true
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 144
Content\-Type: application/json
Date: Mon, 12 Aug 2013 00:15:05 GMT
Server: CouchDB (Erlang/OTP)

[
    {
        "ok": true,
        "id": "FishStew",
        "rev":" 1\-967a00dff5e02add41819138abb3284d"
    },
    {
        "ok": true,
        "id": "LambStew",
        "rev": "3\-f9c62b2169d0999103e9f41949090807"
    }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Inserting Documents in Bulk
.sp
Each time a document is stored or updated in CouchDB, the internal B\-tree
is updated. Bulk insertion provides efficiency gains in both storage space,
and time, by consolidating many of the updates to intermediate B\-tree nodes.
.sp
It is not intended as a way to perform \fBACID\fP\-like transactions in CouchDB,
the only transaction boundary within CouchDB is a single update to a single
database. The constraints are detailed in \fIapi/db/bulk_docs/semantics\fP\&.
.sp
To insert documents in bulk into a database you need to supply a JSON
structure with the array of documents that you want to add to the database.
You can either include a document ID, or allow the document ID to be
automatically generated.
.sp
For example, the following update inserts three new documents, two with the
supplied document IDs, and one which will have a document ID generated:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST /source/_bulk_docs HTTP/1.1
Accept: application/json
Content\-Length: 323
Content\-Type: application/json
Host: localhost:5984

{
    "docs": [
        {
            "_id": "FishStew",
            "servings": 4,
            "subtitle": "Delicious with freshly baked bread",
            "title": "FishStew"
        },
        {
            "_id": "LambStew",
            "servings": 6,
            "subtitle": "Serve with a whole meal scone topping",
            "title": "LambStew"
        },
        {
            "servings": 8,
            "subtitle": "Hand\-made dumplings make a great accompaniment",
            "title": "BeefStew"
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The return type from a bulk insertion will be \fI\%201 Created\fP,
with the content of the returned structure indicating specific success
or otherwise messages on a per\-document basis.
.sp
The return structure from the example above contains a list of the
documents created, here with the combination and their revision IDs:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 215
Content\-Type: application/json
Date: Sat, 26 Oct 2013 00:10:39 GMT
Server: CouchDB (Erlang OTP)

[
    {
        "id": "FishStew",
        "ok": true,
        "rev": "1\-6a466d5dfda05e613ba97bd737829d67"
    },
    {
        "id": "LambStew",
        "ok": true,
        "rev": "1\-648f1b989d52b8e43f05aa877092cc7c"
    },
    {
        "id": "00a271787f89c0ef2e10e88a0c0003f0",
        "ok": true,
        "rev": "1\-e4602845fc4c99674f50b1d5a804fdfa"
    }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For details of the semantic content and structure of the returned JSON see
\fIapi/db/bulk_docs/semantics\fP\&. Conflicts and validation errors when
updating documents in bulk must be handled separately; see
\fIapi/db/bulk_docs/validation\fP\&.
.SS Updating Documents in Bulk
.sp
The bulk document update procedure is similar to the insertion
procedure, except that you must specify the document ID and current
revision for every document in the bulk update JSON string.
.sp
For example, you could send the following request:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST /recipes/_bulk_docs HTTP/1.1
Accept: application/json
Content\-Length: 464
Content\-Type: application/json
Host: localhost:5984

{
    "docs": [
        {
            "_id": "FishStew",
            "_rev": "1\-6a466d5dfda05e613ba97bd737829d67",
            "servings": 4,
            "subtitle": "Delicious with freshly baked bread",
            "title": "FishStew"
        },
        {
            "_id": "LambStew",
            "_rev": "1\-648f1b989d52b8e43f05aa877092cc7c",
            "servings": 6,
            "subtitle": "Serve with a whole meal scone topping",
            "title": "LambStew"
        },
        {
            "_id": "BeefStew",
            "_rev": "1\-e4602845fc4c99674f50b1d5a804fdfa",
            "servings": 8,
            "subtitle": "Hand\-made dumplings make a great accompaniment",
            "title": "BeefStew"
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The return structure is the JSON of the updated documents, with the new
revision and ID information:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 215
Content\-Type: application/json
Date: Sat, 26 Oct 2013 00:10:39 GMT
Server: CouchDB (Erlang OTP)

[
    {
        "id": "FishStew",
        "ok": true,
        "rev": "2\-2bff94179917f1dec7cd7f0209066fb8"
    },
    {
        "id": "LambStew",
        "ok": true,
        "rev": "2\-6a7aae7ac481aa98a2042718d09843c4"
    },
    {
        "id": "BeefStew",
        "ok": true,
        "rev": "2\-9801936a42f06a16f16c30027980d96f"
    }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can optionally delete documents during a bulk update by adding the
\fB_deleted\fP field with a value of \fBtrue\fP to each document ID/revision
combination within the submitted JSON structure.
.sp
The return type from a bulk insertion will be \fI\%201 Created\fP, with the
content of the returned structure indicating specific success or otherwise
messages on a per\-document basis.
.sp
The content and structure of the returned JSON will depend on the transaction
semantics being used for the bulk update; see \fIapi/db/bulk_docs/semantics\fP
for more information. Conflicts and validation errors when updating documents
in bulk must be handled separately; see \fIapi/db/bulk_docs/validation\fP\&.
.SS Bulk Documents Transaction Semantics
.sp
Bulk document operations are \fBnon\-atomic\fP\&. This means that CouchDB does not
guarantee that any individual document included in the bulk update (or insert)
will be saved when you send the request. The response will contain the list of
documents successfully inserted or updated during the process. In the event of
a crash, some of the documents may have been successfully saved, while others
lost.
.sp
The response structure will indicate whether the document was updated by
supplying the new \fB_rev\fP parameter indicating a new document revision was
created. If the update failed, you will get an \fBerror\fP of type \fBconflict\fP\&.
For example:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    {
        "id" : "FishStew",
        "error" : "conflict",
        "reason" : "Document update conflict."
    },
    {
        "id" : "LambStew",
        "error" : "conflict",
        "reason" : "Document update conflict."
    },
    {
        "id" : "BeefStew",
        "error" : "conflict",
        "reason" : "Document update conflict."
    }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
In this case no new revision has been created and you will need to submit the
document update, with the correct revision tag, to update the document.
.sp
Replication of documents is independent of the type of insert or update.
The documents and revisions created during a bulk insert or update are
replicated in the same way as any other document.
.SS Bulk Document Validation and Conflict Errors
.sp
The JSON returned by the \fB_bulk_docs\fP operation consists of an array
of JSON structures, one for each document in the original submission.
The returned JSON structure should be examined to ensure that all of the
documents submitted in the original request were successfully added to
the database.
.sp
When a document (or document revision) is not correctly committed to the
database because of an error, you should check the \fBerror\fP field to
determine error type and course of action. Errors will be one of the
following type:
.INDENT 0.0
.IP \(bu 2
\fBconflict\fP
.sp
The document as submitted is in conflict. The new revision will not have been
created and you will need to re\-submit the document to the database.
.sp
Conflict resolution of documents added using the bulk docs interface
is identical to the resolution procedures used when resolving
conflict errors during replication.
.IP \(bu 2
\fBforbidden\fP
.sp
Entries with this error type indicate that the validation routine
applied to the document during submission has returned an error.
.sp
For example, if your \fIvalidation routine\fP includes
the following:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
throw({forbidden: \(aqinvalid recipe ingredient\(aq});
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The error response returned will be:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 417 Expectation Failed
Cache\-Control: must\-revalidate
Content\-Length: 120
Content\-Type: application/json
Date: Sat, 26 Oct 2013 00:05:17 GMT
Server: CouchDB (Erlang OTP)

{
    "error": "forbidden",
    "id": "LambStew",
    "reason": "invalid recipe ingredient",
    "rev": "1\-34c318924a8f327223eed702ddfdc66d"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_find\fP
.INDENT 0.0
.TP
.B POST /{db}/_find
Find documents using a declarative JSON querying syntax.
Queries can use the built\-in \fI_all_docs\fP index or
custom indexes, specified using the \fI_index\fP
endpoint.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.UNINDENT
.TP
.B Request JSON Object
.INDENT 7.0
.IP \(bu 2
\fBselector\fP (\fIjson\fP) \-\- JSON object describing criteria used to select
documents. More information provided in the section on \fIselector
syntax\fP\&. \fIRequired\fP
.IP \(bu 2
\fBlimit\fP (\fInumber\fP) \-\- Maximum number of results returned. Default is \fB25\fP\&.
\fIOptional\fP
.IP \(bu 2
\fBskip\fP (\fInumber\fP) \-\- Skip the first \(aqn\(aq results, where \(aqn\(aq is the value
specified. \fIOptional\fP
.IP \(bu 2
\fBsort\fP (\fIjson\fP) \-\- JSON array following \fIsort syntax\fP\&.
\fIOptional\fP
.IP \(bu 2
\fBfields\fP (\fIarray\fP) \-\- JSON array specifying which fields of each object
should be returned. If it is omitted, the entire object is returned.
More information provided in the section on \fIfiltering fields\fP\&. \fIOptional\fP
.IP \(bu 2
\fBuse_index\fP (\fIstring|array\fP) \-\- Instruct a query to use a specific index.
Specified either as \fB"<design_document>"\fP or
\fB["<design_document>", "<index_name>"]\fP\&. \fIOptional\fP
.IP \(bu 2
\fBr\fP (\fInumber\fP) \-\- Read quorum needed for the result. This defaults to 1, in
which case the document found in the index is returned. If set to a
higher value, each document is read from at least that many replicas
before it is returned in the results. This is likely to take more time
than using only the document stored locally with the index. \fIOptional,
default: 1\fP
.IP \(bu 2
\fBbookmark\fP (\fIstring\fP) \-\- A string that enables you to specify which page of
results you require. Used for paging through result sets. Every query
returns an opaque string under the \fBbookmark\fP key that can then be
passed back in a query to get the next page of results. If any part of
the selector query changes between requests, the results
are undefined. \fIOptional, default: null\fP
.IP \(bu 2
\fBupdate\fP (\fIboolean\fP) \-\- Whether to update the index prior to returning the
result. Default is \fBtrue\fP\&. \fIOptional\fP
.IP \(bu 2
\fBstable\fP (\fIboolean\fP) \-\- Whether or not the view results should be returned
from a "stable" set of shards. \fIOptional\fP
.IP \(bu 2
\fBstale\fP (\fIstring\fP) \-\- Combination of \fBupdate=false\fP and \fBstable=true\fP
options. Possible options: \fB"ok"\fP, \fBfalse\fP (default). \fIOptional\fP
.IP \(bu 2
\fBexecution_stats\fP (\fIboolean\fP) \-\- Include
\fIexecution statistics\fP in the query response.
\fIOptional, default: \(ga\(gafalse\(ga\(ga\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.IP \(bu 2
\fI\%Transfer\-Encoding\fP \-\- \fBchunked\fP
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBdocs\fP (\fIobject\fP) \-\- Array of documents matching the search. In each matching
document, the fields specified in the \fBfields\fP part of the request
body are listed, along with their values.
.IP \(bu 2
\fBwarning\fP (\fIstring\fP) \-\- Execution warnings
.IP \(bu 2
\fBexecution_stats\fP (\fIobject\fP) \-\- Execution statistics
.IP \(bu 2
\fBbookmark\fP (\fIstring\fP) \-\- An opaque string used for paging. See the
\fBbookmark\fP field in the request (above) for usage details.
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid request
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Read permission required
.IP \(bu 2
\fI\%500 Internal Server Error\fP \-\- Query execution error
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The \fBlimit\fP and \fBskip\fP values are exactly as you would expect. While
\fBskip\fP exists, it is not intended to be used for paging. The reason is that
the \fBbookmark\fP feature is more efficient.
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.UNINDENT
.UNINDENT
.sp
Example request body for finding documents using an index:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST /movies/_find HTTP/1.1
Accept: application/json
Content\-Type: application/json
Content\-Length: 168
Host: localhost:5984

{
    "selector": {
        "year": {"$gt": 2010}
    },
    "fields": ["_id", "_rev", "year", "title"],
    "sort": [{"year": "asc"}],
    "limit": 2,
    "skip": 0,
    "execution_stats": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.UNINDENT
.UNINDENT
.sp
Example response when finding documents using an index:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Thu, 01 Sep 2016 15:41:53 GMT
Server: CouchDB (Erlang OTP)
Transfer\-Encoding: chunked

{
    "docs": [
        {
            "_id": "176694",
            "_rev": "1\-54f8e950cc338d2385d9b0cda2fd918e",
            "year": 2011,
            "title": "The Tragedy of Man"
        },
        {
            "_id": "780504",
            "_rev": "1\-5f14bab1a1e9ac3ebdf85905f47fb084",
            "year": 2011,
            "title": "Drive"
        }
    ],
    "execution_stats": {
        "total_keys_examined": 0,
        "total_docs_examined": 200,
        "total_quorum_docs_examined": 0,
        "results_returned": 2,
        "execution_time_ms": 5.52
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Selector Syntax
.sp
Selectors are expressed as a JSON object describing documents of interest.
Within this structure, you can apply conditional logic using specially named
fields.
.sp
Whilst selectors have some similarities with MongoDB query documents, these
arise from a similarity of purpose and do not necessarily extend to commonality
of function or result.
.SS Selector Basics
.sp
Elementary selector syntax requires you to specify one or more fields, and the
corresponding values required for those fields. This selector matches all
documents whose "director" field has the value "Lars von Trier".
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "director": "Lars von Trier"
}

A simple selector, inspecting specific fields
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
"selector": {
  "$text": "Bond"
},
"fields": [
  "title",
  "cast"
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can create more complex selector expressions by combining operators.
For best performance, it is best to combine \(aqcombination\(aq or
\(aqarray logical\(aq operators, such as \fB$regex\fP, with an equality
operators such as \fB$eq\fP, \fB$gt\fP, \fB$gte\fP, \fB$lt\fP, and \fB$lte\fP
(but not \fB$ne\fP). For more information about creating complex
selector expressions, see \fIcreating selector expressions\fP\&.
.SS Selector with 2 fields
.sp
This selector matches any document with a name field containing \fB"Paul"\fP,
and that also has a location field with the value \fB"Boston"\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "name": "Paul",
    "location": "Boston"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Subfields
.sp
A more complex selector enables you to specify the values for field of nested
objects, or subfields. For example, you might use a standard JSON structure for
specifying a field and subfield.
.sp
Example of a field and subfield selector, using a standard JSON structure:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "imdb": {
        "rating": 8
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
An abbreviated equivalent uses a dot notation to combine the field and subfield
names into a single name.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "imdb.rating": 8
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Operators
.sp
Operators are identified by the use of a dollar sign ($) prefix in the name
field.
.sp
There are two core types of operators in the selector syntax:
.INDENT 0.0
.IP \(bu 2
Combination operators
.IP \(bu 2
Condition operators
.UNINDENT
.sp
In general, combination operators are applied at the topmost level of selection.
They are used to combine conditions, or to create combinations of conditions,
into one selector.
.sp
Every explicit operator has the form:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"$operator": argument}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A selector without an explicit operator is considered to have an implicit
operator. The exact implicit operator is determined by the structure of the
selector expression.
.SS Implicit Operators
.sp
There are two implicit operators:
.INDENT 0.0
.IP \(bu 2
Equality
.IP \(bu 2
And
.UNINDENT
.sp
In a selector, any field containing a JSON value, but that has no operators in
it, is considered to be an equality condition. The implicit equality test
applies also for fields and subfields.
.sp
Any JSON object that is not the argument to a condition operator is an implicit
$and operator on each field.
.sp
In the below example, we use an operator to match any document, where the
\fB"year"\fP field has a value greater than \fB2010\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "year": {
        "$gt": 2010
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In this next example, there must be a field \fB"director"\fP in a matching
document, and the field must have a value exactly equal to \fB"Lars von Trier"\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "director": "Lars von Trier"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can also make the equality operator explicit.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "director": {
        "$eq": "Lars von Trier"
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the next example using subfields, the required field \fB"imdb"\fP in a matching
document must also have a subfield \fB"rating"\fP and the subfield must have a
value equal to \fB8\fP\&.
.sp
Example of implicit operator applied to a subfield test
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "imdb": {
        "rating": 8
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Again, you can make the equality operator explicit.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "imdb": {
        "rating": { "$eq": 8 }
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
An example of the \fB$eq\fP operator used with full text indexing
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "selector": {
    "year": {
      "$eq": 2001
    }
  },
  "sort": [
    "title:string"
  ],
  "fields": [
    "title"
  ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
An example of  the \fB$eq\fP operator used with database indexed on the field \fB"year"\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "selector": {
    "year": {
      "$eq": 2001
    }
  },
  "sort": [
    "year"
  ],
  "fields": [
    "year"
  ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In this example, the field \fB"director"\fP must be present and contain the value
\fB"Lars von Trier"\fP and the field \fB"year"\fP must exist and have the value
\fB2003\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "director": "Lars von Trier",
    "year": 2003
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can make both the \fB$and\fP operator and the equality operator explicit.
.INDENT 0.0
.INDENT 3.5
Example of using explicit \fB$and\fP and \fB$eq\fP operators
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "$and": [
        {
            "director": {
                "$eq": "Lars von Trier"
            }
        },
        {
            "year": {
                "$eq": 2003
            }
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Explicit Operators
.sp
All operators, apart from \(aqEquality\(aq and \(aqAnd\(aq, must be stated explicitly.
.SS Combination Operators
.sp
Combination operators are used to combine selectors. In addition to the common
boolean operators found in most programming languages, there are three
combination operators (\fB$all\fP, \fB$elemMatch\fP, and \fB$allMatch\fP) that help
you work with JSON arrays.
.sp
A combination operator takes a single argument. The argument is either another
selector, or an array of selectors.
.sp
The list of combination operators:
.TS
center;
|l|l|l|.
_
T{
Operator
T}	T{
Argument
T}	T{
Purpose
T}
_
T{
\fB$and\fP
T}	T{
Array
T}	T{
Matches if all the selectors in the array match.
T}
_
T{
\fB$or\fP
T}	T{
Array
T}	T{
Matches if any of the selectors in the array
match. All selectors must use the same index.
T}
_
T{
\fB$not\fP
T}	T{
Selector
T}	T{
Matches if the given selector does not match.
T}
_
T{
\fB$nor\fP
T}	T{
Array
T}	T{
Matches if none of the selectors in the array
match.
T}
_
T{
\fB$all\fP
T}	T{
Array
T}	T{
Matches an array value if it contains all the
elements of the argument array.
T}
_
T{
\fB$elemMatch\fP
T}	T{
Selector
T}	T{
Matches and returns all documents that contain an
array field with at least one element that
matches all the specified query criteria.
T}
_
T{
\fB$allMatch\fP
T}	T{
Selector
T}	T{
Matches and returns all documents that contain an
array field with all its elements matching all
the specified query criteria.
T}
_
.TE
.INDENT 0.0
.TP
.B \fBThe\fP \fB$and\fP \fBoperator\fP
\fB$and\fP operator used with full text indexing
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "selector": {
    "$and": [
      {
        "$text": "Schwarzenegger"
      },
      {
        "year": {
          "$in": [1984, 1991]
        }
      }
    ]
  },
  "fields": [
    "year",
    "title",
    "cast"
  ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fB$and\fP operator matches if all the selectors in the array match. Below is
an example using the primary index (\fB\(ga_all_docs\(ga\fP):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "$and": [
        {
            "_id": { "$gt": null }
        },
        {
            "year": {
                "$in": [2014, 2015]
            }
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBThe\fP \fB$or\fP \fBoperator\fP
.sp
The \fB$or\fP operator matches if any of the selectors in the array match. Below
is an example used with an index on the field \fB"year"\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "year": 1977,
    "$or": [
        { "director": "George Lucas" },
        { "director": "Steven Spielberg" }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBThe\fP \fB$not\fP \fBoperator\fP
.sp
The \fB$not\fP operator matches if the given selector does not match. Below is an
example used with an index on the field \fB"year"\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "year": {
        "$gte": 1900
    },
    "year": {
        "$lte": 1903
    },
    "$not": {
        "year": 1901
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBThe\fP \fB$nor\fP \fBoperator\fP
.sp
The \fB$nor\fP operator matches if the given selector does not match. Below is an
example used with an index on the field \fB"year"\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "year": {
        "$gte": 1900
    },
    "year": {
        "$lte": 1910
    },
    "$nor": [
        { "year": 1901 },
        { "year": 1905 },
        {  "year": 1907 }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBThe\fP \fB$all\fP \fBoperator\fP
.sp
The \fB$all\fP operator matches an array value if it contains all the elements of
the argument array. Below is an example used with the primary index
(\fB_all_docs\fP):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": {
        "$gt": null
    },
    "genre": {
        "$all": ["Comedy","Short"]
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBThe\fP \fB$elemMatch\fP \fBoperator\fP
.sp
The \fB$elemMatch\fP operator matches and returns all documents that contain an
array field with at least one element matching the supplied query criteria.
Below is an example used with the primary index (\fB_all_docs\fP):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": { "$gt": null },
    "genre": {
        "$elemMatch": {
            "$eq": "Horror"
        }
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBThe\fP \fB$allMatch\fP \fBoperator\fP
.sp
The \fB$allMatch\fP operator matches and returns all documents that contain an
array field with all its elements matching the supplied query criteria. Below
is an example used with the primary index (\fB_all_docs\fP):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "_id": { "$gt": null },
    "genre": {
        "$allMatch": {
            "$eq": "Horror"
        }
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Condition Operators
.sp
Condition operators are specific to a field, and are used to evaluate the value
stored in that field. For instance, the basic \fI$eq\fP operator matches when the
specified field contains a value that is equal to the supplied argument.
.sp
The basic equality and inequality operators common to most programming languages
are supported. In addition, some \(aqmeta\(aq condition operators are available. Some
condition operators accept any valid JSON content as the argument.
Other condition operators require the argument to be in a specific JSON format.
.TS
center;
|l|l|l|l|.
_
T{
Operator type
T}	T{
Operator
T}	T{
Argument
T}	T{
Purpose
T}
_
T{
(In)equality
T}	T{
\fB$lt\fP
T}	T{
Any JSON
T}	T{
The field is less than the
argument
T}
_
T{
T}	T{
\fB$lte\fP
T}	T{
Any JSON
T}	T{
The field is less than or equal to
the argument.
T}
_
T{
T}	T{
\fB$eq\fP
T}	T{
Any JSON
T}	T{
The field is equal to the argument
T}
_
T{
T}	T{
\fB$ne\fP
T}	T{
Any JSON
T}	T{
The field is not equal to the
argument.
T}
_
T{
T}	T{
\fB$gte\fP
T}	T{
Any JSON
T}	T{
The field is greater than or equal
to the argument.
T}
_
T{
T}	T{
\fB$gt\fP
T}	T{
Any JSON
T}	T{
The field is greater than the
to the argument.
T}
_
T{
Object
T}	T{
\fB$exists\fP
T}	T{
Boolean
T}	T{
Check whether the field exists or
not, regardless of its value.
T}
_
T{
T}	T{
\fB$type\fP
T}	T{
String
T}	T{
Check the document field\(aqs type.
Valid values are \fB"null"\fP,
\fB"boolean"\fP, \fB"number"\fP,
\fB"string"\fP, \fB"array"\fP, and
\fB"object"\fP\&.
T}
_
T{
Array
T}	T{
\fB$in\fP
T}	T{
Array of
JSON values
T}	T{
The document field must exist in
the list provided.
T}
_
T{
T}	T{
\fB$nin\fP
T}	T{
Array of
JSON values
T}	T{
The document field not must exist
in the list provided.
T}
_
T{
T}	T{
\fB$size\fP
T}	T{
Integer
T}	T{
Special condition to match the
length of an array field in a
document. Non\-array fields cannot
match this condition.
T}
_
T{
Miscellaneous
T}	T{
\fB$mod\fP
T}	T{
[Divisor,
Remainder]
T}	T{
Divisor and Remainder are both
positive or negative integers.
Non\-integer values result in a
404. Matches documents where
\fBfield % Divisor == Remainder\fP
is true, and only when the
document field is an integer.
T}
_
T{
T}	T{
\fB$regex\fP
T}	T{
String
T}	T{
A regular expression pattern to
match against the document field.
Only matches when the field is a
string value and matches the
supplied regular expression. The
matching algorithms are based on
the Perl Compatible Regular
Expression (PCRE) library. For
more information about what is
implemented, see the see the
\fI\%Erlang Regular Expression\fP
T}
_
.TE
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Regular expressions do not work with indexes, so they should not be used to
filter large data sets. They can, however, be used to restrict a
\fIpartial index\fP\&.
.UNINDENT
.UNINDENT
.SS Creating Selector Expressions
.sp
We have seen examples of combining selector expressions, such as \fIusing
explicit $and and $eq operators\fP\&.
.sp
In general, whenever you have an operator that takes an argument, that argument
can itself be another operator with arguments of its own. This enables us to
build up more complex selector expressions.
.sp
However, only equality operators such as \fB$eq\fP, \fB$gt\fP, \fB$gte\fP, \fB$lt\fP,
and \fB$lte\fP (but not \fB$ne\fP) can be used as the basis of a query. You should
include at least one of these in a selector.
.sp
For example, if you try to perform a query that attempts to match all documents
that have a field called \fIafieldname\fP containing a value that begins with the
letter \fIA\fP, this will trigger a warning because no index could be used and
the database performs a full scan of the primary index:
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST /movies/_find HTTP/1.1
Accept: application/json
Content\-Type: application/json
Content\-Length: 112
Host: localhost:5984

{
    "selector": {
        "afieldname": {"$regex": "^A"}
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Thu, 01 Sep 2016 17:25:51 GMT
Server: CouchDB (Erlang OTP)
Transfer\-Encoding: chunked

{
    "warning":"no matching index found, create an index to optimize
    query time",
    "docs":[
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
It\(aqs always recommended that you create an appropriate index when deploying
in production.
.UNINDENT
.UNINDENT
.sp
Most selector expressions work exactly as you would expect for the given
operator.
.SS Sort Syntax
.sp
The \fBsort\fP field contains a list of field name and direction pairs, expressed
as a basic array. The first field name and direction pair is the topmost level
of sort. The second pair, if provided, is the next level of sort.
.sp
The field can be any field, using dotted notation if desired for sub\-document
fields.
.sp
The direction value is \fB"asc"\fP for ascending, and \fB"desc"\fP for descending.
If you omit the direction value, the default \fB"asc"\fP is used.
.sp
Example, sorting by 2 fields:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[{"fieldName1": "desc"}, {"fieldName2": "desc" }]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Example, sorting by 2 fields, assuming default direction for both :
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
["fieldNameA", "fieldNameB"]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
A typical requirement is to search for some content using a selector, then to
sort the results according to the specified field, in the required direction.
.sp
To use sorting, ensure that:
.INDENT 0.0
.IP \(bu 2
At least one of the sort fields is included in the selector.
.IP \(bu 2
.INDENT 2.0
.TP
.B There is an index already defined, with all the sort fields in the same
order.
.UNINDENT
.IP \(bu 2
Each object in the sort array has a single key.
.UNINDENT
.sp
If an object in the sort array does not have a single key, the resulting sort
order is implementation specific and might change.
.sp
Find does not support multiple fields with different sort orders, so the
directions must be either all ascending or all descending.
.sp
For field names in text search sorts, it is sometimes necessary for a
field type to be specified, for example:
.sp
\fB{ "<fieldname>:string": "asc"}\fP
.sp
If possible, an attempt is made to discover the field type based on the
selector. In ambiguous cases the field type must be provided explicitly.
.sp
The sorting order is undefined when fields contain different data types.
This is an important difference between text and view indexes. Sorting
behavior for fields with different data types might change in future
versions.
.INDENT 0.0
.INDENT 3.5
A simple query, using sorting:
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "selector": {"Actor_name": "Robert De Niro"},
    "sort": [{"Actor_name": "asc"}, {"Movie_runtime": "asc"}]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Filtering Fields
.sp
It is possible to specify exactly which fields are returned for a document when
selecting from a database. The two advantages are:
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B Your results are limited to only those parts of the document that are
required for your application.
.UNINDENT
.IP \(bu 2
A reduction in the size of the response.
.UNINDENT
.sp
The fields returned are specified as an array.
.sp
Only the specified filter fields are included, in the response. There is no
automatic inclusion of the \fB_id\fP or other metadata fields when a field list
is included.
.sp
Example of selective retrieval of fields from matching documents:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "selector": { "Actor_name": "Robert De Niro" },
    "fields": ["Actor_name", "Movie_year", "_id", "_rev"]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Pagination
.sp
Mango queries support pagination via the bookmark field. Every \fI_find\fP
response contains a bookmark \- a token that CouchDB uses to determine
where to resume from when subsequent queries are made. To get the next
set of query results, add the bookmark that was received in the previous
response to your next request. Remember to keep the \fIselector\fP the same,
otherwise you will receive unexpected results. To paginate backwards,
you can use a previous bookmark to return the previous set of results.
.sp
Note that the presence of a bookmark doesn\(aqt guarantee that there are
more results. You can to test whether you have reached the end of the
result set by comparing the number of results returned with the page
size requested \- if results returned < \fIlimit\fP, there are no more.
.SS Execution Statistics
.sp
Find can return basic execution statistics for a specific request. Combined with
the \fI_explain\fP endpoint, this should provide some
insight as to whether indexes are being used effectively.
.sp
The execution statistics currently include:
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
\fBtotal_keys_examined\fP
T}	T{
Number of index keys examined.
Currently always 0.
T}
_
T{
\fBtotal_docs_examined\fP
T}	T{
Number of documents fetched from the
database / index, equivalent to using
\fBinclude_docs=true\fP in a view.
These may then be filtered in\-memory to
further narrow down the result set based
on the selector.
T}
_
T{
\fBtotal_quorum_docs_examined\fP
T}	T{
Number of documents fetched from the
database using an out\-of\-band document
fetch. This is only non\-zero when read
quorum > 1 is specified in the query
parameters.
T}
_
T{
\fBresults_returned\fP
T}	T{
Number of results returned from the query.
Ideally this should not be significantly
lower than the total documents / keys
examined.
T}
_
T{
\fBexecution_time_ms\fP
T}	T{
Total execution time in milliseconds as
measured by the database.
T}
_
.TE
.SS \fB/db/_index\fP
.sp
Mango is a declarative JSON querying language for CouchDB databases.
Mango wraps several index types, starting with the Primary Index
out\-of\-the\-box. Mango indexes, with index type \fIjson\fP, are
built using MapReduce Views.
.INDENT 0.0
.TP
.B POST /{db}/_index
Create a new index on a database
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBindex\fP (\fIjson\fP) \-\- JSON object describing the index to create.
.IP \(bu 2
\fBddoc\fP (\fIstring\fP) \-\- Name of the design document in which the index will be
created. By default, each index will be created in its own design
document.
Indexes can be grouped into design documents for efficiency. However, a
change to one index in a design document will invalidate all other
indexes in the same document (similar to views). \fIOptional\fP
.IP \(bu 2
\fBname\fP (\fIstring\fP) \-\- Name of the index. If no name is provided, a name will
be generated automatically. \fIOptional\fP
.IP \(bu 2
\fBtype\fP (\fIstring\fP) \-\- Can be \fB"json"\fP or \fB"text"\fP\&. Defaults to json.
Geospatial indexes will be supported in the future. \fIOptional\fP
Text indexes are supported via a third party library \fIOptional\fP
.IP \(bu 2
\fBpartial_filter_selector\fP (\fIjson\fP) \-\- A \fIselector\fP
to apply to documents at indexing time, creating a
\fIpartial index\fP\&. \fIOptional\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.IP \(bu 2
\fI\%Transfer\-Encoding\fP \-\- \fBchunked\fP
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBresult\fP (\fIstring\fP) \-\- Flag to show whether the index was created or one
already exists. Can be \fI"created"\fP or \fI"exists"\fP\&.
.IP \(bu 2
\fBid\fP (\fIstring\fP) \-\- Id of the design document the index was created in.
.IP \(bu 2
\fBname\fP (\fIstring\fP) \-\- Name of the index created.
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Index created successfully or already exists
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid request
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Admin permission required
.IP \(bu 2
\fI\%500 Internal Server Error\fP \-\- Execution error
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBIndex object format for JSON type indexes\fP
.sp
The index object is a JSON array of field names following the \fIsort
syntax\fP\&. Nested fields are also allowed, e.g. \fI"person.name"\fP\&.
.sp
Example of creating a new index for the field called \fBfoo\fP:
.INDENT 0.0
.INDENT 3.5
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db/_index HTTP/1.1
Content\-Type: application/json
Content\-Length: 116
Host: localhost:5984

{
    "index": {
        "fields": ["foo"]
    },
    "name" : "foo\-index",
    "type" : "json"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The returned JSON confirms the index has been created:
.INDENT 0.0
.INDENT 3.5
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 96
Content\-Type: application/json
Date: Thu, 01 Sep 2016 18:17:48 GMT
Server: CouchDB (Erlang OTP/18)

{
    "result":"created",
    "id":"_design/a5f4711fc9448864a13c81dc71e660b524d7410c",
    "name":"foo\-index"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Example index creation using all available query parameters
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "selector": {
    "year": {
      "$gt": 2010
    }
  },
  "fields": ["_id", "_rev", "year", "title"],
  "sort": [{"year": "asc"}],
  "limit": 10,
  "skip": 0
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
By default, a JSON index will include all documents that have the indexed fields
present, including those which have null values.
.SS Partial Indexes
.sp
Partial indexes allow documents to be filtered at indexing time, potentially
offering significant performance improvements for query selectors that don\(aqt
map cleanly to a range query on an index.
.sp
Let\(aqs look at an example query:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "selector": {
    "status": {
      "$ne": "archived"
    },
    "type": "user"
  }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Without a partial index, this requires a full index scan to find all the
documents of \fB"type":"user"\fP that do not have a status of \fB"archived"\fP\&.
This is because a normal index can only be used to match contiguous rows,
and the \fB"$ne"\fP operator cannot guarantee that.
.sp
To improve response times, we can create an index which excludes documents
where  \fB"status": { "$ne": "archived" }\fP at index time using the
\fB"partial_filter_selector"\fP field:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db/_index HTTP/1.1
Content\-Type: application/json
Content\-Length: 144
Host: localhost:5984

{
  "index": {
    "partial_filter_selector": {
      "status": {
        "$ne": "archived"
      }
    },
    "fields": ["type"]
  },
  "ddoc" : "type\-not\-archived",
  "type" : "json"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Partial indexes are not currently used by the query planner unless specified
by a \fB"use_index"\fP field, so we need to modify the original query:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "selector": {
    "status": {
      "$ne": "archived"
    },
    "type": "user"
  },
  "use_index": "type\-not\-archived"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Technically, we don\(aqt need to include the filter on the \fB"status"\fP field
in the query selector \- the partial index ensures this is always true \-
but including it makes the intent of the selector clearer and will make
it easier to take advantage of future improvements to query planning
(e.g. automatic selection of partial indexes).
.INDENT 0.0
.TP
.B GET /{db}/_index
When you make a \fBGET\fP request to \fB/db/_index\fP, you get a list of all
indexes in the database. In addition to the information available through
this API, indexes are also stored in design documents <index\-functions>.
Design documents are regular documents that have an ID starting with
\fB_design/\fP\&. Design documents can be retrieved and modified in the same
way as any other document, although this is not necessary when using Mango.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name.
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.IP \(bu 2
\fI\%Transfer\-Encoding\fP \-\- \fBchunked\fP
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBtotal_rows\fP (\fInumber\fP) \-\- Number of indexes
.IP \(bu 2
\fBindexes\fP (\fIobject\fP) \-\- Array of index definitions
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Success
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid request
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Read permission required
.IP \(bu 2
\fI\%500 Internal Server Error\fP \-\- Execution error
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Format of index objects:
.INDENT 7.0
.IP \(bu 2
.INDENT 2.0
.TP
.B \fBddoc\fP: ID of the design document the index belongs to. This ID
can be used to retrieve the design document containing the index,
by making a \fBGET\fP request to \fB/db/ddoc\fP, where \fBddoc\fP is the
value of this field.
.UNINDENT
.IP \(bu 2
\fBname\fP: Name of the index.
.IP \(bu 2
.INDENT 2.0
.TP
.B \fBtype\fP: Type of the index. Currently "json" is the only
supported type.
.UNINDENT
.IP \(bu 2
.INDENT 2.0
.TP
.B \fBdef\fP: Definition of the index, containing the indexed fields
and the sort order: ascending or descending.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /db/_index HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 238
Content\-Type: application/json
Date: Thu, 01 Sep 2016 18:17:48 GMT
Server: CouchDB (Erlang OTP/18)

{
    "total_rows": 2,
    "indexes": [
    {
        "ddoc": null,
        "name": "_all_docs",
        "type": "special",
        "def": {
            "fields": [
                {
                    "_id": "asc"
                }
            ]
        }
    },
    {
        "ddoc": "_design/a5f4711fc9448864a13c81dc71e660b524d7410c",
        "name": "foo\-index",
        "type": "json",
        "def": {
            "fields": [
                {
                    "foo": "asc"
                }
            ]
        }
    }
  ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B DELETE /{db}/_index/{designdoc}/json/{name}
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name.
.IP \(bu 2
\fBdesigndoc\fP \-\- Design document name.
.IP \(bu 2
\fBname\fP \-\- Index name.
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBok\fP (\fIstring\fP) \-\- \fI"true"\fP if successful.
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Success
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid request
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Writer permission required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Index not found
.IP \(bu 2
\fI\%500 Internal Server Error\fP \-\- Execution error
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
DELETE /db/_index/_design/a5f4711fc9448864a13c81dc71e660b524d7410c/json/foo\-index HTTP/1.1
Accept: */*
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 12
Content\-Type: application/json
Date: Thu, 01 Sep 2016 19:21:40 GMT
Server: CouchDB (Erlang OTP/18)

{
    "ok": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_explain\fP
.INDENT 0.0
.TP
.B POST /{db}/_explain
Shows which index is being used by the query.  Parameters are the same as
\fI_find\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.IP \(bu 2
\fI\%Transfer\-Encoding\fP \-\- \fBchunked\fP
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBdbname\fP (\fIstring\fP) \-\- Name of database
.IP \(bu 2
\fBindex\fP (\fIobject\fP) \-\- Index used to fulfill the query
.IP \(bu 2
\fBselector\fP (\fIobject\fP) \-\- Query selector used
.IP \(bu 2
\fBopts\fP (\fIobject\fP) \-\- Query options used
.IP \(bu 2
\fBlimit\fP (\fInumber\fP) \-\- Limit parameter used
.IP \(bu 2
\fBskip\fP (\fInumber\fP) \-\- Skip parameter used
.IP \(bu 2
\fBfields\fP (\fIarray\fP) \-\- Fields to be returned by the query
.IP \(bu 2
\fBrange\fP (\fIobject\fP) \-\- Range parameters passed to the underlying view
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid request
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Read permission required
.IP \(bu 2
\fI\%500 Internal Server Error\fP \-\- Execution error
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /movies/_explain HTTP/1.1
Accept: application/json
Content\-Type: application/json
Content\-Length: 168
Host: localhost:5984

{
    "selector": {
        "year": {"$gt": 2010}
    },
    "fields": ["_id", "_rev", "year", "title"],
    "sort": [{"year": "asc"}],
    "limit": 2,
    "skip": 0
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Thu, 01 Sep 2016 15:41:53 GMT
Server: CouchDB (Erlang OTP)
Transfer\-Encoding: chunked

{
    "dbname": "movies",
    "index": {
        "ddoc": "_design/0d61d9177426b1e2aa8d0fe732ec6e506f5d443c",
        "name": "0d61d9177426b1e2aa8d0fe732ec6e506f5d443c",
        "type": "json",
        "def": {
            "fields": [
                {
                    "year": "asc"
                }
            ]
        }
    },
    "selector": {
        "year": {
            "$gt": 2010
        }
    },
    "opts": {
        "use_index": [],
        "bookmark": "nil",
        "limit": 2,
        "skip": 0,
        "sort": {},
        "fields": [
            "_id",
            "_rev",
            "year",
            "title"
        ],
        "r": [
            49
        ],
        "conflicts": false
    },
    "limit": 2,
    "skip": 0,
    "fields": [
        "_id",
        "_rev",
        "year",
        "title"
    ],
    "range": {
        "start_key": [
            2010
        ],
        "end_key": [
            {}
        ]
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Index selection
.sp
\fI_find\fP chooses which index to use for responding to a query, unless you specify
an index at query time.
.sp
The query planner looks at the selector section and finds the index with the
closest match to operators and fields used in the query. If there are two
or more json type indexes that match, the index with the smallest
number of fields in the index is preferred.
If there are still two or more candidate indexes,
the index with the first alphabetical name is chosen.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
It\(aqs good practice to specify indexes explicitly in your queries. This
prevents existing queries being affected by new indexes that might get added
in a production environment.
.UNINDENT
.UNINDENT
.SS \fB/db/_changes\fP
.INDENT 0.0
.TP
.B GET /{db}/_changes
Returns a sorted list of changes made to documents in the database, in time
order of application, can be obtained from the database\(aqs \fB_changes\fP
resource. Only the most recent change for a given document is guaranteed to
be provided, for example if a document has had fields added, and then
deleted, an API client checking for changes will not necessarily receive
the intermediate state of added documents.
.sp
This can be used to listen for update and modifications to the database for
post processing or synchronization, and for practical purposes,
a continuously connected \fB_changes\fP feed is a reasonable approach for
generating a real\-time log for most applications.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/event\-stream\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%Last\-Event\-ID\fP \-\- ID of the last events received by the server on a
previous connection. Overrides \fIsince\fP query parameter.
.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBdoc_ids\fP (\fIarray\fP) \-\- List of document IDs to filter the changes feed as
valid JSON array. Used with \fI_doc_ids\fP
filter. Since \fI\%length of URL is limited\fP, it is better to use
\fBPOST /{db}/_changes\fP instead.
.IP \(bu 2
\fBconflicts\fP (\fIboolean\fP) \-\- Includes \fIconflicts\fP information in response.
Ignored if \fIinclude_docs\fP isn\(aqt \fBtrue\fP\&. Default is \fBfalse\fP\&.
.IP \(bu 2
\fBdescending\fP (\fIboolean\fP) \-\- Return the change results in descending sequence
order (most recent change first). Default is \fBfalse\fP\&.
.IP \(bu 2
\fBfeed\fP (\fIstring\fP) \-\- .INDENT 2.0
.IP \(bu 2
\fBnormal\fP Specifies \fINormal Polling Mode\fP\&. All past changes are returned
immediately. \fIDefault.\fP
.IP \(bu 2
\fBlongpoll\fP Specifies \fILong Polling Mode\fP\&. Waits until at least one change
has occurred, sends the change, then closes the
connection. Most commonly used in conjunction with
\fBsince=now\fP, to wait for the next change.
.IP \(bu 2
\fBcontinuous\fP Sets \fIContinuous Mode\fP\&. Sends a line of JSON per
event. Keeps the socket open until \fBtimeout\fP\&.
.IP \(bu 2
\fBeventsource\fP Sets \fIEvent Source Mode\fP\&. Works the same as Continuous
Mode, but sends the events in \fI\%EventSource\fP format.
.UNINDENT

.IP \(bu 2
\fBfilter\fP (\fIstring\fP) \-\- Reference to a \fIfilter function\fP
from a design document that will filter whole stream emitting only
filtered events. See the section \fI\%Change Notifications in the book
CouchDB The Definitive Guide\fP for more information.
.IP \(bu 2
\fBheartbeat\fP (\fInumber\fP) \-\- Period in \fImilliseconds\fP after which an empty
line is sent in the results. Only applicable for \fIlongpoll\fP, \fIcontinuous\fP, and
\fIeventsource\fP feeds. Overrides any timeout
to keep the feed alive indefinitely. Default is \fB60000\fP\&. May be
\fBtrue\fP to use default value.
.IP \(bu 2
\fBinclude_docs\fP (\fIboolean\fP) \-\- Include the associated document with each
result. If there are conflicts, only the winning revision is returned.
Default is \fBfalse\fP\&.
.IP \(bu 2
\fBattachments\fP (\fIboolean\fP) \-\- Include the Base64\-encoded content of
\fIattachments\fP in the documents that
are included if \fIinclude_docs\fP is \fBtrue\fP\&. Ignored if \fIinclude_docs\fP
isn\(aqt \fBtrue\fP\&. Default is \fBfalse\fP\&.
.IP \(bu 2
\fBatt_encoding_info\fP (\fIboolean\fP) \-\- Include encoding information in attachment
stubs if \fIinclude_docs\fP is \fBtrue\fP and the particular attachment is
compressed. Ignored if \fIinclude_docs\fP isn\(aqt \fBtrue\fP\&.
Default is \fBfalse\fP\&.
.IP \(bu 2
\fBlast\-event\-id\fP (\fInumber\fP) \-\- Alias of \fILast\-Event\-ID\fP header.
.IP \(bu 2
\fBlimit\fP (\fInumber\fP) \-\- Limit number of result rows to the specified value
(note that using \fB0\fP here has the same effect as \fB1\fP).
.IP \(bu 2
\fBsince\fP \-\- Start the results from the change immediately after the given
update sequence. Can be valid update sequence or \fBnow\fP value.
Default is \fB0\fP\&.
.IP \(bu 2
\fBstyle\fP (\fIstring\fP) \-\- Specifies how many revisions are returned in
the changes array. The default, \fBmain_only\fP, will only return
the current "winning" revision; \fBall_docs\fP will return all leaf
revisions (including conflicts and deleted former conflicts).
.IP \(bu 2
\fBtimeout\fP (\fInumber\fP) \-\- Maximum period in \fImilliseconds\fP to wait for a change
before the response is sent, even if there are no results.
Only applicable for \fIlongpoll\fP or
\fIcontinuous\fP feeds.
Default value is specified by \fBhttpd/changes_timeout\fP
configuration option. Note that \fB60000\fP value is also the default
maximum timeout to prevent undetected dead connections.
.IP \(bu 2
\fBview\fP (\fIstring\fP) \-\- Allows to use view functions as filters. Documents
counted as "passed" for view filter in case if map function emits
at least one record for them.
See \fIchanges/filter/view\fP for more info.
.IP \(bu 2
\fBseq_interval\fP (\fInumber\fP) \-\- When fetching changes in a batch, setting the
\fIseq_interval\fP parameter tells CouchDB to only calculate the update seq
with every Nth result returned. By setting \fBseq_interval=<batch size>\fP
, where \fB<batch size>\fP is the number of results requested per batch,
load can be reduced on the source CouchDB database; computing the seq
value across many shards (esp. in highly\-sharded databases) is expensive
in a heavily loaded CouchDB cluster.
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Cache\-Control\fP \-\- \fBno\-cache\fP if changes feed is
\fIeventsource\fP
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/event\-stream\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.IP \(bu 2
\fI\%ETag\fP \-\- Response hash is changes feed is \fInormal\fP
.IP \(bu 2
\fI\%Transfer\-Encoding\fP \-\- \fBchunked\fP
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBlast_seq\fP (\fIjson\fP) \-\- Last change update sequence
.IP \(bu 2
\fBpending\fP (\fInumber\fP) \-\- Count of remaining items in the feed
.IP \(bu 2
\fBresults\fP (\fIarray\fP) \-\- Changes made to a database
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Bad request
.UNINDENT
.UNINDENT
.sp
The \fBresults\fP field of database changes:
.INDENT 7.0
.TP
.B JSON Object
.INDENT 7.0
.IP \(bu 2
\fBchanges\fP (\fIarray\fP) \-\- List of document\(aqs leaves with single field \fBrev\fP\&.
.IP \(bu 2
\fBid\fP (\fIstring\fP) \-\- Document ID.
.IP \(bu 2
\fBseq\fP (\fIjson\fP) \-\- Update sequence.
.IP \(bu 2
\fBdeleted\fP (\fIbool\fP) \-\- \fBtrue\fP if the document is deleted.
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /db/_changes?style=all_docs HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Mon, 12 Aug 2013 00:54:58 GMT
ETag: "6ASLEKEMSRABT0O5XY9UPO9Z"
Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked

{
    "last_seq": "5\-g1AAAAIreJyVkEsKwjAURZ\-toI5cgq5A0sQ0OrI70XyppcaRY92J7kR3ojupaSPUUgotgRd4yTlwbw4A0zRUMLdnpaMkwmyF3Ily9xBwEIuiKLI05KOTW0wkV4rruP29UyGWbordzwKVxWBNOGMKZhertDlarbr5pOT3DV4gudUC9\-MPJX9tpEAYx4TQASns2E24ucuJ7rXJSL1BbEgf3vTwpmedCZkYa7Pulck7Xt7x_usFU2aIHOD4eEfVTVA5KMGUkqhNZV\-8_o5i",
    "pending": 0,
    "results": [
        {
            "changes": [
                {
                    "rev": "2\-7051cbe5c8faecd085a3fa619e6e6337"
                }
            ],
            "id": "6478c2ae800dfc387396d14e1fc39626",
            "seq": "3\-g1AAAAG3eJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MSGXAqSVIAkkn2IFUZzIkMuUAee5pRqnGiuXkKA2dpXkpqWmZeagpu_Q4g_fGEbEkAqaqH2sIItsXAyMjM2NgUUwdOU_JYgCRDA5ACGjQfn30QlQsgKvcjfGaQZmaUmmZClM8gZhyAmHGfsG0PICrBPmQC22ZqbGRqamyIqSsLAAArcXo"
        },
        {
            "changes": [
                {
                    "rev": "3\-7379b9e515b161226c6559d90c4dc49f"
                }
            ],
            "deleted": true,
            "id": "5bbc9ca465f1b0fcd62362168a7c8831",
            "seq": "4\-g1AAAAHXeJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MymBMZc4EC7MmJKSmJqWaYynEakaQAJJPsoaYwgE1JM0o1TjQ3T2HgLM1LSU3LzEtNwa3fAaQ_HqQ_kQG3qgSQqnoUtxoYGZkZG5uS4NY8FiDJ0ACkgAbNx2cfROUCiMr9CJ8ZpJkZpaaZEOUziBkHIGbcJ2zbA4hKsA\-ZwLaZGhuZmhobYurKAgCz33kh"
        },
        {
            "changes": [
                {
                    "rev": "6\-460637e73a6288cb24d532bf91f32969"
                },
                {
                    "rev": "5\-eeaa298781f60b7bcae0c91bdedd1b87"
                }
            ],
            "id": "729eb57437745e506b333068fff665ae",
            "seq": "5\-g1AAAAIReJyVkE0OgjAQRkcwUVceQU9g\-mOpruQm2tI2SLCuXOtN9CZ6E70JFmpCCCFCmkyTdt6bfJMDwDQNFcztWWkcY8JXyB2cu49AgFwURZGloRid3MMkEUoJHbXbOxVy6arc_SxQWQzRVHCuYHaxSpuj1aqbj0t\-3\-AlSrZakn78oeSvjRSIkIhSNiCFHbsKN3c50b02mURvEB\-yD296eNOzzoRMRLRZ98rkHS_veGcC_nR\-fGe1gaCaxihhjOI2lX0BhniHaA"
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Changed in version 0.11.0: added \fBinclude_docs\fP parameter

.sp
Changed in version 1.2.0: added \fBview\fP parameter and special value \fI_view\fP
for \fBfilter\fP one

.sp
Changed in version 1.3.0: \fBsince\fP parameter could take \fInow\fP value to start
listen changes since current seq number.

.sp
Changed in version 1.3.0: \fBeventsource\fP feed type added.

.sp
Changed in version 1.4.0: Support \fBLast\-Event\-ID\fP header.

.sp
Changed in version 1.6.0: added \fBattachments\fP and \fBatt_encoding_info\fP
parameters

.sp
Changed in version 2.0.0: update sequences can be any valid json object,
added \fBseq_interval\fP

.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
If the specified replicas of the shards in any given since value are
unavailable, alternative replicas are selected, and the last known
checkpoint between them is used. If this happens, you might see changes
again that you have previously seen. Therefore, an application making use
of the \fI_changes\fP feed should be ‘idempotent’, that is, able to receive the
same data multiple times, safely.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Cloudant Sync and PouchDB already optimize the replication process by
setting \fBseq_interval\fP parameter to the number of results expected per
batch. This parameter increases throughput by reducing latency between
sequential requests in bulk document transfers. This has resulted in up to
a 20% replication performance improvement in highly\-sharded databases.
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Using the \fBattachments\fP parameter to include attachments in the changes
feed is not recommended for large attachment sizes. Also note that the
Base64\-encoding that is used leads to a 33% overhead (i.e. one third) in
transfer size for attachments.
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
The results returned by \fI_changes\fP are partially ordered. In other words,
the order is not guaranteed to be preserved for multiple calls.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B POST /{db}/_changes
Requests the database changes feed in the same way as
\fBGET /{db}/_changes\fP does, but is widely used with
\fB?filter=_doc_ids\fP query parameter and allows one to pass a larger list of
document IDs to filter.
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /recipes/_changes?filter=_doc_ids HTTP/1.1
Accept: application/json
Content\-Length: 40
Content\-Type: application/json
Host: localhost:5984

{
    "doc_ids": [
        "SpaghettiWithMeatballs"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Sat, 28 Sep 2013 07:23:09 GMT
ETag: "ARIHFWL3I7PIS0SPVTFU6TLR2"
Server: CouchDB (Erlang OTP)
Transfer\-Encoding: chunked

{
    "last_seq": "5\-g1AAAAIreJyVkEsKwjAURZ\-toI5cgq5A0sQ0OrI70XyppcaRY92J7kR3ojupaSPUUgotgRd4yTlwbw4A0zRUMLdnpaMkwmyF3Ily9xBwEIuiKLI05KOTW0wkV4rruP29UyGWbordzwKVxWBNOGMKZhertDlarbr5pOT3DV4gudUC9\-MPJX9tpEAYx4TQASns2E24ucuJ7rXJSL1BbEgf3vTwpmedCZkYa7Pulck7Xt7x_usFU2aIHOD4eEfVTVA5KMGUkqhNZV8_o5i",
    "pending": 0,
    "results": [
        {
            "changes": [
                {
                    "rev": "13\-bcb9d6388b60fd1e960d9ec4e8e3f29e"
                }
            ],
            "id": "SpaghettiWithMeatballs",
            "seq":  "5\-g1AAAAIReJyVkE0OgjAQRkcwUVceQU9g\-mOpruQm2tI2SLCuXOtN9CZ6E70JFmpCCCFCmkyTdt6bfJMDwDQNFcztWWkcY8JXyB2cu49AgFwURZGloRid3MMkEUoJHbXbOxVy6arc_SxQWQzRVHCuYHaxSpuj1aqbj0t\-3\-AlSrZakn78oeSvjRSIkIhSNiCFHbsKN3c50b02mURvEB\-yD296eNOzzoRMRLRZ98rkHS_veGcC_nR\-fGe1gaCaxihhjOI2lX0BhniHaA"
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Changes Feeds
.SS Polling
.sp
By default all changes are immediately returned within the JSON body:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /somedatabase/_changes HTTP/1.1
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"results":[
{"seq":"1\-g1AAAAF9eJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P__7MSGXAqSVIAkkn2IFUZzIkMuUAee5pRqnGiuXkKA2dpXkpqWmZeagpu_Q4g_fGEbEkAqaqH2sIItsXAyMjM2NgUUwdOU_JYgCRDA5ACGjQfn30QlQsgKvcTVnkAovI\-YZUPICpBvs0CAN1eY_c","id":"fresh","changes":[{"rev":"1\-967a00dff5e02add41819138abb3284d"}]},
{"seq":"3\-g1AAAAG3eJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MSGXAqSVIAkkn2IFUZzIkMuUAee5pRqnGiuXkKA2dpXkpqWmZeagpu_Q4g_fGEbEkAqaqH2sIItsXAyMjM2NgUUwdOU_JYgCRDA5ACGjQfn30QlQsgKvcjfGaQZmaUmmZClM8gZhyAmHGfsG0PICrBPmQC22ZqbGRqamyIqSsLAAArcXo","id":"updated","changes":[{"rev":"2\-7051cbe5c8faecd085a3fa619e6e6337CFCmkyTdt6bfJMDwDQNFcztWWkcY8JXyB2cu49AgFwURZGloRid3MMkEUoJHbXbOxVy6arc_SxQWQzRVHCuYHaxSpuj1aqbj0t\-3\-AlSrZakn78oeSvjRSIkIhSNiCFHbsKN3c50b02mURvEB\-yD296eNOzzoRMRLRZ98rkHS_veGcC_nR\-fGe1gaCaxihhjOI2lX0BhniHaA","id":"deleted","changes":[{"rev":"2\-eec205a9d413992850a6e32678485900"}],"deleted":true}
],
"last_seq":"5\-g1AAAAIreJyVkEsKwjAURZ\-toI5cgq5A0sQ0OrI70XyppcaRY92J7kR3ojupaSPUUgotgRd4yTlwbw4A0zRUMLdnpaMkwmyF3Ily9xBwEIuiKLI05KOTW0wkV4rruP29UyGWbordzwKVxWBNOGMKZhertDlarbr5pOT3DV4gudUC9\-MPJX9tpEAYx4TQASns2E24ucuJ7rXJSL1BbEgf3vTwpmedCZkYa7Pulck7Xt7x_usFU2aIHOD4eEfVTVA5KMGUkqhNZV\-8_o5i",
"pending": 0}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBresults\fP is the list of changes in sequential order. New and changed
documents only differ in the value of the rev; deleted documents include the
\fB"deleted": true\fP attribute. (In the \fBstyle=all_docs mode\fP, deleted applies
only to the current/winning revision. The other revisions listed might be
deleted even if there is no deleted property; you have to \fBGET\fP them
individually to make sure.)
.sp
\fBlast_seq\fP is the update sequence of the last update returned (Equivalent
to the last item in the results).
.sp
Sending a \fBsince\fP param in the query string skips all changes up to and
including the given update sequence:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /somedatabase/_changes?since=4\-g1AAAAHXeJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MymBMZc4EC7MmJKSmJqWaYynEakaQAJJPsoaYwgE1JM0o1TjQ3T2HgLM1LSU3LzEtNwa3fAaQ_HqQ_kQG3qgSQqnoUtxoYGZkZG5uS4NY8FiDJ0ACkgAbNx2cfROUCiMr9CJ8ZpJkZpaaZEOUziBkHIGbcJ2zbA4hKsA\-ZwLaZGhuZmhobYurKAgCz33kh HTTP/1.1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The return structure for \fBnormal\fP and \fBlongpoll\fP modes is a JSON
array of changes objects, and the last update sequence.
.sp
In the return format for \fBcontinuous\fP mode, the server sends a \fBCRLF\fP
(carriage\-return, linefeed) delimited line for each change. Each line
contains the \fIJSON object\fP described above.
.sp
You can also request the full contents of each document change (instead
of just the change notification) by using the \fBinclude_docs\fP parameter.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "last_seq": "5\-g1AAAAIreJyVkEsKwjAURZ\-toI5cgq5A0sQ0OrI70XyppcaRY92J7kR3ojupaSPUUgotgRd4yTlwbw4A0zRUMLdnpaMkwmyF3Ily9xBwEIuiKLI05KOTW0wkV4rruP29UyGWbordzwKVxWBNOGMKZhertDlarbr5pOT3DV4gudUC9\-MPJX9tpEAYx4TQASns2E24ucuJ7rXJSL1BbEgf3vTwpmedCZkYa7Pulck7Xt7x_usFU2aIHOD4eEfVTVA5KMGUkqhNZV\-8_o5i",
    "pending": 0,
    "results": [
        {
            "changes": [
                {
                    "rev": "2\-eec205a9d413992850a6e32678485900"
                }
            ],
            "deleted": true,
            "id": "deleted",
            "seq":  "5\-g1AAAAIReJyVkE0OgjAQRkcwUVceQU9g\-mOpruQm2tI2SLCuXOtN9CZ6E70JFmpCCCFCmkyTdt6bfJMDwDQNFcztWWkcY8JXyB2cu49AgFwURZGloRid3MMkEUoJHbXbOxVy6arc_SxQWQzRVHCuYHaxSpuj1aqbj0t\-3\-AlSrZakn78oeSvjRSIkIhSNiCFHbsKN3c50b02mURvEByD296eNOzzoRMRLRZ98rkHS_veGcC_nR\-fGe1gaCaxihhjOI2lX0BhniHaA",
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Long Polling
.sp
The \fIlongpoll\fP feed, probably most applicable for a browser, is a more
efficient form of polling that waits for a change to occur before the response
is sent. \fIlongpoll\fP avoids the need to frequently poll CouchDB to discover
nothing has changed!
.sp
The request to the server will remain open until a change is made on the
database and is subsequently transferred, and then the connection will close.
This is low load for both server and client.
.sp
The response is basically the same JSON as is sent for the \fInormal\fP feed.
.sp
Because the wait for a change can be significant you can set a
timeout before the connection is automatically closed (the
\fBtimeout\fP argument). You can also set a heartbeat interval (using
the \fBheartbeat\fP query argument), which sends a newline to keep the
connection active.
.SS Continuous
.sp
Continually polling the CouchDB server is not ideal \- setting up new HTTP
connections just to tell the client that nothing happened puts unnecessary
strain on CouchDB.
.sp
A continuous feed stays open and connected to the database until explicitly
closed and changes are sent to the client as they happen, i.e. in near
real\-time.
.sp
As with the \fIlongpoll\fP feed type you can set both the timeout and heartbeat
intervals to ensure that the connection is kept open for new changes
and updates.
.sp
The continuous feed\(aqs response is a little different than the other feed types
to simplify the job of the client \- each line of the response is either empty
or a JSON object representing a single change, as found in the normal feed\(aqs
results.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /somedatabase/_changes?feed=continuous HTTP/1.1
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"seq":"1\-g1AAAAF9eJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MSGXAqSVIAkkn2IFUZzIkMuUAee5pRqnGiuXkKA2dpXkpqWmZeagpu_Q4g_fGEbEkAqaqH2sIItsXAyMjM2NgUUwdOU_JYgCRDA5ACGjQfn30QlQsgKvcTVnkAovI\-YZUPICpBvs0CAN1eY_c","id":"fresh","changes":[{"rev":"5\-g1AAAAHxeJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MymBOZcoEC7MmJKSmJqWaYynEakaQAJJPsoaYwgE1JM0o1TjQ3T2HgLM1LSU3LzEtNwa3fAaQ_HkV_kkGyZWqSEXH6E0D666H6GcH6DYyMzIyNTUnwRR4LkGRoAFJAg\-YjwiMtOdXCwJyU8ICYtABi0n6EnwzSzIxS00yI8hPEjAMQM\-5nJTIQUPkAovI_UGUWAA0SgOI","id":"updated","changes":[{"rev":"2\-7051cbe5c8faecd085a3fa619e6e6337"}]}
{"seq":"3\-g1AAAAHReJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MymBOZcoEC7MmJKSmJqWaYynEakaQAJJPsoaYwgE1JM0o1TjQ3T2HgLM1LSU3LzEtNwa3fAaQ_HkV_kkGyZWqSEXH6E0D660H6ExlwqspjAZIMDUAKqHA\-yCZGiEuTUy0MzEnxL8SkBRCT9iPcbJBmZpSaZkKUmyFmHICYcZ\-wux9AVIJ8mAUABgp6XQ","id":"deleted","changes":[{"rev":"2\-eec205a9d413992850a6e32678485900"}],"deleted":true}
\&... tum tee tum ...
{"seq":"6\-g1AAAAIreJyVkEsKwjAURWMrqCOXoCuQ9MU0OrI70XyppcaRY92J7kR3ojupaVNopRQsgRd4yTlwb44QmqahQnN7VjpKImAr7E6Uu4eAI7EoiiJLQx6c3GIiuVJcx93vvQqxdFPsaguqLAY04YwpNLtYpc3RatXPJyW__\-EFllst4D_\-UPLXmh9VPAaICaEDUtixm\-jmLie6N30YqTeYDenDmx7e9GwyYRODNuu_MnnHyzverV6AMkPkAMfHO1rdUAKUkqhLZV\-_0o5j","id":"updated","changes":[{"rev":"3\-825cb35de44c433bfb2df415563a19de"}]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Obviously, \fI\&... tum tee tum ...\fP does not appear in the actual response, but
represents a long pause before the change with seq 6 occurred.
.SS Event Source
.sp
The \fIeventsource\fP feed provides push notifications that can be consumed in
the form of DOM events in the browser. Refer to the \fI\%W3C eventsource
specification\fP for further details. CouchDB also honours the \fBLast\-Event\-ID\fP
parameter.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /somedatabase/_changes?feed=eventsource HTTP/1.1
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
// define the event handling function
if (window.EventSource) {

    var source = new EventSource("/somedatabase/_changes?feed=eventsource");
    source.onerror = function(e) {
        alert(\(aqEventSource failed.\(aq);
    };

    var results = [];
    var sourceListener = function(e) {
        var data = JSON.parse(e.data);
        results.push(data);
    };

    // start listening for events
    source.addEventListener(\(aqmessage\(aq, sourceListener, false);

    // stop listening for events
    source.removeEventListener(\(aqmessage\(aq, sourceListener, false);

}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you set a heartbeat interval (using the \fBheartbeat\fP query argument),
CouchDB will send a \fBhearbeat\fP event that you can subscribe to with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source.addEventListener(\(aqheartbeat\(aq, function () {}, false);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This can be monitored by the client application to restart the EventSource
connection if needed (i.e. if the TCP connection gets stuck in a half\-open
state).
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
EventSource connections are subject to cross\-origin resource sharing
restrictions. You might need to configure \fICORS support\fP to get the EventSource to work in your application.
.UNINDENT
.UNINDENT
.SS Filtering
.sp
You can filter the contents of the changes feed in a number of ways. The
most basic way is to specify one or more document IDs to the query. This
causes the returned structure value to only contain changes for the
specified IDs. Note that the value of this query argument should be a
JSON formatted array.
.sp
You can also filter the \fB_changes\fP feed by defining a filter function
within a design document. The specification for the filter is the same
as for replication filters. You specify the name of the filter function
to the \fBfilter\fP parameter, specifying the design document name and
\fIfilter name\fP\&. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /db/_changes?filter=design_doc/filtername HTTP/1.1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Additionally, a couple of built\-in filters are available and described
below.
.SS _doc_ids
.sp
This filter accepts only changes for documents which ID in specified in
\fBdoc_ids\fP query parameter or payload\(aqs object array. See
\fBPOST /{db}/_changes\fP for an example.
.SS _selector
.sp
New in version 2.0.

.sp
This filter accepts only changes for documents which match a specified
selector, defined using the same \fIselector
syntax\fP used for \fI_find\fP\&.
.sp
This is significantly more efficient than using a JavaScript filter
function and is the recommended option if filtering on document attributes only.
.sp
Note that, unlike JavaScript filters, selectors do not have access to the
request object.
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST /recipes/_changes?filter=_selector HTTP/1.1
Content\-Type: application/json
Host: localhost:5984

{
    "selector": { "_id": { "$regex": "^_design/" } }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Tue, 06 Sep 2016 20:03:23 GMT
Etag: "1H8RGBCK3ABY6ACDM7ZSC30QK"
Server: CouchDB (Erlang OTP/18)
Transfer\-Encoding: chunked

{
    "last_seq": "11\-g1AAAAIreJyVkEEKwjAQRUOrqCuPoCeQZGIaXdmbaNIk1FLjyrXeRG\-iN9Gb1LQRaimFlsAEJnkP_s8RQtM0VGhuz0qTmABfYXdI7h4CgeSiKIosDUVwcotJIpQSOmp_71TIpZty97OgymJAU8G5QrOLVdocrVbdfFzy\-wYvcbLVEvrxh5K_NlJggIhSNiCFHbmJbu5yonttMoneYD6kD296eNOzzoRNBNqse2Xyjpd3vP96AcYNTQY4Pt5RdTOuHIwCY5S0qewLwY6OaA",
    "pending": 0,
    "results": [
        {
            "changes": [
                {
                    "rev": "10\-304cae84fd862832ea9814f02920d4b2"
                }
            ],
            "id": "_design/ingredients",
            "seq": "8\-g1AAAAHxeJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MymBOZcoEC7MmJKSmJqWaYynEakaQAJJPsoaYwgE1JM0o1TjQ3T2HgLM1LSU3LzEtNwa3fAaQ_HkV_kkGyZWqSEXH6E0D666H6GcH6DYyMzIyNTUnwRR4LkGRoAFJAg\-ZnJTIQULkAonI_ws0GaWZGqWkmRLkZYsYBiBn3Cdv2AKIS7ENWsG2mxkampsaGmLqyAOYpgEo"
        },
        {
            "changes": [
                {
                    "rev": "123\-6f7c1b7c97a9e4f0d22bdf130e8fd817"
                }
            ],
            "deleted": true,
            "id": "_design/cookbook",
            "seq": "9\-g1AAAAHxeJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MymBOZcoEC7MmJKSmJqWaYynEakaQAJJPsoaYwgE1JM0o1TjQ3T2HgLM1LSU3LzEtNwa3fAaQ_HkV_kkGyZWqSEXH6E0D661F8YWBkZGZsbEqCL_JYgCRDA5ACGjQ_K5GBgMoFEJX7EW42SDMzSk0zIcrNEDMOQMy4T9i2BxCVYB\-ygm0zNTYyNTU2xNSVBQDnK4BL"
        },
        {
            "changes": [
                {
                    "rev": "6\-5b8a52c22580e922e792047cff3618f3"
                }
            ],
            "deleted": true,
            "id": "_design/meta",
            "seq": "11\-g1AAAAIReJyVkE0OgjAQRiegUVceQU9g\-mOpruQm2tI2SLCuXOtN9CZ6E70JFmpCCCFCmkyTdt6bfJMDwDQNFcztWWkcY8JXyB2cu49AgFwURZGloQhO7mGSCKWEjtrtnQq5dFXufhaoLIZoKjhXMLtYpc3RatXNxyW_b_ASJVstST_\-UPLXRgpESEQpG5DCjlyFm7uc6F6bTKI3iA_Zhzc9vOlZZ0ImItqse2Xyjpd3vDMBfzo_vrPawLiaxihhjOI2lX0BirqHbg"
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Missing selector
.sp
If the selector object is missing from the request body,
the error message is similar to the following example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
   "error": "bad request",
   "reason": "Selector must be specified in POST payload"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Not a valid JSON object
.sp
If the selector object is not a well\-formed JSON object,
the error message is similar to the following example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
   "error": "bad request",
   "reason": "Selector error: expected a JSON object"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Not a valid selector
.sp
If the selector object does not contain a valid selection expression,
the error message is similar to the following example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
   "error": "bad request",
   "reason": "Selector error: expected a JSON object"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS _design
.sp
The \fB_design\fP filter accepts only changes for any design document within the
requested database.
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/_changes?filter=_design HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Tue, 06 Sep 2016 12:55:12 GMT
ETag: "ARIHFWL3I7PIS0SPVTFU6TLR2"
Server: CouchDB (Erlang OTP)
Transfer\-Encoding: chunked

{
    "last_seq": "11\-g1AAAAIreJyVkEEKwjAQRUOrqCuPoCeQZGIaXdmbaNIk1FLjyrXeRG\-iN9Gb1LQRaimFlsAEJnkP_s8RQtM0VGhuz0qTmABfYXdI7h4CgeSiKIosDUVwcotJIpQSOmp_71TIpZty97OgymJAU8G5QrOLVdocrVbdfFzy\-wYvcbLVEvrxh5K_NlJggIhSNiCFHbmJbu5yonttMoneYD6kD296eNOzzoRNBNqse2Xyjpd3vP96AcYNTQY4Pt5RdTOuHIwCY5S0qewLwY6OaA",
    "pending": 0,
    "results": [
        {
            "changes": [
                {
                    "rev": "10\-304cae84fd862832ea9814f02920d4b2"
                }
            ],
            "id": "_design/ingredients",
            "seq": "8\-g1AAAAHxeJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MymBOZcoEC7MmJKSmJqWaYynEakaQAJJPsoaYwgE1JM0o1TjQ3T2HgLM1LSU3LzEtNwa3fAaQ_HkV_kkGyZWqSEXH6E0D666H6GcH6DYyMzIyNTUnwRR4LkGRoAFJAg\-ZnJTIQULkAonI_ws0GaWZGqWkmRLkZYsYBiBn3Cdv2AKIS7ENWsG2mxkampsaGmLqyAOYpgEo"
        },
        {
            "changes": [
                {
                    "rev": "123\-6f7c1b7c97a9e4f0d22bdf130e8fd817"
                }
            ],
            "deleted": true,
            "id": "_design/cookbook",
            "seq": "9\-g1AAAAHxeJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MymBOZcoEC7MmJKSmJqWaYynEakaQAJJPsoaYwgE1JM0o1TjQ3T2HgLM1LSU3LzEtNwa3fAaQ_HkV_kkGyZWqSEXH6E0D661F8YWBkZGZsbEqCL_JYgCRDA5ACGjQ_K5GBgMoFEJX7EW42SDMzSk0zIcrNEDMOQMy4T9i2BxCVYB\-ygm0zNTYyNTU2xNSVBQDnK4BL"
        },
        {
            "changes": [
                {
                    "rev": "6\-5b8a52c22580e922e792047cff3618f3"
                }
            ],
            "deleted": true,
            "id": "_design/meta",
            "seq": "11\-g1AAAAIReJyVkE0OgjAQRiegUVceQU9g\-mOpruQm2tI2SLCuXOtN9CZ6E70JFmpCCCFCmkyTdt6bfJMDwDQNFcztWWkcY8JXyB2cu49AgFwURZGloQhO7mGSCKWEjtrtnQq5dFXufhaoLIZoKjhXMLtYpc3RatXNxyW_b_ASJVstST_\-UPLXRgpESEQpG5DCjlyFm7uc6F6bTKI3iA_Zhzc9vOlZZ0ImItqse2Xyjpd3vDMBfzo_vrPawLiaxihhjOI2lX0BirqHbg"
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS _view
.sp
New in version 1.2.

.sp
The special filter \fB_view\fP allows to use existing
\fImap function\fP as the \fIfilter\fP\&. If the map
function emits anything for the processed document it counts as accepted and
the changes event emits to the feed. For most use\-practice cases \fIfilter\fP
functions are very similar to \fImap\fP ones, so this feature helps to reduce
amount of duplicated code.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
While \fImap functions\fP doesn\(aqt process the design documents,
using \fB_view\fP filter forces them to do this. You need to be sure, that
they are ready to handle documents with \fIalien\fP structure without panic.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Using \fB_view\fP filter doesn\(aqt queries the view index files, so you cannot
use common \fIview query parameters\fP to additionally
filter the changes feed by index key. Also, CouchDB doesn\(aqt returns
the result instantly as it does for views \- it really uses the specified
map function as filter.
.sp
Moreover, you cannot make such filters dynamic e.g. process the request
query parameters or handle the \fIuserctx_object\fP \- the map function is
only operates with the document.
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/_changes?filter=_view&view=ingredients/by_recipe HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Tue, 06 Sep 2016 12:57:56 GMT
ETag: "ARIHFWL3I7PIS0SPVTFU6TLR2"
Server: CouchDB (Erlang OTP)
Transfer\-Encoding: chunked

{
    "last_seq": "11\-g1AAAAIreJyVkEEKwjAQRUOrqCuPoCeQZGIaXdmbaNIk1FLjyrXeRG\-iN9Gb1LQRaimFlsAEJnkP_s8RQtM0VGhuz0qTmABfYXdI7h4CgeSiKIosDUVwcotJIpQSOmp_71TIpZty97OgymJAU8G5QrOLVdocrVbdfFzy\-wYvcbLVEvrxh5K_NlJggIhSNiCFHbmJbu5yonttMoneYD6kD296eNOzzoRNBNqse2Xyjpd3vP96AcYNTQY4Pt5RdTOuHIwCY5S0qewLwY6OaA",
    "results": [
        {
            "changes": [
                {
                    "rev": "13\-bcb9d6388b60fd1e960d9ec4e8e3f29e"
                }
            ],
            "id": "SpaghettiWithMeatballs",
            "seq": "11\-g1AAAAIReJyVkE0OgjAQRiegUVceQU9g\-mOpruQm2tI2SLCuXOtN9CZ6E70JFmpCCCFCmkyTdt6bfJMDwDQNFcztWWkcY8JXyB2cu49AgFwURZGloQhO7mGSCKWEjtrtnQq5dFXufhaoLIZoKjhXMLtYpc3RatXNxyW_b_ASJVstST_\-UPLXRgpESEQpG5DCjlyFm7uc6F6bTKI3iA_Zhzc9vOlZZ0ImItqse2Xyjpd3vDMBfzo_vrPawLiaxihhjOI2lX0BirqHbg"
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fB/db/_compact\fP
.INDENT 0.0
.TP
.B POST /{db}/_compact
Request compaction of the specified database. Compaction compresses the
disk database file by performing the following operations:
.INDENT 7.0
.IP \(bu 2
Writes a new, optimised, version of the database file, removing any
unused sections from the new version during write. Because a new file is
temporarily created for this purpose, you may require up to twice the
current storage space of the specified database in order for the
compaction routine to complete.
.IP \(bu 2
Removes old revisions of documents from the database, up to the
per\-database limit specified by the \fB_revs_limit\fP database
parameter.
.UNINDENT
.sp
Compaction can only be requested on an individual database; you cannot
compact all the databases for a CouchDB instance. The compaction process
runs as a background process.
.sp
You can determine if the compaction process is operating on a database
by obtaining the database meta information, the \fBcompact_running\fP
value of the returned database structure will be set to true. See
\fBGET /{db}\fP\&.
.sp
You can also obtain a list of running processes to determine whether
compaction is currently running. See \fIapi/server/active_tasks\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBok\fP (\fIboolean\fP) \-\- Operation status
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%202 Accepted\fP \-\- Compaction request has been accepted
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid database name
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.IP \(bu 2
\fI\%415 Unsupported Media Type\fP \-\- Bad \fI\%Content\-Type\fP value
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db/_compact HTTP/1.1
Accept: application/json
Content\-Type: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 202 Accepted
Cache\-Control: must\-revalidate
Content\-Length: 12
Content\-Type: application/json
Date: Mon, 12 Aug 2013 09:27:43 GMT
Server: CouchDB (Erlang/OTP)

{
    "ok": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_compact/design\-doc\fP
.INDENT 0.0
.TP
.B POST /{db}/_compact/{ddoc}
Compacts the view indexes associated with the specified design document.
It may be that compacting a large view can return more storage than
compacting the actual db. Thus, you can use this in place of the full
database compaction if you know a specific set of view indexes have been
affected by a recent database change.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBddoc\fP \-\- Design document name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBok\fP (\fIboolean\fP) \-\- Operation status
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%202 Accepted\fP \-\- Compaction request has been accepted
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid database name
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Design document not found
.IP \(bu 2
\fI\%415 Unsupported Media Type\fP \-\- Bad \fI\%Content\-Type\fP value
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db/_compact/posts HTTP/1.1
Accept: application/json
Content\-Type: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 202 Accepted
Cache\-Control: must\-revalidate
Content\-Length: 12
Content\-Type: application/json
Date: Mon, 12 Aug 2013 09:36:44 GMT
Server: CouchDB (Erlang/OTP)

{
    "ok": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
View indexes are stored in a separate \fB\&.couch\fP file based on a hash
of the design document\(aqs relevant functions, in a sub directory of
where the main \fB\&.couch\fP database files are located.
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_ensure_full_commit\fP
.INDENT 0.0
.TP
.B POST /{db}/_ensure_full_commit
Commits any recent changes to the specified database to disk. You should
call this if you want to ensure that recent changes have been flushed.
This function is likely not required, assuming you have the recommended
configuration setting of \fBdelayed_commits=false\fP, which requires CouchDB
to ensure changes are written to disk before a 200 or similar result is
returned.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBinstance_start_time\fP (\fIstring\fP) \-\- Always \fB"0"\fP\&. (Returned for legacy
reasons.)
.IP \(bu 2
\fBok\fP (\fIboolean\fP) \-\- Operation status
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%201 Created\fP \-\- Commit completed successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid database name
.IP \(bu 2
\fI\%415 Unsupported Media Type\fP \-\- Bad \fI\%Content\-Type\fP value
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db/_ensure_full_commit HTTP/1.1
Accept: application/json
Content\-Type: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 53
Content\-Type: application/json
Date: Mon, 12 Aug 2013 10:22:19 GMT
Server: CouchDB (Erlang/OTP)

{
    "instance_start_time": "0",
    "ok": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_view_cleanup\fP
.INDENT 0.0
.TP
.B POST /{db}/_view_cleanup
Removes view index files that are no longer required by CouchDB as a result
of changed views within design documents. As the view filename is based on
a hash of the view functions, over time old views will remain, consuming
storage. This call cleans up the cached view output on disk for
a given view.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBok\fP (\fIboolean\fP) \-\- Operation status
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%202 Accepted\fP \-\- Compaction request has been accepted
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid database name
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.IP \(bu 2
\fI\%415 Unsupported Media Type\fP \-\- Bad \fI\%Content\-Type\fP value
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db/_view_cleanup HTTP/1.1
Accept: application/json
Content\-Type: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 202 Accepted
Cache\-Control: must\-revalidate
Content\-Length: 12
Content\-Type: application/json
Date: Mon, 12 Aug 2013 09:27:43 GMT
Server: CouchDB (Erlang/OTP)

{
    "ok": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_security\fP
.INDENT 0.0
.TP
.B GET /{db}/_security
Returns the current security object from the specified database.
.sp
The security object consists of two compulsory elements, \fBadmins\fP
and \fBmembers\fP, which are used to specify the list of users and/or roles
that have admin and members rights to the database respectively:
.INDENT 7.0
.IP \(bu 2
\fBmembers\fP: they can read all types of documents from the DB, and they
can write (and edit) documents to the DB except for design documents.
.IP \(bu 2
\fBadmins\fP: they have all the privileges of \fBmembers\fP plus the
privileges: write (and edit) design documents, add/remove database admins
and members and set the \fIdatabase revisions limit\fP\&. They can not create a database nor delete a
database.
.UNINDENT
.sp
Both \fBmembers\fP and \fBadmins\fP objects contain two array\-typed fields:
.INDENT 7.0
.IP \(bu 2
\fBnames\fP: List of CouchDB user names
.IP \(bu 2
\fBroles\fP: List of users roles
.UNINDENT
.sp
Any additional fields in the security object are optional.
The entire security object is made available to validation and other
internal functions so that the database can control and limit
functionality.
.sp
If both the names and roles fields of either the admins or members
properties are empty arrays, or are not existent, it means the database
has no admins or members.
.sp
Having no admins, only server admins (with the reserved \fB_admin\fP role)
are able to update design document and make other admin level changes.
.sp
Having no members, any user can write regular documents (any non\-design
document) and read documents from the database.
.sp
If there are any member names or roles defined for a database, then only
authenticated users having a matching name or role are allowed to read
documents from the database (or do a \fBGET /{db}\fP call).
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
If the security object for a database has never been set, then the
value returned will be empty.
.sp
Also note, that security objects are not regular versioned documents
(that is, they are not under MVCC rules). This is a design choice to
speedup authorization checks (avoids traversing a database\(gas documents
B\-Tree).
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBadmins\fP (\fIobject\fP) \-\- Object with two fields as \fBnames\fP and \fBroles\fP\&.
See description above for more info.
.IP \(bu 2
\fBmembers\fP (\fIobject\fP) \-\- Object with two fields as \fBnames\fP and \fBroles\fP\&.
See description above for more info.
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /db/_security HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 109
Content\-Type: application/json
Date: Mon, 12 Aug 2013 19:05:29 GMT
Server: CouchDB (Erlang/OTP)

{
    "admins": {
        "names": [
            "superuser"
        ],
        "roles": [
            "admins"
        ]
    },
    "members": {
        "names": [
            "user1",
            "user2"
        ],
        "roles": [
            "developers"
        ]
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B PUT /{db}/_security
Sets the security object for the given database.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.UNINDENT
.TP
.B Request JSON Object
.INDENT 7.0
.IP \(bu 2
\fBadmins\fP (\fIobject\fP) \-\- Object with two fields as \fBnames\fP and \fBroles\fP\&.
\fISee description above for more info\fP\&.
.IP \(bu 2
\fBmembers\fP (\fIobject\fP) \-\- Object with two fields as \fBnames\fP and \fBroles\fP\&.
\fISee description above for more info\fP\&.
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBok\fP (\fIboolean\fP) \-\- Operation status
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- CouchDB Server Administrator privileges required
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
shell> curl http://localhost:5984/pineapple/_security \-X PUT \-H \(aqcontent\-type: application/json\(aq \-H \(aqaccept: application/json\(aq \-d \(aq{"admins":{"names":["superuser"],"roles":["admins"]},"members":{"names": ["user1","user2"],"roles": ["developers"]}}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
PUT /db/_security HTTP/1.1
Accept: application/json
Content\-Length: 121
Content\-Type: application/json
Host: localhost:5984

{
    "admins": {
        "names": [
            "superuser"
        ],
        "roles": [
            "admins"
        ]
    },
    "members": {
        "names": [
            "user1",
            "user2"
        ],
        "roles": [
            "developers"
        ]
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 12
Content\-Type: application/json
Date: Tue, 13 Aug 2013 11:26:28 GMT
Server: CouchDB (Erlang/OTP)

{
    "ok": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_purge\fP
.INDENT 0.0
.TP
.B POST /{db}/_purge
A database purge permanently removes the references to deleted documents
from the database. Normal deletion of a document within CouchDB does not
remove the document from the database, instead, the document is marked as
\fB_deleted=true\fP (and a new revision is created). This is to ensure that
deleted documents can be replicated to other databases as having been
deleted. This also means that you can check the status of a document and
identify that the document has been deleted by its absence.
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
Purging a document from a database should only be done as a last resort
when sensitive information has been introduced inadvertently into a
database. In clustered or replicated environments it is very difficult
to guarantee that a particular purged document has been removed from
all replicas. Do not rely on this API as a way of doing secure
deletion.
.UNINDENT
.UNINDENT
.sp
The purge operation removes the references to the deleted documents from
the database. The purging of old documents is not replicated to other
databases. If you are replicating between databases and have deleted a
large number of documents you should run purge on each database.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Purging documents does not remove the space used by them on disk. To
reclaim disk space, you should run a database compact (see
\fIapi/db/compact\fP), and compact views
(see \fIapi/db/compact/ddoc\fP).
.UNINDENT
.UNINDENT
.sp
The format of the request must include the document ID and one or more
revisions that must be purged.
.sp
The response will contain the purge sequence number, and a list of the
document IDs and revisions successfully purged.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.UNINDENT
.TP
.B Request JSON Object
.INDENT 7.0
.IP \(bu 2
\fBobject\fP \-\- Mapping of document ID to list of revisions to purge
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBpurge_seq\fP (\fInumber\fP) \-\- Purge sequence number
.IP \(bu 2
\fBpurged\fP (\fIobject\fP) \-\- Mapping of document ID to list of purged revisions
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid database name or JSON payload
.IP \(bu 2
\fI\%415 Unsupported Media Type\fP \-\- Bad \fI\%Content\-Type\fP value
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db/_purge HTTP/1.1
Accept: application/json
Content\-Length: 76
Content\-Type: application/json
Host: localhost:5984

{
    "c6114c65e295552ab1019e2b046b10e": [
        "3\-b06fcd1c1c9e0ec7c480ee8aa467bf3b",
        "3\-0e871ef78849b0c206091f1a7af6ec41"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 103
Content\-Type: application/json
Date: Mon, 12 Aug 2013 10:53:24 GMT
Server: CouchDB (Erlang/OTP)

{
    "purge_seq":3,
    "purged":{
        "c6114c65e295552ab1019e2b046b10e": [
            "3\-b06fcd1c1c9e0ec7c480ee8aa467bf3b"
        ]
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Updating Indexes
.sp
The number of purges on a database is tracked using a purge sequence. This is
used by the view indexer to optimize the updating of views that contain the
purged documents.
.sp
When the indexer identifies that the purge sequence on a database has changed,
it compares the purge sequence of the database with that stored in the view
index. If the difference between the stored sequence and database is sequence
is only 1, then the indexer uses a cached list of the most recently purged
documents, and then removes these documents from the index individually. This
prevents completely rebuilding the index from scratch.
.sp
If the difference between the stored sequence number and current database
sequence is greater than 1, then the view index is entirely rebuilt. This is
an expensive operation as every document in the database must be examined.
.SS \fB/db/_missing_revs\fP
.INDENT 0.0
.TP
.B POST /{db}/_missing_revs
With given a list of document revisions, returns the document revisions
that do not exist in the database.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.UNINDENT
.TP
.B Request JSON Object
.INDENT 7.0
.IP \(bu 2
\fBobject\fP \-\- Mapping of document ID to list of revisions to lookup
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBmissing_revs\fP (\fIobject\fP) \-\- Mapping of document ID to list of missed
revisions
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid database name or JSON payload
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db/_missing_revs HTTP/1.1
Accept: application/json
Content\-Length: 76
Content\-Type: application/json
Host: localhost:5984

{
    "c6114c65e295552ab1019e2b046b10e": [
        "3\-b06fcd1c1c9e0ec7c480ee8aa467bf3b",
        "3\-0e871ef78849b0c206091f1a7af6ec41"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 64
Content\-Type: application/json
Date: Mon, 12 Aug 2013 10:53:24 GMT
Server: CouchDB (Erlang/OTP)

{
    "missed_revs":{
        "c6114c65e295552ab1019e2b046b10e": [
            "3\-b06fcd1c1c9e0ec7c480ee8aa467bf3b"
        ]
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_revs_diff\fP
.INDENT 0.0
.TP
.B POST /{db}/_revs_diff
Given a set of document/revision IDs, returns the subset of those that do
not correspond to revisions stored in the database.
.sp
Its primary use is by the replicator, as an important optimization: after
receiving a set of new revision IDs from the source database, the
replicator sends this set to the destination database\(aqs \fB_revs_diff\fP to
find out which of them already exist there. It can then avoid fetching and
sending already\-known document bodies.
.sp
Both the request and response bodies are JSON objects whose keys are
document IDs; but the values are structured differently:
.INDENT 7.0
.IP \(bu 2
In the request, a value is an array of revision IDs for that document.
.IP \(bu 2
In the response, a value is an object with a \fBmissing\fP: key, whose
value is a list of revision IDs for that document (the ones that are not
stored in the database) and optionally a \fBpossible_ancestors\fP key,
whose value is an array of revision IDs that are known that might be
ancestors of the missing revisions.
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.UNINDENT
.TP
.B Request JSON Object
.INDENT 7.0
.IP \(bu 2
\fBobject\fP \-\- Mapping of document ID to list of revisions to lookup
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBmissing\fP (\fIarray\fP) \-\- List of missed revisions for specified document
.IP \(bu 2
\fBpossible_ancestors\fP (\fIarray\fP) \-\- List of revisions that \fImay be\fP ancestors
for specified document and its current revision in requested database
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid database name or JSON payload
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db/_revs_diff HTTP/1.1
Accept: application/json
Content\-Length: 113
Content\-Type: application/json
Host: localhost:5984

{
    "190f721ca3411be7aa9477db5f948bbb": [
        "3\-bb72a7682290f94a985f7afac8b27137",
        "4\-10265e5a26d807a3cfa459cf1a82ef2e",
        "5\-067a00dff5e02add41819138abb3284d"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 88
Content\-Type: application/json
Date: Mon, 12 Aug 2013 16:56:02 GMT
Server: CouchDB (Erlang/OTP)

{
    "190f721ca3411be7aa9477db5f948bbb": {
        "missing": [
            "3\-bb72a7682290f94a985f7afac8b27137",
            "5\-067a00dff5e02add41819138abb3284d"
        ],
        "possible_ancestors": [
            "4\-10265e5a26d807a3cfa459cf1a82ef2e"
        ]
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_revs_limit\fP
.INDENT 0.0
.TP
.B GET /{db}/_revs_limit
Gets the current \fBrevs_limit\fP (revision limit) setting.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /db/_revs_limit HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 5
Content\-Type: application/json
Date: Mon, 12 Aug 2013 17:27:30 GMT
Server: CouchDB (Erlang/OTP)

1000
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B PUT /{db}/_revs_limit
Sets the maximum number of document revisions that will be tracked by
CouchDB, even after compaction has occurred. You can set the revision limit
on a database with a scalar integer of the limit that you want to set as
the request body.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%Content\-Type\fP \-\- \fIapplication/json\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBok\fP (\fIboolean\fP) \-\- Operation status
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid JSON data
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
PUT /db/_revs_limit HTTP/1.1
Accept: application/json
Content\-Length: 5
Content\-Type: application/json
Host: localhost:5984

1000
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 12
Content\-Type: application/json
Date: Mon, 12 Aug 2013 17:47:52 GMT
Server: CouchDB (Erlang/OTP)

{
    "ok": true
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Documents
.sp
Details on how to create, read, update and delete documents within a database.
.SS \fB/db/doc\fP
.INDENT 0.0
.TP
.B HEAD /{db}/{docid}
Returns the HTTP Headers containing a minimal amount of information about
the specified document. The method supports the same query arguments as the
\fBGET /{db}/{docid}\fP method, but only the header information (including
document size, and the revision as an ETag), is returned.
.sp
The \fI\%ETag\fP header shows the current revision for the requested
document, and the \fI\%Content\-Length\fP specifies the length of the
data, if the document were requested in full.
.sp
Adding any of the query arguments (see \fBGET /{db}/{docid}\fP), then the
resulting HTTP Headers will correspond to what would be returned.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBdocid\fP \-\- Document ID
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%If\-None\-Match\fP \-\- Double quoted document\(aqs revision token
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Length\fP \-\- Document size
.IP \(bu 2
\fI\%ETag\fP \-\- Double quoted document\(aqs revision token
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Document exists
.IP \(bu 2
\fI\%304 Not Modified\fP \-\- Document wasn\(aqt modified since specified revision
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Read privilege required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Document not found
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HEAD /db/SpaghettiWithMeatballs HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 660
Content\-Type: application/json
Date: Tue, 13 Aug 2013 21:35:37 GMT
ETag: "12\-151bb8678d45aaa949ec3698ef1c7e78"
Server: CouchDB (Erlang/OTP)
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET /{db}/{docid}
Returns document by the specified \fBdocid\fP from the specified \fBdb\fP\&.
Unless you request a specific revision, the latest revision of the document
will always be returned.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBdocid\fP \-\- Document ID
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fImultipart/related\fP
.IP \(bu 2
\fImultipart/mixed\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%If\-None\-Match\fP \-\- Double quoted document\(aqs revision token
.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBattachments\fP (\fIboolean\fP) \-\- Includes attachments bodies in response.
Default is \fBfalse\fP
.IP \(bu 2
\fBatt_encoding_info\fP (\fIboolean\fP) \-\- Includes encoding information in
attachment stubs if the particular attachment is compressed. Default is
\fBfalse\fP\&.
.IP \(bu 2
\fBatts_since\fP (\fIarray\fP) \-\- Includes attachments only since specified
revisions. Doesn\(aqt includes attachments for specified revisions.
\fIOptional\fP
.IP \(bu 2
\fBconflicts\fP (\fIboolean\fP) \-\- Includes information about conflicts in document.
Default is \fBfalse\fP
.IP \(bu 2
\fBdeleted_conflicts\fP (\fIboolean\fP) \-\- Includes information about deleted
conflicted revisions. Default is \fBfalse\fP
.IP \(bu 2
\fBlatest\fP (\fIboolean\fP) \-\- Forces retrieving latest "leaf" revision, no matter
what \fIrev\fP was requested. Default is \fBfalse\fP
.IP \(bu 2
\fBlocal_seq\fP (\fIboolean\fP) \-\- Includes last update sequence for the
document. Default is \fBfalse\fP
.IP \(bu 2
\fBmeta\fP (\fIboolean\fP) \-\- Acts same as specifying all \fIconflicts\fP,
\fIdeleted_conflicts\fP and \fIrevs_info\fP query parameters. Default is
\fBfalse\fP
.IP \(bu 2
\fBopen_revs\fP (\fIarray\fP) \-\- Retrieves documents of specified leaf revisions.
Additionally, it accepts value as \fBall\fP to return all leaf revisions.
\fIOptional\fP
.IP \(bu 2
\fBrev\fP (\fIstring\fP) \-\- Retrieves document of specified revision. \fIOptional\fP
.IP \(bu 2
\fBrevs\fP (\fIboolean\fP) \-\- Includes list of all known document revisions.
Default is \fBfalse\fP
.IP \(bu 2
\fBrevs_info\fP (\fIboolean\fP) \-\- Includes detailed information for all known
document revisions. Default is \fBfalse\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fImultipart/related\fP
.IP \(bu 2
\fImultipart/mixed\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.IP \(bu 2
\fI\%ETag\fP \-\- Double quoted document\(aqs revision token. Not available when
retrieving conflicts\-related information
.IP \(bu 2
\fI\%Transfer\-Encoding\fP \-\- \fBchunked\fP\&. Available if requested with query
parameter \fBopen_revs\fP
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fB_id\fP (\fIstring\fP) \-\- Document ID
.IP \(bu 2
\fB_rev\fP (\fIstring\fP) \-\- Revision MVCC token
.IP \(bu 2
\fB_deleted\fP (\fIboolean\fP) \-\- Deletion flag. Available if document was removed
.IP \(bu 2
\fB_attachments\fP (\fIobject\fP) \-\- Attachment\(aqs stubs. Available if document has
any attachments
.IP \(bu 2
\fB_conflicts\fP (\fIarray\fP) \-\- List of conflicted revisions. Available if
requested with \fBconflicts=true\fP query parameter
.IP \(bu 2
\fB_deleted_conflicts\fP (\fIarray\fP) \-\- List of deleted conflicted revisions.
Available if requested with \fBdeleted_conflicts=true\fP query parameter
.IP \(bu 2
\fB_local_seq\fP (\fIstring\fP) \-\- Document\(aqs update sequence in current database.
Available if requested with \fBlocal_seq=true\fP query parameter
.IP \(bu 2
\fB_revs_info\fP (\fIarray\fP) \-\- List of objects with information about local
revisions and their status. Available if requested with \fBopen_revs\fP
query parameter
.IP \(bu 2
\fB_revisions\fP (\fIobject\fP) \-\- List of local revision tokens without.
Available if requested with \fBrevs=true\fP query parameter
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%304 Not Modified\fP \-\- Document wasn\(aqt modified since specified revision
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- The format of the request or revision was invalid
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Read privilege required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Document not found
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/SpaghettiWithMeatballs HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 660
Content\-Type: application/json
Date: Tue, 13 Aug 2013 21:35:37 GMT
ETag: "1\-917fa2381192822767f010b95b45325b"
Server: CouchDB (Erlang/OTP)

{
    "_id": "SpaghettiWithMeatballs",
    "_rev": "1\-917fa2381192822767f010b95b45325b",
    "description": "An Italian\-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
    "ingredients": [
        "spaghetti",
        "tomato sauce",
        "meatballs"
    ],
    "name": "Spaghetti with meatballs"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B PUT /{db}/{docid}
The \fI\%PUT\fP method creates a new named document, or creates a new
revision of the existing document. Unlike the \fBPOST /{db}\fP, you must
specify the document ID in the request URL.
.sp
When updating an existing document, the current document revision must be
included in the document (i.e. the request body), as the \fIrev\fP query
parameter, or in the \fIIf\-Match\fP request header.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBdocid\fP \-\- Document ID
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fImultipart/related\fP
.UNINDENT

.IP \(bu 2
\fI\%If\-Match\fP \-\- Document\(aqs revision. Alternative to \fIrev\fP query
parameter or document key. \fIOptional\fP
.IP \(bu 2
\fBX\-Couch\-Full\-Commit\fP \-\- Overrides server\(aqs
\fBcommit policy\fP\&. Possible values
are: \fBfalse\fP and \fBtrue\fP\&. \fIOptional\fP
.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBrev\fP (\fIstring\fP) \-\- Document\(aqs revision if updating an existing document.
Alternative to \fIIf\-Match\fP header or document key. \fIOptional\fP
.IP \(bu 2
\fBbatch\fP (\fIstring\fP) \-\- Stores document in \fIbatch mode\fP\&. Possible values: \fBok\fP\&. \fIOptional\fP
.IP \(bu 2
\fBnew_edits\fP (\fIboolean\fP) \-\- Prevents insertion of a \fIconflicting
document\fP\&. Possible values: \fBtrue\fP (default)
and \fBfalse\fP\&. If \fBfalse\fP, a well\-formed \fB_rev\fP must be included in
the document. \fBnew_edits=false\fP is used by the replicator to insert
documents into the target database even if that leads to the creation
of conflicts. \fIOptional\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.IP \(bu 2
\fImultipart/related\fP
.UNINDENT

.IP \(bu 2
\fI\%ETag\fP \-\- Quoted document\(aqs new revision
.IP \(bu 2
\fI\%Location\fP \-\- Document URI
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBid\fP (\fIstring\fP) \-\- Document ID
.IP \(bu 2
\fBok\fP (\fIboolean\fP) \-\- Operation status
.IP \(bu 2
\fBrev\fP (\fIstring\fP) \-\- Revision MVCC token
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%201 Created\fP \-\- Document created and stored on disk
.IP \(bu 2
\fI\%202 Accepted\fP \-\- Document data accepted, but not yet stored on disk
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid request body or parameters
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Write privileges required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Specified database or document ID doesn\(aqt exists
.IP \(bu 2
\fI\%409 Conflict\fP \-\- Document with the specified ID already exists or specified
revision is not latest for target document
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
PUT /recipes/SpaghettiWithMeatballs HTTP/1.1
Accept: application/json
Content\-Length: 196
Content\-Type: application/json
Host: localhost:5984

{
    "description": "An Italian\-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
    "ingredients": [
        "spaghetti",
        "tomato sauce",
        "meatballs"
    ],
    "name": "Spaghetti with meatballs"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 85
Content\-Type: application/json
Date: Wed, 14 Aug 2013 20:31:39 GMT
ETag: "1\-917fa2381192822767f010b95b45325b"
Location: http://localhost:5984/recipes/SpaghettiWithMeatballs
Server: CouchDB (Erlang/OTP)

{
    "id": "SpaghettiWithMeatballs",
    "ok": true,
    "rev": "1\-917fa2381192822767f010b95b45325b"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B DELETE /{db}/{docid}
Marks the specified document as deleted by adding a field \fB_deleted\fP with
the value \fBtrue\fP\&. Documents with this field will not be returned within
requests anymore, but stay in the database. You must supply the current
(latest) revision, either by using the \fBrev\fP parameter or by using the
\fI\%If\-Match\fP header to specify the revision.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
CouchDB doesn\(aqt completely delete the specified document. Instead, it
leaves a tombstone with very basic information about the document. The
tombstone is required so that the delete action can be replicated
across databases.
.UNINDENT
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fIRetrieving Deleted Documents\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBdocid\fP \-\- Document ID
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%If\-Match\fP \-\- Document\(aqs revision. Alternative to \fIrev\fP query
parameter
.IP \(bu 2
\fBX\-Couch\-Full\-Commit\fP \-\- Overrides server\(aqs
\fBcommit policy\fP\&. Possible values
are: \fBfalse\fP and \fBtrue\fP\&. \fIOptional\fP
.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBrev\fP (\fIstring\fP) \-\- Actual document\(aqs revision
.IP \(bu 2
\fBbatch\fP (\fIstring\fP) \-\- Stores document in \fIbatch mode\fP Possible values: \fBok\fP\&. \fIOptional\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.IP \(bu 2
\fI\%ETag\fP \-\- Double quoted document\(aqs new revision
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBid\fP (\fIstring\fP) \-\- Document ID
.IP \(bu 2
\fBok\fP (\fIboolean\fP) \-\- Operation status
.IP \(bu 2
\fBrev\fP (\fIstring\fP) \-\- Revision MVCC token
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Document successfully removed
.IP \(bu 2
\fI\%202 Accepted\fP \-\- Request was accepted, but changes are not yet stored on disk
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid request body or parameters
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Write privileges required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Specified database or document ID doesn\(aqt exists
.IP \(bu 2
\fI\%409 Conflict\fP \-\- Specified revision is not the latest for target document
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
DELETE /recipes/FishStew?rev=1\-9c65296036141e575d32ba9c034dd3ee HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Alternatively, instead of \fBrev\fP query parameter you may use
\fI\%If\-Match\fP header:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
DELETE /recipes/FishStew HTTP/1.1
Accept: application/json
If\-Match: 1\-9c65296036141e575d32ba9c034dd3ee
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 71
Content\-Type: application/json
Date: Wed, 14 Aug 2013 12:23:13 GMT
ETag: "2\-056f5f44046ecafc08a2bc2b9c229e20"
Server: CouchDB (Erlang/OTP)

{
    "id": "FishStew",
    "ok": true,
    "rev": "2\-056f5f44046ecafc08a2bc2b9c229e20"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B COPY /{db}/{docid}
The \fI\%COPY\fP (which is non\-standard HTTP) copies an existing
document to a new or existing document. Copying a document is only possible
within the same database.
.sp
The source document is specified on the request line, with the
\fI\%Destination\fP header of the request specifying the target
document.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBdocid\fP \-\- Document ID
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%Destination\fP \-\- Destination document. Must contain the target
document ID, and optionally the target document revision, if copying to
an existing document.  See \fICopying to an Existing Document\fP\&.
.IP \(bu 2
\fI\%If\-Match\fP \-\- Source document\(aqs revision. Alternative to \fIrev\fP query
parameter
.IP \(bu 2
\fBX\-Couch\-Full\-Commit\fP \-\- Overrides server\(aqs
\fBcommit policy\fP\&. Possible values
are: \fBfalse\fP and \fBtrue\fP\&. \fIOptional\fP
.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBrev\fP (\fIstring\fP) \-\- Revision to copy from. \fIOptional\fP
.IP \(bu 2
\fBbatch\fP (\fIstring\fP) \-\- Stores document in \fIbatch mode\fP Possible values: \fBok\fP\&. \fIOptional\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.IP \(bu 2
\fI\%ETag\fP \-\- Double quoted document\(aqs new revision
.IP \(bu 2
\fI\%Location\fP \-\- Document URI
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBid\fP (\fIstring\fP) \-\- Document document ID
.IP \(bu 2
\fBok\fP (\fIboolean\fP) \-\- Operation status
.IP \(bu 2
\fBrev\fP (\fIstring\fP) \-\- Revision MVCC token
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%201 Created\fP \-\- Document successfully created
.IP \(bu 2
\fI\%202 Accepted\fP \-\- Request was accepted, but changes are not yet stored on disk
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid request body or parameters
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Read or write privileges required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Specified database, document ID  or revision doesn\(aqt exists
.IP \(bu 2
\fI\%409 Conflict\fP \-\- Document with the specified ID already exists or specified
revision is not latest for target document
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
COPY /recipes/SpaghettiWithMeatballs HTTP/1.1
Accept: application/json
Destination: SpaghettiWithMeatballs_Italian
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 93
Content\-Type: application/json
Date: Wed, 14 Aug 2013 14:21:00 GMT
ETag: "1\-e86fdf912560c2321a5fcefc6264e6d9"
Location: http://localhost:5984/recipes/SpaghettiWithMeatballs_Italian
Server: CouchDB (Erlang/OTP)

{
    "id": "SpaghettiWithMeatballs_Italian",
    "ok": true,
    "rev": "1\-e86fdf912560c2321a5fcefc6264e6d9"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Attachments
.sp
If the document includes attachments, then the returned structure will contain
a summary of the attachments associated with the document, but not the
attachment data itself.
.sp
The JSON for the returned document will include the \fB_attachments\fP field,
with one or more attachment definitions.
.sp
The \fB_attachments\fP object keys are attachments names while values are
information objects with next structure:
.INDENT 0.0
.IP \(bu 2
\fBcontent_type\fP (\fIstring\fP): Attachment MIME type
.IP \(bu 2
\fBdata\fP (\fIstring\fP): Base64\-encoded content. Available if attachment content
is requested by using the following query parameters:
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fBattachments=true\fP when querying a document
.IP \(bu 2
\fBattachments=true&include_docs=true\fP when querying a
\fIchanges feed\fP or a \fIview\fP
.IP \(bu 2
\fBatts_since\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBdigest\fP (\fIstring\fP): Content hash digest.
It starts with prefix which announce hash type (\fBmd5\-\fP) and continues with
Base64\-encoded hash digest
.IP \(bu 2
\fBencoded_length\fP (\fInumber\fP): Compressed attachment size in bytes.
Available if \fBcontent_type\fP is in \fBlist of compressible
types\fP when the attachment was added and the
following query parameters are specified:
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fBatt_encoding_info=true\fP when querying a document
.IP \(bu 2
\fBatt_encoding_info=true&include_docs=true\fP when querying a
\fIchanges feed\fP or a \fIview\fP
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBencoding\fP (\fIstring\fP): Compression codec. Available if \fBcontent_type\fP is
in \fBlist of compressible types\fP when the attachment was added and the
following query parameters are specified:
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fBatt_encoding_info=true\fP when querying a document
.IP \(bu 2
\fBatt_encoding_info=true&include_docs=true\fP when querying a
\fIchanges feed\fP or a \fIview\fP
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBlength\fP (\fInumber\fP): Real attachment size in bytes. Not available if
attachment content requested
.IP \(bu 2
\fBrevpos\fP (\fInumber\fP): Revision \fInumber\fP when attachment was added
.IP \(bu 2
\fBstub\fP (\fIboolean\fP): Has \fBtrue\fP value if object contains stub info and no
content. Otherwise omitted in response
.UNINDENT
.SS Basic Attachments Info
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/SpaghettiWithMeatballs HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 660
Content\-Type: application/json
Date: Tue, 13 Aug 2013 21:35:37 GMT
ETag: "5\-fd96acb3256302bf0dd2f32713161f2a"
Server: CouchDB (Erlang/OTP)

{
    "_attachments": {
        "grandma_recipe.txt": {
            "content_type": "text/plain",
            "digest": "md5\-Ids41vtv725jyrN7iUvMcQ==",
            "length": 1872,
            "revpos": 4,
            "stub": true
        },
        "my_recipe.txt": {
            "content_type": "text/plain",
            "digest": "md5\-198BPPNiT5fqlLxoYYbjBA==",
            "length": 85,
            "revpos": 5,
            "stub": true
        },
        "photo.jpg": {
            "content_type": "image/jpeg",
            "digest": "md5\-7Pv4HW2822WY1r/3WDbPug==",
            "length": 165504,
            "revpos": 2,
            "stub": true
        }
    },
    "_id": "SpaghettiWithMeatballs",
    "_rev": "5\-fd96acb3256302bf0dd2f32713161f2a",
    "description": "An Italian\-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
    "ingredients": [
        "spaghetti",
        "tomato sauce",
        "meatballs"
    ],
    "name": "Spaghetti with meatballs"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Retrieving Attachments Content
.sp
It\(aqs possible to retrieve document with all attached files content by using
\fBattachments=true\fP query parameter:
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /db/pixel?attachments=true HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 553
Content\-Type: application/json
Date: Wed, 14 Aug 2013 11:32:40 GMT
ETag: "4\-f1bcae4bf7bbb92310079e632abfe3f4"
Server: CouchDB (Erlang/OTP)

{
    "_attachments": {
        "pixel.gif": {
            "content_type": "image/gif",
            "data": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
            "digest": "md5\-2JdGiI2i2VELZKnwMers1Q==",
            "revpos": 2
        },
        "pixel.png": {
            "content_type": "image/png",
            "data": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABAQMAAAAl21bKAAAAAXNSR0IArs4c6QAAAANQTFRFAAAAp3o92gAAAAF0Uk5TAEDm2GYAAAABYktHRACIBR1IAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3QgOCx8VHgmcNwAAAApJREFUCNdjYAAAAAIAAeIhvDMAAAAASUVORK5CYII=",
            "digest": "md5\-Dgf5zxgGuchWrve73evvGQ==",
            "revpos": 3
        }
    },
    "_id": "pixel",
    "_rev": "4\-f1bcae4bf7bbb92310079e632abfe3f4"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Or retrieve attached files content since specific revision using \fBatts_since\fP
query parameter:
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/SpaghettiWithMeatballs?atts_since=[%224\-874985bc28906155ba0e2e0538f67b05%22]  HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 760
Content\-Type: application/json
Date: Tue, 13 Aug 2013 21:35:37 GMT
ETag: "5\-fd96acb3256302bf0dd2f32713161f2a"
Server: CouchDB (Erlang/OTP)

{
    "_attachments": {
        "grandma_recipe.txt": {
            "content_type": "text/plain",
            "digest": "md5\-Ids41vtv725jyrN7iUvMcQ==",
            "length": 1872,
            "revpos": 4,
            "stub": true
        },
        "my_recipe.txt": {
            "content_type": "text/plain",
            "data": "MS4gQ29vayBzcGFnaGV0dGkKMi4gQ29vayBtZWV0YmFsbHMKMy4gTWl4IHRoZW0KNC4gQWRkIHRvbWF0byBzYXVjZQo1LiAuLi4KNi4gUFJPRklUIQ==",
            "digest": "md5\-198BPPNiT5fqlLxoYYbjBA==",
            "revpos": 5
        },
        "photo.jpg": {
            "content_type": "image/jpeg",
            "digest": "md5\-7Pv4HW2822WY1r/3WDbPug==",
            "length": 165504,
            "revpos": 2,
            "stub": true
        }
    },
    "_id": "SpaghettiWithMeatballs",
    "_rev": "5\-fd96acb3256302bf0dd2f32713161f2a",
    "description": "An Italian\-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
    "ingredients": [
        "spaghetti",
        "tomato sauce",
        "meatballs"
    ],
    "name": "Spaghetti with meatballs"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Efficient Multiple Attachments Retrieving
.sp
As noted above, retrieving document with \fBattachments=true\fP returns a
large JSON object with all attachments included.  When your document and
files are smaller it\(aqs ok, but if you have attached something bigger like media
files (audio/video), parsing such response might be very expensive.
.sp
To solve this problem, CouchDB allows to get documents in
\fImultipart/related\fP format:
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/secret?attachments=true HTTP/1.1
Accept: multipart/related
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Length: 538
Content\-Type: multipart/related; boundary="e89b3e29388aef23453450d10e5aaed0"
Date: Sat, 28 Sep 2013 08:08:22 GMT
ETag: "2\-c1c6c44c4bc3c9344b037c8690468605"
Server: CouchDB (Erlang OTP)

\-\-e89b3e29388aef23453450d10e5aaed0
Content\-Type: application/json

{"_id":"secret","_rev":"2\-c1c6c44c4bc3c9344b037c8690468605","_attachments":{"recipe.txt":{"content_type":"text/plain","revpos":2,"digest":"md5\-HV9aXJdEnu0xnMQYTKgOFA==","length":86,"follows":true}}}
\-\-e89b3e29388aef23453450d10e5aaed0
Content\-Disposition: attachment; filename="recipe.txt"
Content\-Type: text/plain
Content\-Length: 86

1. Take R
2. Take E
3. Mix with L
4. Add some A
5. Serve with X

\-\-e89b3e29388aef23453450d10e5aaed0\-\-
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In this response the document contains only attachments stub information and
quite short while all attachments goes as separate entities which reduces
memory footprint and processing overhead (you\(aqd noticed, that attachment
content goes as raw data, not in base64 encoding, right?).
.SS Retrieving Attachments Encoding Info
.sp
By using \fBatt_encoding_info=true\fP query parameter you may retrieve
information about compressed attachments size and used codec.
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/SpaghettiWithMeatballs?att_encoding_info=true HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 736
Content\-Type: application/json
Date: Tue, 13 Aug 2013 21:35:37 GMT
ETag: "5\-fd96acb3256302bf0dd2f32713161f2a"
Server: CouchDB (Erlang/OTP)

{
    "_attachments": {
        "grandma_recipe.txt": {
            "content_type": "text/plain",
            "digest": "md5\-Ids41vtv725jyrN7iUvMcQ==",
            "encoded_length": 693,
            "encoding": "gzip",
            "length": 1872,
            "revpos": 4,
            "stub": true
        },
        "my_recipe.txt": {
            "content_type": "text/plain",
            "digest": "md5\-198BPPNiT5fqlLxoYYbjBA==",
            "encoded_length": 100,
            "encoding": "gzip",
            "length": 85,
            "revpos": 5,
            "stub": true
        },
        "photo.jpg": {
            "content_type": "image/jpeg",
            "digest": "md5\-7Pv4HW2822WY1r/3WDbPug==",
            "length": 165504,
            "revpos": 2,
            "stub": true
        }
    },
    "_id": "SpaghettiWithMeatballs",
    "_rev": "5\-fd96acb3256302bf0dd2f32713161f2a",
    "description": "An Italian\-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
    "ingredients": [
        "spaghetti",
        "tomato sauce",
        "meatballs"
    ],
    "name": "Spaghetti with meatballs"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Creating Multiple Attachments
.sp
To create a document with multiple attachments with single request you need
just inline base64 encoded attachments data into the document body:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "_id":"multiple_attachments",
  "_attachments":
  {
    "foo.txt":
    {
      "content_type":"text\e/plain",
      "data": "VGhpcyBpcyBhIGJhc2U2NCBlbmNvZGVkIHRleHQ="
    },

   "bar.txt":
    {
      "content_type":"text\e/plain",
      "data": "VGhpcyBpcyBhIGJhc2U2NCBlbmNvZGVkIHRleHQ="
    }
  }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Alternatively, you can upload a document with attachments more efficiently in
\fImultipart/related\fP format. This avoids having to Base64\-encode
the attachments, saving CPU and bandwidth. To do this, set the
\fI\%Content\-Type\fP header of the \fBPUT /{db}/{docid}\fP request to
\fImultipart/related\fP\&.
.sp
The first MIME body is the document itself, which should have its own
\fI\%Content\-Type\fP of \fIapplication/json"\fP\&. It also should
include  an \fB_attachments\fP metadata object in which each attachment object
has a key \fBfollows\fP with value \fBtrue\fP\&.
.sp
The subsequent MIME bodies are the attachments.
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
PUT /temp/somedoc HTTP/1.1
Accept: application/json
Content\-Length: 372
Content\-Type: multipart/related;boundary="abc123"
Host: localhost:5984
User\-Agent: HTTPie/0.6.0

\-\-abc123
Content\-Type: application/json

{
    "body": "This is a body.",
    "_attachments": {
        "foo.txt": {
            "follows": true,
            "content_type": "text/plain",
            "length": 21
        },
        "bar.txt": {
            "follows": true,
            "content_type": "text/plain",
            "length": 20
        }
    }
}

\-\-abc123

this is 21 chars long
\-\-abc123

this is 20 chars lon
\-\-abc123\-\-
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 72
Content\-Type: application/json
Date: Sat, 28 Sep 2013 09:13:24 GMT
ETag: "1\-5575e26acdeb1df561bb5b70b26ba151"
Location: http://localhost:5984/temp/somedoc
Server: CouchDB (Erlang OTP)

{
    "id": "somedoc",
    "ok": true,
    "rev": "1\-5575e26acdeb1df561bb5b70b26ba151"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Getting a List of Revisions
.sp
You can obtain a list of the revisions for a given document by adding
the \fBrevs=true\fP parameter to the request URL:
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/SpaghettiWithMeatballs?revs=true  HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 584
Content\-Type: application/json
Date: Wed, 14 Aug 2013 11:38:26 GMT
ETag: "5\-fd96acb3256302bf0dd2f32713161f2a"
Server: CouchDB (Erlang/OTP)

{
    "_id": "SpaghettiWithMeatballs",
    "_rev": "8\-6f5ad8db0f34af24a6e0984cd1a6cfb9",
    "_revisions": {
        "ids": [
            "6f5ad8db0f34af24a6e0984cd1a6cfb9",
            "77fba3a059497f51ec99b9b478b569d2",
            "136813b440a00a24834f5cb1ddf5b1f1",
            "fd96acb3256302bf0dd2f32713161f2a",
            "874985bc28906155ba0e2e0538f67b05",
            "0de77a37463bf391d14283e626831f2e",
            "d795d1b924777732fdea76538c558b62",
            "917fa2381192822767f010b95b45325b"
        ],
        "start": 8
    },
    "description": "An Italian\-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
    "ingredients": [
        "spaghetti",
        "tomato sauce",
        "meatballs"
    ],
    "name": "Spaghetti with meatballs"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The returned JSON structure includes the original document, including a
\fB_revisions\fP structure that includes the revision information in next form:
.INDENT 0.0
.IP \(bu 2
\fBids\fP (\fIarray\fP): Array of valid revision IDs, in reverse order
(latest first)
.IP \(bu 2
\fBstart\fP (\fInumber\fP): Prefix number for the latest revision
.UNINDENT
.SS Obtaining an Extended Revision History
.sp
You can get additional information about the revisions for a given document by
supplying the \fBrevs_info\fP argument to the query:
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/SpaghettiWithMeatballs?revs_info=true  HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 802
Content\-Type: application/json
Date: Wed, 14 Aug 2013 11:40:55 GMT
Server: CouchDB (Erlang/OTP)

{
    "_id": "SpaghettiWithMeatballs",
    "_rev": "8\-6f5ad8db0f34af24a6e0984cd1a6cfb9",
    "_revs_info": [
        {
            "rev": "8\-6f5ad8db0f34af24a6e0984cd1a6cfb9",
            "status": "available"
        },
        {
            "rev": "7\-77fba3a059497f51ec99b9b478b569d2",
            "status": "deleted"
        },
        {
            "rev": "6\-136813b440a00a24834f5cb1ddf5b1f1",
            "status": "available"
        },
        {
            "rev": "5\-fd96acb3256302bf0dd2f32713161f2a",
            "status": "missing"
        },
        {
            "rev": "4\-874985bc28906155ba0e2e0538f67b05",
            "status": "missing"
        },
        {
            "rev": "3\-0de77a37463bf391d14283e626831f2e",
            "status": "missing"
        },
        {
            "rev": "2\-d795d1b924777732fdea76538c558b62",
            "status": "missing"
        },
        {
            "rev": "1\-917fa2381192822767f010b95b45325b",
            "status": "missing"
        }
    ],
    "description": "An Italian\-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
    "ingredients": [
        "spaghetti",
        "tomato sauce",
        "meatballs"
    ],
    "name": "Spaghetti with meatballs"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The returned document contains \fB_revs_info\fP field with extended revision
information, including the availability and status of each revision. This array
field contains objects with following structure:
.INDENT 0.0
.IP \(bu 2
\fBrev\fP (\fIstring\fP): Full revision string
.IP \(bu 2
\fBstatus\fP (\fIstring\fP): Status of the revision.
Maybe one of:
.INDENT 2.0
.IP \(bu 2
\fBavailable\fP: Revision is available for retrieving with \fIrev\fP query
parameter
.IP \(bu 2
\fBmissing\fP: Revision is not available
.IP \(bu 2
\fBdeleted\fP: Revision belongs to deleted document
.UNINDENT
.UNINDENT
.SS Obtaining a Specific Revision
.sp
To get a specific revision, use the \fBrev\fP argument to the request, and
specify the full revision number. The specified revision of the document will
be returned, including a \fB_rev\fP field specifying the revision that was
requested.
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/SpaghettiWithMeatballs?rev=6\-136813b440a00a24834f5cb1ddf5b1f1  HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 271
Content\-Type: application/json
Date: Wed, 14 Aug 2013 11:40:55 GMT
Server: CouchDB (Erlang/OTP)

{
    "_id": "SpaghettiWithMeatballs",
    "_rev": "6\-136813b440a00a24834f5cb1ddf5b1f1",
    "description": "An Italian\-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
    "ingredients": [
        "spaghetti",
        "tomato sauce",
        "meatballs"
    ],
    "name": "Spaghetti with meatballs"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Retrieving Deleted Documents
.sp
CouchDB doesn\(aqt actually delete documents via \fBDELETE /{db}/{docid}\fP\&.
Instead, it leaves tombstone with very basic information about the
document. If you just \fBGET /{db}/{docid}\fP CouchDB returns \fI\%404 Not Found\fP
response:
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/FishStew  HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 404 Object Not Found
Cache\-Control: must\-revalidate
Content\-Length: 41
Content\-Type: application/json
Date: Wed, 14 Aug 2013 12:23:27 GMT
Server: CouchDB (Erlang/OTP)

{
    "error": "not_found",
    "reason": "deleted"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
However, you may retrieve document\(aqs tombstone by using \fBrev\fP query parameter
with \fBGET /{db}/{docid}\fP request:
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/FishStew?rev=2\-056f5f44046ecafc08a2bc2b9c229e20  HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 79
Content\-Type: application/json
Date: Wed, 14 Aug 2013 12:30:22 GMT
ETag: "2\-056f5f44046ecafc08a2bc2b9c229e20"
Server: CouchDB (Erlang/OTP)

{
    "_deleted": true,
    "_id": "FishStew",
    "_rev": "2\-056f5f44046ecafc08a2bc2b9c229e20"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Updating an Existing Document
.sp
To update an existing document you must specify the current revision
number within the \fB_rev\fP parameter.
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
PUT /recipes/SpaghettiWithMeatballs HTTP/1.1
Accept: application/json
Content\-Length: 258
Content\-Type: application/json
Host: localhost:5984

{
    "_rev": "1\-917fa2381192822767f010b95b45325b",
    "description": "An Italian\-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
    "ingredients": [
        "spaghetti",
        "tomato sauce",
        "meatballs"
    ],
    "name": "Spaghetti with meatballs",
    "serving": "hot"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Alternatively, you can supply the current revision number in the \fBIf\-Match\fP
HTTP header of the request:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
PUT /recipes/SpaghettiWithMeatballs HTTP/1.1
Accept: application/json
Content\-Length: 258
Content\-Type: application/json
If\-Match: 1\-917fa2381192822767f010b95b45325b
Host: localhost:5984

{
    "description": "An Italian\-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
    "ingredients": [
        "spaghetti",
        "tomato sauce",
        "meatballs"
    ],
    "name": "Spaghetti with meatballs",
    "serving": "hot"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 85
Content\-Type: application/json
Date: Wed, 14 Aug 2013 20:33:56 GMT
ETag: "2\-790895a73b63fb91dd863388398483dd"
Location: http://localhost:5984/recipes/SpaghettiWithMeatballs
Server: CouchDB (Erlang/OTP)

{
    "id": "SpaghettiWithMeatballs",
    "ok": true,
    "rev": "2\-790895a73b63fb91dd863388398483dd"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Copying from a Specific Revision
.sp
To copy \fIfrom\fP a specific version, use the \fBrev\fP argument to the query string
or \fI\%If\-Match\fP:
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
COPY /recipes/SpaghettiWithMeatballs HTTP/1.1
Accept: application/json
Destination: SpaghettiWithMeatballs_Original
If\-Match: 1\-917fa2381192822767f010b95b45325b
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 93
Content\-Type: application/json
Date: Wed, 14 Aug 2013 14:21:00 GMT
ETag: "1\-917fa2381192822767f010b95b45325b"
Location: http://localhost:5984/recipes/SpaghettiWithMeatballs_Original
Server: CouchDB (Erlang/OTP)

{
    "id": "SpaghettiWithMeatballs_Original",
    "ok": true,
    "rev": "1\-917fa2381192822767f010b95b45325b"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Copying to an Existing Document
.sp
To copy to an existing document, you must specify the current revision string
for the target document by appending the \fBrev\fP parameter to the
\fI\%Destination\fP header string.
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
COPY /recipes/SpaghettiWithMeatballs?rev=8\-6f5ad8db0f34af24a6e0984cd1a6cfb9 HTTP/1.1
Accept: application/json
Destination: SpaghettiWithMeatballs_Original?rev=1\-917fa2381192822767f010b95b45325b
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 93
Content\-Type: application/json
Date: Wed, 14 Aug 2013 14:21:00 GMT
ETag: "2\-62e778c9ec09214dd685a981dcc24074""
Location: http://localhost:5984/recipes/SpaghettiWithMeatballs_Original
Server: CouchDB (Erlang/OTP)

{
    "id": "SpaghettiWithMeatballs_Original",
    "ok": true,
    "rev": "2\-62e778c9ec09214dd685a981dcc24074"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fB/db/doc/attachment\fP
.INDENT 0.0
.TP
.B HEAD /{db}/{docid}/{attname}
Returns the HTTP headers containing a minimal amount of information about
the specified attachment. The method supports the same query arguments as
the \fBGET /{db}/{docid}/{attname}\fP method, but only the header information
(including attachment size, encoding and the MD5 hash as an
\fI\%ETag\fP), is returned.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBdocid\fP \-\- Document ID
.IP \(bu 2
\fBattname\fP \-\- Attachment name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%If\-Match\fP \-\- Document\(aqs revision. Alternative to \fIrev\fP query
parameter
.IP \(bu 2
\fI\%If\-None\-Match\fP \-\- Attachment\(aqs base64 encoded MD5 binary digest.
\fIOptional\fP
.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBrev\fP (\fIstring\fP) \-\- Document\(aqs revision. \fIOptional\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\-Ranges\fP \-\- \fIRange request aware\fP\&. Used for attachments with
\fIapplication/octet\-stream\fP content type
.IP \(bu 2
\fI\%Content\-Encoding\fP \-\- Used compression codec. Available if
attachment\(aqs \fBcontent_type\fP is in \fBlist of compressible
types\fP
.IP \(bu 2
\fI\%Content\-Length\fP \-\- Attachment size. If compression codec was used,
this value is about compressed size, not actual
.IP \(bu 2
\fI\%ETag\fP \-\- Double quoted base64 encoded MD5 binary digest
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Attachment exists
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Read privilege required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Specified database, document or attachment was not found
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HEAD /recipes/SpaghettiWithMeatballs/recipe.txt HTTP/1.1
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Accept\-Ranges: none
Cache\-Control: must\-revalidate
Content\-Encoding: gzip
Content\-Length: 100
Content\-Type: text/plain
Date: Thu, 15 Aug 2013 12:42:42 GMT
ETag: "vVa/YgiE1+Gh0WfoFJAcSg=="
Server: CouchDB (Erlang/OTP)
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET /{db}/{docid}/{attname}
Returns the file attachment associated with the document. The raw data of
the associated attachment is returned (just as if you were accessing a
static file. The returned \fI\%Content\-Type\fP will be the same as the
content type set when the document attachment was submitted into the
database.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBdocid\fP \-\- Document ID
.IP \(bu 2
\fBattname\fP \-\- Attachment name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%If\-Match\fP \-\- Document\(aqs revision. Alternative to \fIrev\fP query
parameter
.IP \(bu 2
\fI\%If\-None\-Match\fP \-\- Attachment\(aqs base64 encoded MD5 binary digest.
\fIOptional\fP
.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBrev\fP (\fIstring\fP) \-\- Document\(aqs revision. \fIOptional\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\-Ranges\fP \-\- \fIRange request aware\fP\&. Used for attachments with
\fIapplication/octet\-stream\fP
.IP \(bu 2
\fI\%Content\-Encoding\fP \-\- Used compression codec. Available if
attachment\(aqs \fBcontent_type\fP is in \fBlist of compressible
types\fP
.IP \(bu 2
\fI\%Content\-Length\fP \-\- Attachment size. If compression codec is used,
this value is about compressed size, not actual
.IP \(bu 2
\fI\%ETag\fP \-\- Double quoted base64 encoded MD5 binary digest
.UNINDENT
.TP
.B Response
Stored content
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Attachment exists
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Read privilege required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Specified database, document or attachment was not found
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B PUT /{db}/{docid}/{attname}
Uploads the supplied content as an attachment to the specified document.
The attachment name provided must be a URL encoded string. You must supply
the Content\-Type header, and for an existing document you must also supply
either the \fBrev\fP query argument or the \fI\%If\-Match\fP HTTP header. If
the revision is omitted, a new, otherwise empty document will be created
with the provided attachment, or a conflict will occur.
.sp
If case when uploading an attachment using an existing attachment name,
CouchDB will update the corresponding stored content of the database. Since
you must supply the revision information to add an attachment to the
document, this serves as validation to update the existing attachment.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Uploading an attachment updates the corresponding document revision.
Revisions are tracked for the parent document, not individual
attachments.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBdocid\fP \-\- Document ID
.IP \(bu 2
\fBattname\fP \-\- Attachment name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- Attachment MIME type. \fIRequired\fP
.IP \(bu 2
\fI\%If\-Match\fP \-\- Document revision. Alternative to \fIrev\fP query parameter
.IP \(bu 2
\fBX\-Couch\-Full\-Commit\fP \-\- Overrides server\(aqs
\fBcommit policy\fP\&. Possible values
are: \fBfalse\fP and \fBtrue\fP\&. \fIOptional\fP
.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBrev\fP (\fIstring\fP) \-\- Document revision. \fIOptional\fP
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBid\fP (\fIstring\fP) \-\- Document ID
.IP \(bu 2
\fBok\fP (\fIboolean\fP) \-\- Operation status
.IP \(bu 2
\fBrev\fP (\fIstring\fP) \-\- Revision MVCC token
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Attachment successfully removed
.IP \(bu 2
\fI\%202 Accepted\fP \-\- Request was accepted, but changes are not yet stored on disk
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid request body or parameters
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Write privileges required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Specified database, document or attachment was not found
.IP \(bu 2
\fI\%409 Conflict\fP \-\- Document\(aqs revision wasn\(aqt specified or it\(aqs not the latest
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
PUT /recipes/SpaghettiWithMeatballs/recipe.txt HTTP/1.1
Accept: application/json
Content\-Length: 86
Content\-Type: text/plain
Host: localhost:5984
If\-Match: 1\-917fa2381192822767f010b95b45325b

1. Cook spaghetti
2. Cook meatballs
3. Mix them
4. Add tomato sauce
5. ...
6. PROFIT!
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 85
Content\-Type: application/json
Date: Thu, 15 Aug 2013 12:38:04 GMT
ETag: "2\-ce91aed0129be8f9b0f650a2edcfd0a4"
Location: http://localhost:5984/recipes/SpaghettiWithMeatballs/recipe.txt
Server: CouchDB (Erlang/OTP)

{
    "id": "SpaghettiWithMeatballs",
    "ok": true,
    "rev": "2\-ce91aed0129be8f9b0f650a2edcfd0a4"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B DELETE /{db}/{docid}/{attname}
Deletes the attachment with filename \fB{attname}\fP of the specified \fBdoc\fP\&.
You must supply the \fBrev\fP query parameter or \fI\%If\-Match\fP with the
current revision to delete the attachment.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Deleting an attachment updates the corresponding document revision.
Revisions are tracked for the parent document, not individual attachments.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBdocid\fP \-\- Document ID
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.IP \(bu 2
\fI\%If\-Match\fP \-\- Document revision. Alternative to \fIrev\fP query parameter
.IP \(bu 2
\fBX\-Couch\-Full\-Commit\fP \-\- Overrides server\(aqs
\fBcommit policy\fP\&. Possible values
are: \fBfalse\fP and \fBtrue\fP\&. \fIOptional\fP
.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBrev\fP (\fIstring\fP) \-\- Document revision. \fIRequired\fP
.IP \(bu 2
\fBbatch\fP (\fIstring\fP) \-\- Store changes in \fIbatch mode\fP Possible values: \fBok\fP\&. \fIOptional\fP
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.IP \(bu 2
\fI\%ETag\fP \-\- Double quoted document\(aqs new revision
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBid\fP (\fIstring\fP) \-\- Document ID
.IP \(bu 2
\fBok\fP (\fIboolean\fP) \-\- Operation status
.IP \(bu 2
\fBrev\fP (\fIstring\fP) \-\- Revision MVCC token
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Attachment successfully removed
.IP \(bu 2
\fI\%202 Accepted\fP \-\- Request was accepted, but changes are not yet stored on disk
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid request body or parameters
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Write privileges required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Specified database, document or attachment was not found
.IP \(bu 2
\fI\%409 Conflict\fP \-\- Document\(aqs revision wasn\(aqt specified or it\(aqs not the latest
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
DELETE /recipes/SpaghettiWithMeatballs?rev=6\-440b2dd39c20413045748b42c6aba6e2 HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Alternatively, instead of \fBrev\fP query parameter you may use
\fI\%If\-Match\fP header:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
DELETE /recipes/SpaghettiWithMeatballs HTTP/1.1
Accept: application/json
If\-Match: 6\-440b2dd39c20413045748b42c6aba6e2
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 85
Content\-Type: application/json
Date: Wed, 14 Aug 2013 12:23:13 GMT
ETag: "7\-05185cf5fcdf4b6da360af939431d466"
Server: CouchDB (Erlang/OTP)

{
    "id": "SpaghettiWithMeatballs",
    "ok": true,
    "rev": "7\-05185cf5fcdf4b6da360af939431d466"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS HTTP Range Requests
.sp
HTTP allows you to specify byte ranges for requests. This allows the
implementation of resumable downloads and skippable audio and video streams
alike. This is available for all attachments inside CouchDB.
.sp
This is just a real quick run through how this looks under the hood. Usually,
you will have larger binary files to serve from CouchDB, like MP3s and videos,
but to make things a little more obvious, I use a text file here (Note that I
use the \fIapplication/octet\-stream\fP :header\(gaContent\-Type\(ga instead of
\fItext/plain\fP).
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
shell> cat file.txt
My hovercraft is full of eels!
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now let\(aqs store this text file as an attachment in CouchDB. First, we create a
database:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
shell> curl \-X PUT http://127.0.0.1:5984/test
{"ok":true}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Then we create a new document and the file attachment in one go:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
shell> curl \-X PUT http://127.0.0.1:5984/test/doc/file.txt \e
            \-H "Content\-Type: application/octet\-stream" \-d@file.txt
{"ok":true,"id":"doc","rev":"1\-287a28fa680ae0c7fb4729bf0c6e0cf2"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now we can request the whole file easily:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
shell> curl \-X GET http://127.0.0.1:5984/test/doc/file.txt
My hovercraft is full of eels!
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
But say we only want the first 13 bytes:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
shell> curl \-X GET http://127.0.0.1:5984/test/doc/file.txt \e
            \-H "Range: bytes=0\-12"
My hovercraft
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
HTTP supports many ways to specify single and even multiple byte
ranges. Read all about it in \fI\%RFC 2616\fP\&.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Databases that have been created with CouchDB 1.0.2 or earlier will support
range requests in 2.2, but they are using a less\-optimal algorithm.
If you plan to make heavy use of this feature, make sure to compact your
database with CouchDB 2.2 to take advantage of a better algorithm to
find byte ranges.
.UNINDENT
.UNINDENT
.SS Design Documents
.sp
In CouchDB, design documents provide the main interface for building a CouchDB
application. The design document defines the views used to extract information
from CouchDB through one or more views. Design documents are created within
your CouchDB instance in the same way as you create database documents, but the
content and definition of the documents is different. Design Documents are
named using an ID defined with the design document URL path, and this URL can
then be used to access the database contents.
.sp
Views and lists operate together to provide automated (and formatted) output
from your database.
.SS \fB/db/_design/design\-doc\fP
.INDENT 0.0
.TP
.B HEAD /{db}/_design/{ddoc}
Returns the HTTP Headers containing a minimal amount of information about
the specified design document.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fBHEAD /{db}/{docid}\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET /{db}/_design/{ddoc}
Returns the contents of the design document specified with the name of the
design document and from the specified database from the URL. Unless you
request a specific revision, the latest revision of the document will
always be returned.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fBGET /{db}/{docid}\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B PUT /{db}/_design/{ddoc}
The \fI\%PUT\fP method creates a new named design document, or creates
a new revision of the existing design document.
.sp
The design documents have some agreement upon their fields and structure.
Currently it is the following:
.INDENT 7.0
.IP \(bu 2
\fBlanguage\fP (\fIstring\fP): Defines \fIQuery Server\fP
\fBkey\fP to process design document
functions
.IP \(bu 2
\fBoptions\fP (\fIobject\fP): View\(aqs default options
.IP \(bu 2
\fBfilters\fP (\fIobject\fP): \fIFilter functions\fP definition
.IP \(bu 2
\fBlists\fP (\fIobject\fP): \fIList functions\fP definition
.IP \(bu 2
\fBrewrites\fP (\fIarray\fP or \fIstring\fP): Rewrite rules definition
.IP \(bu 2
\fBshows\fP (\fIobject\fP): \fIShow functions\fP definition
.IP \(bu 2
\fBupdates\fP (\fIobject\fP): \fIUpdate functions\fP definition
.IP \(bu 2
\fBvalidate_doc_update\fP (\fIstring\fP): \fIValidate document update\fP function source
.IP \(bu 2
\fBviews\fP (\fIobject\fP): \fIView functions\fP definition.
.UNINDENT
.sp
Note, that for \fBfilters\fP, \fBlists\fP, \fBshows\fP and \fBupdates\fP fields
objects are mapping of function name to string function source code. For
\fBviews\fP mapping is the same except that values are objects with \fBmap\fP
and \fBreduce\fP (optional) keys which also contains functions source code.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fBPUT /{db}/{docid}\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B DELETE /{db}/_design/{ddoc}
Deletes the specified document from the database. You must supply the
current (latest) revision, either by using the \fBrev\fP parameter to
specify the revision.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fBDELETE /{db}/{docid}\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B COPY /{db}/_design/{ddoc}
The \fI\%COPY\fP (which is non\-standard HTTP) copies an existing design
document to a new or existing one.
.sp
Given that view indexes on disk are named after their MD5 hash of the
view definition, and that a \fICOPY\fP operation won\(aqt actually change
that definition, the copied views won\(aqt have to be reconstructed.
Both views will be served from the same index on disk.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fBCOPY /{db}/{docid}\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_design/design\-doc/attachment\fP
.INDENT 0.0
.TP
.B HEAD /{db}/_design/{ddoc}/{attname}
Returns the HTTP headers containing a minimal amount of information about
the specified attachment.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fBHEAD /{db}/{docid}/{attname}\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET /{db}/_design/{ddoc}/{attname}
Returns the file attachment associated with the design document. The raw
data of the associated attachment is returned (just as if you were
accessing a static file.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fBGET /{db}/{docid}/{attname}\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B PUT /{db}/_design/{ddoc}/{attname}
Uploads the supplied content as an attachment to the specified design
document. The attachment name provided must be a URL encoded string.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fBPUT /{db}/{docid}/{attname}\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B DELETE /{db}/_design/{ddoc}/{attname}
Deletes the attachment of the specified design document.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fBDELETE /{db}/{docid}/{attname}\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_design/design\-doc/_info\fP
.INDENT 0.0
.TP
.B GET /{db}/_design/{ddoc}/_info
Obtains information about the specified design document, including the
index, index size and current status of the design document and associated
index information.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBddoc\fP \-\- Design document name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBname\fP (\fIstring\fP) \-\- Design document name
.IP \(bu 2
\fBview_index\fP (\fIobject\fP) \-\- \fIapi/ddoc/view_index_info\fP
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/_design/recipe/_info HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Length: 263
Content\-Type: application/json
Date: Sat, 17 Aug 2013 12:54:17 GMT
Server: CouchDB (Erlang/OTP)

{
    "name": "recipe",
    "view_index": {
        "compact_running": false,
        "data_size": 926691,
        "disk_size": 1982704,
        "language": "python",
        "purge_seq": 0,
        "signature": "a59a1bb13fdf8a8a584bc477919c97ac",
        "update_seq": 12397,
        "updater_running": false,
        "waiting_clients": 0,
        "waiting_commit": false
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS View Index Information
.sp
The response from \fBGET /{db}/_design/{ddoc}/_info\fP contains
\fBview_index\fP (\fIobject\fP) field with the next structure:
.INDENT 0.0
.IP \(bu 2
\fBcompact_running\fP (\fIboolean\fP):  Indicates whether a compaction routine
is currently running on the view
.IP \(bu 2
\fBdata_size\fP (\fInumber\fP): Actual size in bytes of the view
.IP \(bu 2
\fBdisk_size\fP (\fInumber\fP): Size in bytes of the view as stored on disk
.IP \(bu 2
\fBlanguage\fP (\fIstring\fP): Language for the defined views
.IP \(bu 2
\fBpurge_seq\fP (\fInumber\fP): The purge sequence that has been processed
.IP \(bu 2
\fBsignature\fP (\fIstring\fP): MD5 signature of the views for the design document
.IP \(bu 2
\fBupdate_seq\fP (\fInumber\fP / \fIstring\fP): The update sequence of the corresponding
database that has been indexed
.IP \(bu 2
\fBupdater_running\fP (\fIboolean\fP): Indicates if the view is currently
being updated
.IP \(bu 2
\fBwaiting_clients\fP (\fInumber\fP): Number of clients waiting on views from
this design document
.IP \(bu 2
\fBwaiting_commit\fP (\fIboolean\fP): Indicates if there are outstanding commits
to the underlying database that need to processed
.UNINDENT
.SS \fB/db/_design/design\-doc/_view/view\-name\fP
.INDENT 0.0
.TP
.B GET /{db}/_design/{ddoc}/_view/{view}
Executes the specified view function from the specified design document.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBddoc\fP \-\- Design document name
.IP \(bu 2
\fBview\fP \-\- View function name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBconflicts\fP (\fIboolean\fP) \-\- Include \fIconflicts\fP information in response.
Ignored if \fIinclude_docs\fP isn\(aqt \fBtrue\fP\&. Default is \fBfalse\fP\&.
.IP \(bu 2
\fBdescending\fP (\fIboolean\fP) \-\- Return the documents in descending order by key.
Default is \fBfalse\fP\&.
.IP \(bu 2
\fBendkey\fP (\fIjson\fP) \-\- Stop returning records when the specified key is
reached.
.IP \(bu 2
\fBend_key\fP (\fIjson\fP) \-\- Alias for \fIendkey\fP param
.IP \(bu 2
\fBendkey_docid\fP (\fIstring\fP) \-\- Stop returning records when the specified
document ID is reached. Ignored if \fIendkey\fP is not set.
.IP \(bu 2
\fBend_key_doc_id\fP (\fIstring\fP) \-\- Alias for \fIendkey_docid\fP\&.
.IP \(bu 2
\fBgroup\fP (\fIboolean\fP) \-\- Group the results using the reduce function to a
group or single row. Implies \fIreduce\fP is \fBtrue\fP and the maximum
\fIgroup_level\fP\&. Default is \fBfalse\fP\&.
.IP \(bu 2
\fBgroup_level\fP (\fInumber\fP) \-\- Specify the group level to be used. Implies
\fIgroup\fP is \fBtrue\fP\&.
.IP \(bu 2
\fBinclude_docs\fP (\fIboolean\fP) \-\- Include the associated document with each row.
Default is \fBfalse\fP\&.
.IP \(bu 2
\fBattachments\fP (\fIboolean\fP) \-\- Include the Base64\-encoded content of
\fIattachments\fP in the documents that are
included if \fIinclude_docs\fP is \fBtrue\fP\&. Ignored if \fIinclude_docs\fP isn\(aqt
\fBtrue\fP\&. Default is \fBfalse\fP\&.
.IP \(bu 2
\fBatt_encoding_info\fP (\fIboolean\fP) \-\- Include encoding information in
attachment stubs if \fIinclude_docs\fP is \fBtrue\fP and the particular
attachment is compressed. Ignored if \fIinclude_docs\fP isn\(aqt \fBtrue\fP\&.
Default is \fBfalse\fP\&.
.IP \(bu 2
\fBinclusive_end\fP (\fIboolean\fP) \-\- Specifies whether the specified end key
should be included in the result. Default is \fBtrue\fP\&.
.IP \(bu 2
\fBkey\fP (\fIjson\fP) \-\- Return only documents that match the specified key.
.IP \(bu 2
\fBkeys\fP (\fIjson\-array\fP) \-\- Return only documents where the key matches one of
the keys specified in the array.
.IP \(bu 2
\fBlimit\fP (\fInumber\fP) \-\- Limit the number of the returned documents to the
specified number.
.IP \(bu 2
\fBreduce\fP (\fIboolean\fP) \-\- Use the reduction function. Default is \fBtrue\fP when
a reduce function is defined.
.IP \(bu 2
\fBskip\fP (\fInumber\fP) \-\- Skip this number of records before starting to return
the results. Default is \fB0\fP\&.
.IP \(bu 2
\fBsorted\fP (\fIboolean\fP) \-\- Sort returned rows (see \fISorting Returned Rows\fP). Setting this to \fBfalse\fP offers a performance
boost. The \fItotal_rows\fP and \fIoffset\fP fields are not available when this
is set to \fBfalse\fP\&. Default is \fBtrue\fP\&.
.IP \(bu 2
\fBstable\fP (\fIboolean\fP) \-\- Whether or not the view results should be returned
from a stable set of shards. Default is \fBfalse\fP\&.
.IP \(bu 2
\fBstale\fP (\fIstring\fP) \-\- Allow the results from a stale view to be used.
Supported values: \fBok\fP, \fBupdate_after\fP and \fBfalse\fP\&.
\fBok\fP is equivalent to \fBstable=true&update=false\fP\&.
\fBupdate_after\fP is equivalent to \fBstable=true&update=lazy\fP\&.
\fBfalse\fP is equivalent to \fBstable=false&update=true\fP\&.
.IP \(bu 2
\fBstartkey\fP (\fIjson\fP) \-\- Return records starting with the specified key.
.IP \(bu 2
\fBstart_key\fP (\fIjson\fP) \-\- Alias for \fIstartkey\fP\&.
.IP \(bu 2
\fBstartkey_docid\fP (\fIstring\fP) \-\- Return records starting with the specified
document ID. Ignored if \fBstartkey\fP is not set.
.IP \(bu 2
\fBstart_key_doc_id\fP (\fIstring\fP) \-\- Alias for \fIstartkey_docid\fP param
.IP \(bu 2
\fBupdate\fP (\fIstring\fP) \-\- Whether or not the view in question should be updated
prior to responding to the user. Supported values: \fBtrue\fP, \fBfalse\fP,
\fBlazy\fP\&. Default is \fBtrue\fP\&.
.IP \(bu 2
\fBupdate_seq\fP (\fIboolean\fP) \-\- Whether to include in the response an
\fIupdate_seq\fP value indicating the sequence id of the database the view
reflects. Default is \fBfalse\fP\&.
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.IP \(bu 2
\fI\%ETag\fP \-\- Response signature
.IP \(bu 2
\fI\%Transfer\-Encoding\fP \-\- \fBchunked\fP
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\fInumber\fP) \-\- Offset where the document list started.
.IP \(bu 2
\fBrows\fP (\fIarray\fP) \-\- Array of view row objects. By default the information
returned contains only the document ID and revision.
.IP \(bu 2
\fBtotal_rows\fP (\fInumber\fP) \-\- Number of documents in the database/view.
.IP \(bu 2
\fBupdate_seq\fP (\fIobject\fP) \-\- Current update sequence for the database.
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid request
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Read permission required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Specified database, design document or view is missed
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/_design/ingredients/_view/by_name HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Wed, 21 Aug 2013 09:12:06 GMT
ETag: "2FOLSBSW4O6WB798XU4AQYA9B"
Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked

{
    "offset": 0,
    "rows": [
        {
            "id": "SpaghettiWithMeatballs",
            "key": "meatballs",
            "value": 1
        },
        {
            "id": "SpaghettiWithMeatballs",
            "key": "spaghetti",
            "value": 1
        },
        {
            "id": "SpaghettiWithMeatballs",
            "key": "tomato sauce",
            "value": 1
        }
    ],
    "total_rows": 3
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Changed in version 1.6.0: added \fBattachments\fP and \fBatt_encoding_info\fP
parameters

.sp
Changed in version 2.0.0: added \fBsorted\fP parameter

.sp
Changed in version 2.1.0: added \fBstable\fP and \fBupdate\fP parameters

.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Using the \fBattachments\fP parameter to include attachments in view results
is not recommended for large attachment sizes. Also note that the
Base64\-encoding that is used leads to a 33% overhead (i.e. one third) in
transfer size for attachments.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B POST /{db}/_design/{ddoc}/_view/{view}
Executes the specified view function from the specified design document.
Unlike \fBGET /{db}/_design/{ddoc}/_view/{view}\fP for accessing views, the
\fI\%POST\fP method supports the specification
of explicit keys to be retrieved from the view results. The remainder of
the \fI\%POST\fP view functionality is identical to the
\fBGET /{db}/_design/{ddoc}/_view/{view}\fP API.
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /recipes/_design/ingredients/_view/by_name HTTP/1.1
Accept: application/json
Content\-Length: 37
Host: localhost:5984

{
    "keys": [
        "meatballs",
        "spaghetti"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Wed, 21 Aug 2013 09:14:13 GMT
ETag: "6R5NM8E872JIJF796VF7WI3FZ"
Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked

{
    "offset": 0,
    "rows": [
        {
            "id": "SpaghettiWithMeatballs",
            "key": "meatballs",
            "value": 1
        },
        {
            "id": "SpaghettiWithMeatballs",
            "key": "spaghetti",
            "value": 1
        }
    ],
    "total_rows": 3
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS View Options
.sp
There are two view indexing options that can be defined in a design document
as boolean properties of an \fBoptions\fP object. Unlike the others querying
options, these aren\(aqt URL parameters because they take effect when the view
index is generated, not when it\(aqs accessed:
.INDENT 0.0
.IP \(bu 2
\fBlocal_seq\fP (\fIboolean\fP): Makes documents\(aq local sequence numbers available
to map functions (as a \fB_local_seq\fP document property)
.IP \(bu 2
\fBinclude_design\fP (\fIboolean\fP): Allows map functions to be called on design
documents as well as regular documents
.UNINDENT
.SS Querying Views and Indexes
.sp
The definition of a view within a design document also creates an index based
on the key information defined within each view. The production and use of the
index significantly increases the speed of access and searching or selecting
documents from the view.
.sp
However, the index is not updated when new documents are added or modified in
the database. Instead, the index is generated or updated, either when the view
is first accessed, or when the view is accessed after a document has been
updated. In each case, the index is updated before the view query is executed
against the database.
.sp
View indexes are updated incrementally in the following situations:
.INDENT 0.0
.IP \(bu 2
A new document has been added to the database.
.IP \(bu 2
A document has been deleted from the database.
.IP \(bu 2
A document in the database has been updated.
.UNINDENT
.sp
View indexes are rebuilt entirely when the view definition changes. To achieve
this, a \(aqfingerprint\(aq of the view definition is created when the design
document is updated. If the fingerprint changes, then the view indexes are
entirely rebuilt. This ensures that changes to the view definitions are
reflected in the view indexes.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
View index rebuilds occur when one view from the same the view group (i.e.
all the views defined within a single a design document) has been
determined as needing a rebuild. For example, if if you have a design
document with different views, and you update the database, all three view
indexes within the design document will be updated.
.UNINDENT
.UNINDENT
.sp
Because the view is updated when it has been queried, it can result in a delay
in returned information when the view is accessed, especially if there are a
large number of documents in the database and the view index does not exist.
There are a number of ways to mitigate, but not completely eliminate, these
issues. These include:
.INDENT 0.0
.IP \(bu 2
Create the view definition (and associated design documents) on your database
before allowing insertion or updates to the documents. If this is allowed
while the view is being accessed, the index can be updated incrementally.
.IP \(bu 2
Manually force a view request from the database. You can do this either
before users are allowed to use the view, or you can access the view manually
after documents are added or updated.
.IP \(bu 2
Use the \fIchanges feed\fP to monitor for changes to the
database and then access the view to force the corresponding view index to be
updated.
.UNINDENT
.sp
None of these can completely eliminate the need for the indexes to be rebuilt
or updated when the view is accessed, but they may lessen the effects on
end\-users of the index update affecting the user experience.
.sp
Another alternative is to allow users to access a \(aqstale\(aq version of the view
index, rather than forcing the index to be updated and displaying the updated
results. Using a stale view may not return the latest information, but will
return the results of the view query using an existing version of the index.
.sp
For example, to access the existing stale view \fBby_recipe\fP in the
\fBrecipes\fP design document:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
http://localhost:5984/recipes/_design/recipes/_view/by_recipe?stale=ok
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Accessing a stale view:
.INDENT 0.0
.IP \(bu 2
Does not trigger a rebuild of the view indexes, even if there have been
changes since the last access.
.IP \(bu 2
Returns the current version of the view index, if a current version exists.
.IP \(bu 2
Returns an empty result set if the given view index does exist.
.UNINDENT
.sp
As an alternative, you use the \fBupdate_after\fP value to the \fBstale\fP
parameter. This causes the view to be returned as a stale view, but for the
update process to be triggered after the view information has been returned to
the client.
.sp
In addition to using stale views, you can also make use of the \fBupdate_seq\fP
query argument. Using this query argument generates the view information
including the update sequence of the database from which the view was
generated. The returned value can be compared this to the current update
sequence exposed in the database information (returned by \fBGET /{db}\fP).
.SS Sorting Returned Rows
.sp
Each element within the returned array is sorted using native UTF\-8 sorting
according to the contents of the key portion of the emitted content. The basic
order of output is as follows:
.INDENT 0.0
.IP \(bu 2
\fBnull\fP
.IP \(bu 2
\fBfalse\fP
.IP \(bu 2
\fBtrue\fP
.IP \(bu 2
Numbers
.IP \(bu 2
Text (case sensitive, lowercase first)
.IP \(bu 2
Arrays (according to the values of each element, in order)
.IP \(bu 2
Objects (according to the values of keys, in key order)
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /db/_design/test/_view/sorting HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Wed, 21 Aug 2013 10:09:25 GMT
ETag: "8LA1LZPQ37B6R9U8BK9BGQH27"
Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked

{
    "offset": 0,
    "rows": [
        {
            "id": "dummy\-doc",
            "key": null,
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": false,
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": true,
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": 0,
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": 1,
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": 10,
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": 42,
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": "10",
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": "hello",
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": "Hello",
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": "\eu043f\eu0440\eu0438\eu0432\eu0435\eu0442",
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": [],
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": [
                1,
                2,
                3
            ],
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": [
                2,
                3
            ],
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": [
                3
            ],
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": {},
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": {
                "foo": "bar"
            },
            "value": null
        }
    ],
    "total_rows": 17
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can reverse the order of the returned view information by using the
\fBdescending\fP query value set to true:
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /db/_design/test/_view/sorting?descending=true HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Wed, 21 Aug 2013 10:09:25 GMT
ETag: "Z4N468R15JBT98OM0AMNSR8U"
Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked

{
    "offset": 0,
    "rows": [
        {
            "id": "dummy\-doc",
            "key": {
                "foo": "bar"
            },
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": {},
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": [
                3
            ],
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": [
                2,
                3
            ],
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": [
                1,
                2,
                3
            ],
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": [],
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": "\eu043f\eu0440\eu0438\eu0432\eu0435\eu0442",
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": "Hello",
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": "hello",
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": "10",
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": 42,
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": 10,
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": 1,
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": 0,
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": true,
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": false,
            "value": null
        },
        {
            "id": "dummy\-doc",
            "key": null,
            "value": null
        }
    ],
    "total_rows": 17
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Sorting order and startkey/endkey
.sp
The sorting direction is applied before the filtering applied using the
\fBstartkey\fP and \fBendkey\fP query arguments. For example the following query:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET http://couchdb:5984/recipes/_design/recipes/_view/by_ingredient?startkey=%22carrots%22&endkey=%22egg%22 HTTP/1.1
Accept: application/json
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will operate correctly when listing all the matching entries between
\fBcarrots\fP and \fBegg\fP\&. If the order of output is reversed with the
\fBdescending\fP query argument, the view request will return no entries:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/_design/recipes/_view/by_ingredient?descending=true&startkey=%22carrots%22&endkey=%22egg%22 HTTP/1.1
Accept: application/json
Host: localhost:5984

{
    "total_rows" : 26453,
    "rows" : [],
    "offset" : 21882
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The results will be empty because the entries in the view are reversed before
the key filter is applied, and therefore the \fBendkey\fP of “egg” will be seen
before the \fBstartkey\fP of “carrots”, resulting in an empty list.
.sp
Instead, you should reverse the values supplied to the \fBstartkey\fP and
\fBendkey\fP parameters to match the descending sorting applied to the keys.
Changing the previous example to:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/_design/recipes/_view/by_ingredient?descending=true&startkey=%22egg%22&endkey=%22carrots%22 HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Raw collation
.sp
By default CouchDB using \fI\%ICU\fP driver for sorting view results. It\(aqs possible
use binary collation instead for faster view builds where Unicode collation is
not important.
.sp
To use raw collation add \fB"collation": "raw"\fP key\-value pair to the design
documents \fBoptions\fP object at the root level. After that, views will be
regenerated and new order applied.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fIviews/collation\fP
.UNINDENT
.UNINDENT
.SS Using Limits and Skipping Rows
.sp
By default, views return all results. That\(aqs ok when the number of results is
small, but this may lead to problems when there are billions results, since the
client may have to read them all and consume all available memory.
.sp
But it\(aqs possible to reduce output result rows by specifying \fBlimit\fP query
parameter. For example, retrieving the list of recipes using the \fBby_title\fP
view and limited to 5 returns only 5 records, while there are total 2667
records in view:
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/_design/recipes/_view/by_title?limit=5 HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Wed, 21 Aug 2013 09:14:13 GMT
ETag: "9Q6Q2GZKPH8D5F8L7PB6DBSS9"
Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked

{
    "offset" : 0,
    "rows" : [
        {
            "id" : "3\-tiersalmonspinachandavocadoterrine",
            "key" : "3\-tier salmon, spinach and avocado terrine",
            "value" : [
                null,
                "3\-tier salmon, spinach and avocado terrine"
            ]
        },
        {
            "id" : "Aberffrawcake",
            "key" : "Aberffraw cake",
            "value" : [
                null,
                "Aberffraw cake"
            ]
        },
        {
            "id" : "Adukiandorangecasserole\-microwave",
            "key" : "Aduki and orange casserole \- microwave",
            "value" : [
                null,
                "Aduki and orange casserole \- microwave"
            ]
        },
        {
            "id" : "Aioli\-garlicmayonnaise",
            "key" : "Aioli \- garlic mayonnaise",
            "value" : [
                null,
                "Aioli \- garlic mayonnaise"
            ]
        },
        {
            "id" : "Alabamapeanutchicken",
            "key" : "Alabama peanut chicken",
            "value" : [
                null,
                "Alabama peanut chicken"
            ]
        }
    ],
    "total_rows" : 2667
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To omit some records you may use \fBskip\fP query parameter:
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/_design/recipes/_view/by_title?limit=3&skip=2 HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Wed, 21 Aug 2013 09:14:13 GMT
ETag: "H3G7YZSNIVRRHO5FXPE16NJHN"
Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked

{
    "offset" : 2,
    "rows" : [
        {
            "id" : "Adukiandorangecasserole\-microwave",
            "key" : "Aduki and orange casserole \- microwave",
            "value" : [
                null,
                "Aduki and orange casserole \- microwave"
            ]
        },
        {
            "id" : "Aioli\-garlicmayonnaise",
            "key" : "Aioli \- garlic mayonnaise",
            "value" : [
                null,
                "Aioli \- garlic mayonnaise"
            ]
        },
        {
            "id" : "Alabamapeanutchicken",
            "key" : "Alabama peanut chicken",
            "value" : [
                null,
                "Alabama peanut chicken"
            ]
        }
    ],
    "total_rows" : 2667
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Using \fBlimit\fP and \fBskip\fP parameters is not recommended for results
pagination. Read \fIpagination recipe\fP why it\(aqs so
and how to make it better.
.UNINDENT
.UNINDENT
.SS Sending multiple queries to a view
.sp
New in version 2.2.

.INDENT 0.0
.TP
.B POST /{db}/_design/{ddoc}/_view/{view}/queries
Executes multiple specified view queries against the view function
from the specified design document.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBddoc\fP \-\- Design document name
.IP \(bu 2
\fBview\fP \-\- View function name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.UNINDENT
.TP
.B Request JSON Object
.INDENT 7.0
.IP \(bu 2
\fBqueries\fP \-\- An array of query objects with fields for the
parameters of each individual view query to be executed. The field names
and their meaning are the same as the query parameters of a
regular \fIview request\fP\&.
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.IP \(bu 2
\fI\%ETag\fP \-\- Response signature
.IP \(bu 2
\fI\%Transfer\-Encoding\fP \-\- \fBchunked\fP
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBresults\fP (\fIarray\fP) \-\- An array of result objects \- one for each query. Each
result object contains the same fields as the response to a regular
\fIview request\fP\&.
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid request
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Read permission required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Specified database, design document or view is missing
.IP \(bu 2
\fI\%500 Internal Server Error\fP \-\- View function execution error
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST /recipes/_design/recipes/_view/by_title/queries HTTP/1.1
Content\-Type: application/json
Accept: application/json
Host: localhost:5984

{
    "queries": [
        {
            "keys": [
                "meatballs",
                "spaghetti"
            ]
        },
        {
            "limit": 3,
            "skip": 2
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Wed, 20 Dec 2016 11:17:07 GMT
ETag: "1H8RGBCK3ABY6ACDM7ZSC30QK"
Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked

{
    "results" : [
        {
            "offset": 0,
            "rows": [
                {
                    "id": "SpaghettiWithMeatballs",
                    "key": "meatballs",
                    "value": 1
                },
                {
                    "id": "SpaghettiWithMeatballs",
                    "key": "spaghetti",
                    "value": 1
                },
                {
                    "id": "SpaghettiWithMeatballs",
                    "key": "tomato sauce",
                    "value": 1
                }
            ],
            "total_rows": 3
        },
        {
            "offset" : 2,
            "rows" : [
                {
                    "id" : "Adukiandorangecasserole\-microwave",
                    "key" : "Aduki and orange casserole \- microwave",
                    "value" : [
                        null,
                        "Aduki and orange casserole \- microwave"
                    ]
                },
                {
                    "id" : "Aioli\-garlicmayonnaise",
                    "key" : "Aioli \- garlic mayonnaise",
                    "value" : [
                        null,
                        "Aioli \- garlic mayonnaise"
                    ]
                },
                {
                    "id" : "Alabamapeanutchicken",
                    "key" : "Alabama peanut chicken",
                    "value" : [
                        null,
                        "Alabama peanut chicken"
                    ]
                }
            ],
            "total_rows" : 2667
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Using POST to /{db}/_design/{ddoc}/_view/{view} is still supported and
allows you to get multiple query result to a view. This is described
below. However, this is not encouraged after using POST to
/{db}/_design/{ddoc}/_view/{view}/queries is introduced.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B POST /{db}/_design/{ddoc}/_view/{view}
Executes multiple specified view queries against the view function
from the specified design document.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBddoc\fP \-\- Design document name
.IP \(bu 2
\fBview\fP \-\- View function name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.UNINDENT

.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBqueries\fP (\fIjson\fP) \-\- An array of query objects with fields for the
parameters of each individual view query to be executed. The field names
and their meaning are the same as the query parameters of a
regular \fIview request\fP\&.
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.IP \(bu 2
\fI\%ETag\fP \-\- Response signature
.IP \(bu 2
\fI\%Transfer\-Encoding\fP \-\- \fBchunked\fP
.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBresults\fP (\fIarray\fP) \-\- An array of result objects \- one for each query. Each
result object contains the same fields as the response to a regular
\fIview request\fP\&.
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%400 Bad Request\fP \-\- Invalid request
.IP \(bu 2
\fI\%401 Unauthorized\fP \-\- Read permission required
.IP \(bu 2
\fI\%404 Not Found\fP \-\- Specified database, design document or view is missed
.IP \(bu 2
\fI\%500 Internal Server Error\fP \-\- View function execution error
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
POST /recipes/_design/recipes/_view/by_title HTTP/1.1
Content\-Type: application/json
Accept: application/json
Host: localhost:5984

{
    "queries": [
        {
            "keys": [
                "meatballs",
                "spaghetti"
            ]
        },
        {
            "limit": 3,
            "skip": 2
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Wed, 07 Sep 2016 11:17:07 GMT
ETag: "1H8RGBCK3ABY6ACDM7ZSC30QK"
Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked

{
    "results" : [
        {
            "offset": 0,
            "rows": [
                {
                    "id": "SpaghettiWithMeatballs",
                    "key": "meatballs",
                    "value": 1
                },
                {
                    "id": "SpaghettiWithMeatballs",
                    "key": "spaghetti",
                    "value": 1
                },
                {
                    "id": "SpaghettiWithMeatballs",
                    "key": "tomato sauce",
                    "value": 1
                }
            ],
            "total_rows": 3
        },
        {
            "offset" : 2,
            "rows" : [
                {
                    "id" : "Adukiandorangecasserole\-microwave",
                    "key" : "Aduki and orange casserole \- microwave",
                    "value" : [
                        null,
                        "Aduki and orange casserole \- microwave"
                    ]
                },
                {
                    "id" : "Aioli\-garlicmayonnaise",
                    "key" : "Aioli \- garlic mayonnaise",
                    "value" : [
                        null,
                        "Aioli \- garlic mayonnaise"
                    ]
                },
                {
                    "id" : "Alabamapeanutchicken",
                    "key" : "Alabama peanut chicken",
                    "value" : [
                        null,
                        "Alabama peanut chicken"
                    ]
                }
            ],
            "total_rows" : 2667
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fB/db/_design/design\-doc/_show/show\-name\fP
.INDENT 0.0
.TP
.B GET /{db}/_design/{ddoc}/_show/{func}
.UNINDENT
.INDENT 0.0
.TP
.B POST /{db}/_design/{ddoc}/_show/{func}
Applies \fIshow function\fP for \fInull\fP document.
.sp
The request and response parameters are depended upon function
implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBddoc\fP \-\- Design document name
.IP \(bu 2
\fBfunc\fP \-\- Show function name
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%ETag\fP \-\- Response signature
.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBformat\fP (\fIstring\fP) \-\- Format of the returned response.
Used by \fBprovides()\fP function
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%500 Internal Server Error\fP \-\- Query server error
.UNINDENT
.UNINDENT
.sp
\fBFunction\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc, req) {
    if (!doc) {
        return {body: "no doc"}
    } else {
        return {body: doc.description}
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/_design/recipe/_show/description HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Length: 6
Content\-Type: text/html; charset=utf\-8
Date: Wed, 21 Aug 2013 12:34:07 GMT
Etag: "7Z2TO7FPEMZ0F4GH0RJCRIOAU"
Server: CouchDB (Erlang/OTP)
Vary: Accept

no doc
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_design/design\-doc/_show/show\-name/doc\-id\fP
.INDENT 0.0
.TP
.B GET /{db}/_design/{ddoc}/_show/{func}/{docid}
.UNINDENT
.INDENT 0.0
.TP
.B POST /{db}/_design/{ddoc}/_show/{func}/{docid}
Applies \fIshow function\fP for the specified document.
.sp
The request and response parameters are depended upon function
implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBddoc\fP \-\- Design document name
.IP \(bu 2
\fBfunc\fP \-\- Show function name
.IP \(bu 2
\fBdocid\fP \-\- Document ID
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%ETag\fP \-\- Response signature
.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBformat\fP (\fIstring\fP) \-\- Format of the returned response.
Used by \fBprovides()\fP function
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%500 Internal Server Error\fP \-\- Query server error
.UNINDENT
.UNINDENT
.sp
\fBFunction\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc, req) {
    if (!doc) {
        return {body: "no doc"}
    } else {
        return {body: doc.description}
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/_design/recipe/_show/description/SpaghettiWithMeatballs HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Length: 88
Content\-Type: text/html; charset=utf\-8
Date: Wed, 21 Aug 2013 12:38:08 GMT
Etag: "8IEBO8103EI98HDZL5Z4I1T0C"
Server: CouchDB (Erlang/OTP)
Vary: Accept

An Italian\-American dish that usually consists of spaghetti, tomato sauce and meatballs.
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_design/design\-doc/_list/list\-name/view\-name\fP
.INDENT 0.0
.TP
.B GET /{db}/_design/{ddoc}/_list/{func}/{view}
.UNINDENT
.INDENT 0.0
.TP
.B POST /{db}/_design/{ddoc}/_list/{func}/{view}
Applies \fIlist function\fP for the \fIview function\fP from the same design document.
.sp
The request and response parameters are depended upon function
implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBddoc\fP \-\- Design document name
.IP \(bu 2
\fBfunc\fP \-\- List function name
.IP \(bu 2
\fBview\fP \-\- View function name
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%ETag\fP \-\- Response signature
.IP \(bu 2
\fI\%Transfer\-Encoding\fP \-\- \fBchunked\fP
.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBformat\fP (\fIstring\fP) \-\- Format of the returned response.
Used by \fBprovides()\fP function
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%500 Internal Server Error\fP \-\- Query server error
.UNINDENT
.UNINDENT
.sp
\fBFunction\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
function(head, req) {
    var row = getRow();
    if (!row){
        return \(aqno ingredients\(aq
    }
    send(row.key);
    while(row=getRow()){
        send(\(aq, \(aq + row.key);
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/_design/recipe/_list/ingredients/by_name HTTP/1.1
Accept: text/plain
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Type: text/plain; charset=utf\-8
Date: Wed, 21 Aug 2013 12:49:15 GMT
Etag: "D52L2M1TKQYDD1Y8MEYJR8C84"
Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked
Vary: Accept

meatballs, spaghetti, tomato sauce
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_design/design\-doc/_list/list\-name/other\-ddoc/view\-name\fP
.INDENT 0.0
.TP
.B GET /{db}/_design/{ddoc}/_list/{func}/{other\-ddoc}/{view}
.UNINDENT
.INDENT 0.0
.TP
.B POST /{db}/_design/{ddoc}/_list/{func}/{other\-ddoc}/{view}
Applies \fIlist function\fP for the \fIview function\fP from the other design document.
.sp
The request and response parameters are depended upon function
implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBddoc\fP \-\- Design document name
.IP \(bu 2
\fBfunc\fP \-\- List function name
.IP \(bu 2
\fBother\-ddoc\fP \-\- Other design document name that holds view function
.IP \(bu 2
\fBview\fP \-\- View function name
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%ETag\fP \-\- Response signature
.IP \(bu 2
\fI\%Transfer\-Encoding\fP \-\- \fBchunked\fP
.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBformat\fP (\fIstring\fP) \-\- Format of the returned response.
Used by \fBprovides()\fP function
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.IP \(bu 2
\fI\%500 Internal Server Error\fP \-\- Query server error
.UNINDENT
.UNINDENT
.sp
\fBFunction\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
function(head, req) {
    var row = getRow();
    if (!row){
        return \(aqno ingredients\(aq
    }
    send(row.key);
    while(row=getRow()){
        send(\(aq, \(aq + row.key);
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /recipes/_design/ingredient/_list/ingredients/recipe/by_ingredient?key="spaghetti" HTTP/1.1
Accept: text/plain
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Type: text/plain; charset=utf\-8
Date: Wed, 21 Aug 2013 12:49:15 GMT
Etag: "5L0975X493R0FB5Z3043POZHD"
Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked
Vary: Accept

spaghetti
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_design/design\-doc/_update/update\-name\fP
.INDENT 0.0
.TP
.B POST /{db}/_design/{ddoc}/_update/{func}
Executes \fIupdate function\fP on server side for \fBnull\fP
document.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBddoc\fP \-\- Design document name
.IP \(bu 2
\fBfunc\fP \-\- Update function name
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fBX\-Couch\-Id\fP \-\- Created/updated document\(aqs ID
.IP \(bu 2
\fBX\-Couch\-Update\-Newrev\fP \-\- Created/updated document\(aqs revision
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- No document was created or updated
.IP \(bu 2
\fI\%201 Created\fP \-\- Document was created or updated
.IP \(bu 2
\fI\%500 Internal Server Error\fP \-\- Query server error
.UNINDENT
.UNINDENT
.sp
\fBFunction\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc, req) {
    if (!doc){
      return [null, {\(aqcode\(aq: 400,
                     \(aqjson\(aq: {\(aqerror\(aq: \(aqmissed\(aq,
                              \(aqreason\(aq: \(aqno document to update\(aq}}]
    } else {
        doc.ingredients.push(req.body);
        return [doc, {\(aqjson\(aq: {\(aqstatus\(aq: \(aqok\(aq}}];
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /recipes/_design/recipe/_update/ingredients HTTP/1.1
Accept: application/json
Content\-Length: 10
Content\-Type: application/json
Host: localhost:5984

"something"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 404 Object Not Found
Cache\-Control: must\-revalidate
Content\-Length: 52
Content\-Type: application/json
Date: Wed, 21 Aug 2013 14:00:58 GMT
Server: CouchDB (Erlang/OTP)

{
    "error": "missed",
    "reason": "no document to update"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_design/design\-doc/_update/update\-name/doc\-id\fP
.INDENT 0.0
.TP
.B PUT /{db}/_design/{ddoc}/_update/{func}/{docid}
Executes \fIupdate function\fP on server side for the specified
document.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.IP \(bu 2
\fBddoc\fP \-\- Design document name
.IP \(bu 2
\fBfunc\fP \-\- Update function name
.IP \(bu 2
\fBdocid\fP \-\- Document ID
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fBX\-Couch\-Id\fP \-\- Created/updated document\(aqs ID
.IP \(bu 2
\fBX\-Couch\-Update\-Newrev\fP \-\- Created/updated document\(aqs revision
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- No document was created or updated
.IP \(bu 2
\fI\%201 Created\fP \-\- Document was created or updated
.IP \(bu 2
\fI\%500 Internal Server Error\fP \-\- Query server error
.UNINDENT
.UNINDENT
.sp
\fBFunction\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
function(doc, req) {
    if (!doc){
        return [null, {\(aqcode\(aq: 400,
                       \(aqjson\(aq: {\(aqerror\(aq: \(aqmissed\(aq,
                                \(aqreason\(aq: \(aqno document to update\(aq}}]
    } else {
        doc.ingredients.push(req.body);
        return [doc, {\(aqjson\(aq: {\(aqstatus\(aq: \(aqok\(aq}}];
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /recipes/_design/recipe/_update/ingredients/SpaghettiWithMeatballs HTTP/1.1
Accept: application/json
Content\-Length: 5
Content\-Type: application/json
Host: localhost:5984

"love"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 201 Created
Cache\-Control: must\-revalidate
Content\-Length: 16
Content\-Type: application/json
Date: Wed, 21 Aug 2013 14:11:34 GMT
Server: CouchDB (Erlang/OTP)
X\-Couch\-Id: SpaghettiWithMeatballs
X\-Couch\-Update\-NewRev: 12\-a5e099df5720988dae90c8b664496baf

{
    "status": "ok"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_design/design\-doc/_rewrite/path\fP
.INDENT 0.0
.TP
.B ANY /{db}/_design/{ddoc}/_rewrite/{path}
Rewrites the specified path by rules defined in the specified design
document. The rewrite rules are defined in \fIarray\fP or \fIstring\fP field
of the design document called \fBrewrites\fP\&.
.UNINDENT
.SS Rewrite section a is stringified function
.INDENT 0.0
.INDENT 3.5
\fI\(aqRewrite using JS\(aq feature was introduced in CouchDB 1.7\fP\&. If the
\fBrewrites\fP field is a stringified function, query server is used
to pre\-process and route a request.
.sp
The function receives truncated version of req object as a single argument
and must return object, containing new information about request.
.sp
Returned object should include properties as:
.INDENT 0.0
.IP \(bu 2
\fBpath\fP (\fIstring\fP): Rewritten path, mandatory if no \fIcode\fP provided
.IP \(bu 2
\fBquery\fP (\fIarray\fP): Rewritten query, if omitted original query keys
are used
.IP \(bu 2
\fBheaders\fP (\fIobject\fP): Rewritten headers. If omitted, original
request headers are used
.IP \(bu 2
\fBmethod\fP (\fIstring\fP): Method of rewritten request. If omitted,
original request method is used
.IP \(bu 2
\fBcode\fP (\fInumber\fP): Returned code. If provided, request is not rewritten
and user immediately receives response with the code
.IP \(bu 2
\fBbody\fP (\fIstring\fP): Body for POST/PUT requests, or for returning to user
if \fIcode\fP field provided. If POST/PUT request is being rewritten and no
body returned by rewrite function, original request body is used
.UNINDENT
.sp
\fBExample A\fP\&. Restricting access.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function(req2) {
  var path = req2.path.slice(4),
    isWrite = /^(put|post|delete)$/i.test(req2.method),
    isFin = req2.userCtx.roles.indexOf("finance")>\-1;
  if (path[0] == "finance" && isWrite && !isFin) {
    // Deny writes to  DB "finance" for users
    // having no "finance" role
    return {
      code: 403,
      body:JSON.stringify({
        error:"forbidden".
        reason:"You are not allowed to modify docs in this DB"
      })
    }
  }
  // Pass through all other requests
  return {path:"../../../"+path.join("/")}
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBExample B\fP\&. Different replies for JSON and HTML requests.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
  function(req2) {
    var path = req2.path.slice(4),
      h = headers,
      wantsJson = (h.Accept||"").indexOf("application/json")>\-1,
      reply = {};
    if (!wantsJson) {
      // Here we should prepare reply object
      // for plain HTML pages
    } else {
      // Pass through JSON requests
      reply.path = "../../../"+path.join("/");
    }
    return reply;
  }

The req2 object rewrites is called with is a slightly truncated version
of req object, provided for list and update functions. Fields *info*,
*uuid*, *id* and *form* are removed to speed up request processing.
All other fields of the req object are in place.
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Rewrite section is an array
.INDENT 0.0
.INDENT 3.5
Each rule is an \fIobject\fP with next structure:
.INDENT 0.0
.IP \(bu 2
\fBfrom\fP (\fIstring\fP): The path rule used to bind current URI to the rule.
It uses pattern matching for that.
.IP \(bu 2
\fBto\fP (\fIstring\fP): Rule to rewrite a URL. It can contain variables
depending on  binding variables discovered during pattern matching and
query args (URL args and from the query member)
.IP \(bu 2
\fBmethod\fP (\fIstring\fP): HTTP request method to bind the request method to
the rule. Default is \fB"*"\fP
.IP \(bu 2
\fBquery\fP (\fIobject\fP): Query args you want to define they can contain
dynamic variable by binding the key
.UNINDENT
.sp
The \fBto\(ga\(gaand \(ga\(gafrom\fP paths may contains string patterns with leading
\fB:\fP or \fB*\fP characters.
.sp
For example: \fB/somepath/:var/*\fP
.INDENT 0.0
.IP \(bu 2
This path is converted in Erlang list by splitting \fB/\fP
.IP \(bu 2
Each \fBvar\fP are converted in atom
.IP \(bu 2
\fB""\fP are converted to \fB\(aq\(aq\fP atom
.IP \(bu 2
The pattern matching is done by splitting \fB/\fP in request URL in a list
of token
.IP \(bu 2
A string pattern will match equal token
.IP \(bu 2
The star atom (\fB\(aq*\(aq\fP in single quotes) will match any number of tokens,
but may only be present as the last \fIpathterm\fP in a \fIpathspec\fP
.IP \(bu 2
If all tokens are matched and all \fIpathterms\fP are used, then the
\fIpathspec\fP matches
.UNINDENT
.sp
The pattern matching is done by first matching the HTTP request method to a
rule. \fBmethod\fP is equal to \fB"*"\fP by default, and will match any HTTP
method. It will then try to match the path to one rule. If no rule matches,
then a \fI\%404 Not Found\fP response returned.
.sp
Once a rule is found we rewrite the request URL using the \fBto\fP and
\fBquery\fP fields. The identified token are matched to the rule and will
replace var. If \fB\(aq*\(aq\fP is found in the rule it will contain the remaining
part if it exists.
.sp
Examples:
.TS
center;
|l|l|l|l|.
_
T{
Rule
T}	T{
URL
T}	T{
Rewrite to
T}	T{
Tokens
T}
_
T{
.INDENT 0.0
.TP
.B {"from": "/a",
"to": "/some"}
.UNINDENT
T}	T{
/a
T}	T{
/some
T}	T{
T}
_
T{
.INDENT 0.0
.TP
.B {"from": "/a/*",
"to": "/some/*}
.UNINDENT
T}	T{
/a/b/c
T}	T{
/some/b/c
T}	T{
T}
_
T{
.INDENT 0.0
.TP
.B {"from": "/a/b",
"to": "/some"}
.UNINDENT
T}	T{
/a/b?k=v
T}	T{
/some?k=v
T}	T{
k=v
T}
_
T{
.INDENT 0.0
.TP
.B {"from": "/a/b",
"to": "/some/:var"}
.UNINDENT
T}	T{
/a/b
T}	T{
/some/b?var=b
T}	T{
var=b
T}
_
T{
{"from": "/a/:foo/",
"to": "/some/:foo/"}
T}	T{
/a/b/c
T}	T{
/some/b/c?foo=b
T}	T{
foo=b
T}
_
T{
.INDENT 0.0
.TP
.B {"from": "/a/:foo",
"to": "/some",
"query": { "k": ":foo" }}
.UNINDENT
T}	T{
/a/b
T}	T{
/some/?k=b&foo=b
T}	T{
foo=b
T}
_
T{
.INDENT 0.0
.TP
.B {"from": "/a",
"to": "/some/:foo"}
.UNINDENT
T}	T{
/a?foo=b
T}	T{
/some/?b&foo=b
T}	T{
foo=b
T}
_
.TE
.sp
Request method, header, query parameters, request payload and response body
are depended on endpoint to which URL will be rewritten.
.INDENT 0.0
.TP
.B param db
Database name
.TP
.B param ddoc
Design document name
.TP
.B param path
URL path to rewrite
.UNINDENT
.UNINDENT
.UNINDENT
.SS Local (non\-replicating) Documents
.sp
The Local (non\-replicating) document interface allows you to create local
documents that are not replicated to other databases. These documents can be
used to hold configuration or other information that is required specifically
on the local CouchDB instance.
.sp
Local documents have the following limitations:
.INDENT 0.0
.IP \(bu 2
Local documents are not replicated to other databases.
.IP \(bu 2
Local documents are not output by views, or the \fIapi/db/all_docs\fP view.
.UNINDENT
.sp
From CouchDB 2.0, Local documents can be listed by using the /db/_local_docs
endpoint.
.sp
Local documents can be used when you want to store configuration or
other information for the current (local) instance of a given database.
.sp
A list of the available methods and URL paths are provided below:
.TS
center;
|l|l|l|.
_
T{
Method
T}	T{
Path
T}	T{
Description
T}
_
T{
GET,
POST
T}	T{
/db/_local_docs
T}	T{
Returns a list of all the
non\-replicated documents in the database
T}
_
T{
GET
T}	T{
/db/_local/id
T}	T{
Returns the latest revision of the
non\-replicated document
T}
_
T{
PUT
T}	T{
/db/_local/id
T}	T{
Inserts a new version of the
non\-replicated document
T}
_
T{
DELETE
T}	T{
/db/_local/id
T}	T{
Deletes the non\-replicated document
T}
_
T{
COPY
T}	T{
/db/_local/id
T}	T{
Copies the non\-replicated document
T}
_
.TE
.SS \fB/db/_local_docs\fP
.INDENT 0.0
.TP
.B GET /{db}/_local_docs
Returns a JSON structure of all of the local documents in a given
database. The information is returned as a JSON structure containing meta
information about the return structure, including a list of all local
documents and basic contents, consisting the ID, revision and key. The key
is the from the local document\(aqs \fB_id\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP \-\- Database name
.UNINDENT
.TP
.B Request Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Accept\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain\fP
.UNINDENT

.UNINDENT
.TP
.B Query Parameters
.INDENT 7.0
.IP \(bu 2
\fBconflicts\fP (\fIboolean\fP) \-\- Includes \fIconflicts\fP information in response.
Ignored if \fIinclude_docs\fP isn\(aqt \fBtrue\fP\&. Default is \fBfalse\fP\&.
.IP \(bu 2
\fBdescending\fP (\fIboolean\fP) \-\- Return the design documents in descending by
key order. Default is \fBfalse\fP\&.
.IP \(bu 2
\fBendkey\fP (\fIstring\fP) \-\- Stop returning records when the specified key is
reached. \fIOptional\fP\&.
.IP \(bu 2
\fBend_key\fP (\fIstring\fP) \-\- Alias for \fIendkey\fP param.
.IP \(bu 2
\fBendkey_docid\fP (\fIstring\fP) \-\- Stop returning records when the specified
design document ID is reached. \fIOptional\fP\&.
.IP \(bu 2
\fBend_key_doc_id\fP (\fIstring\fP) \-\- Alias for \fIendkey_docid\fP param.
.IP \(bu 2
\fBinclude_docs\fP (\fIboolean\fP) \-\- Include the full content of the design
documents in the return. Default is \fBfalse\fP\&.
.IP \(bu 2
\fBinclusive_end\fP (\fIboolean\fP) \-\- Specifies whether the specified end key
should be included in the result. Default is \fBtrue\fP\&.
.IP \(bu 2
\fBkey\fP (\fIstring\fP) \-\- Return only design documents that match the specified
key. \fIOptional\fP\&.
.IP \(bu 2
\fBkeys\fP (\fIstring\fP) \-\- Return only design documents that match the specified
keys. \fIOptional\fP\&.
.IP \(bu 2
\fBlimit\fP (\fInumber\fP) \-\- Limit the number of the returned design documents to
the specified number. \fIOptional\fP\&.
.IP \(bu 2
\fBskip\fP (\fInumber\fP) \-\- Skip this number of records before starting to return
the results. Default is \fB0\fP\&.
.IP \(bu 2
\fBstartkey\fP (\fIstring\fP) \-\- Return records starting with the specified key.
\fIOptional\fP\&.
.IP \(bu 2
\fBstart_key\fP (\fIstring\fP) \-\- Alias for \fIstartkey\fP param.
.IP \(bu 2
\fBstartkey_docid\fP (\fIstring\fP) \-\- Return records starting with the specified
design document ID. \fIOptional\fP\&.
.IP \(bu 2
\fBstart_key_doc_id\fP (\fIstring\fP) \-\- Alias for \fIstartkey_docid\fP param.
.IP \(bu 2
\fBupdate_seq\fP (\fIboolean\fP) \-\- Response includes an \fBupdate_seq\fP value
indicating which sequence id of the underlying database the view
reflects. Default is \fBfalse\fP\&.
.UNINDENT
.TP
.B Response Headers
.INDENT 7.0
.IP \(bu 2
\fI\%Content\-Type\fP \-\- .INDENT 2.0
.IP \(bu 2
\fIapplication/json\fP
.IP \(bu 2
\fItext/plain; charset=utf\-8\fP
.UNINDENT

.UNINDENT
.TP
.B Response JSON Object
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\fInumber\fP) \-\- Offset where the design document list started
.IP \(bu 2
\fBrows\fP (\fIarray\fP) \-\- Array of view row objects. By default the information
returned contains only the design document ID and revision.
.IP \(bu 2
\fBtotal_rows\fP (\fInumber\fP) \-\- Number of design documents in the database. Note
that this is not the number of rows returned in the actual query.
.IP \(bu 2
\fBupdate_seq\fP (\fInumber\fP) \-\- Current update sequence for the database
.UNINDENT
.TP
.B Status Codes
.INDENT 7.0
.IP \(bu 2
\fI\%200 OK\fP \-\- Request completed successfully
.UNINDENT
.UNINDENT
.sp
\fBRequest\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /db/_local_docs HTTP/1.1
Accept: application/json
Host: localhost:5984
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBResponse\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Cache\-Control: must\-revalidate
Content\-Type: application/json
Date: Sat, 23 Dec 2017 16:22:56 GMT
Server: CouchDB (Erlang/OTP)
Transfer\-Encoding: chunked

{
    "offset": null,
    "rows": [
        {
            "id": "_local/localdoc01",
            "key": "_local/localdoc01",
            "value": {
                "rev": "0\-1"
            }
        },
        {
            "id": "_local/localdoc02",
            "key": "_local/localdoc02",
            "value": {
                "rev": "0\-1"
            }
        },
        {
            "id": "_local/localdoc03",
            "key": "_local/localdoc03",
            "value": {
                "rev": "0\-1"
            }
        },
        {
            "id": "_local/localdoc04",
            "key": "_local/localdoc04",
            "value": {
                "rev": "0\-1"
            }
        },
        {
            "id": "_local/localdoc05",
            "key": "_local/localdoc05",
            "value": {
                "rev": "0\-1"
            }
        }
    ],
    "total_rows": null
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B POST /{db}/_local_docs
The \fBPOST\fP to \fB_local_docs\fP allows to specify multiple keys to be
selected from the database. This enables you to request multiple
local documents in a single request, in place of multiple
\fBGET /{db}/_local/{docid}\fP requests.
.sp
The request body should contain a list of the keys to be returned as an
array to a \fBkeys\fP object. For example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /db/_local_docs HTTP/1.1
Accept: application/json
Content\-Length: 70
Content\-Type: application/json
Host: localhost:5984

{
    "keys" : [
        "_local/localdoc02",
        "_local/localdoc05"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The returned JSON is the all documents structure, but with only the
selected keys in the output:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "total_rows" : null,
    "rows" : [
        {
            "value" : {
                "rev" : "0\-1"
            },
            "id" : "_local/localdoc02",
            "key" : "_local/localdoc02"
        },
        {
            "value" : {
                "rev" : "0\-1"
            },
            "id" : "_local/localdoc05",
            "key" : "_local/localdoc05"
        }
    ],
    "offset" : null
}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fB/db/_local/id\fP
.INDENT 0.0
.TP
.B GET /{db}/_local/{docid}
Gets the specified local document. The semantics are identical to accessing
a standard document in the specified database, except that the document is
not replicated. See \fBGET /{db}/{docid}\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B PUT /{db}/_local/{docid}
Stores the specified local document. The semantics are identical to storing
a standard document in the specified database, except that the document is
not replicated. See \fBPUT /{db}/{docid}\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B DELETE /{db}/_local/{docid}
Deletes the specified local document. The semantics are identical to
deleting a standard document in the specified database, except that the
document is not replicated. See \fBDELETE /{db}/{docid}\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B COPY /{db}/_local/{docid}
Copies the specified local document. The semantics are identical to copying
a standard document in the specified database, except that the document is
not replicated. See \fBCOPY /{db}/{docid}\fP\&.
.UNINDENT
.SS Cluster Reference
.INDENT 0.0
.TP
.B As of 2.0 CouchDB now have two modes of operations:
.INDENT 7.0
.IP \(bu 2
Standalone
.IP \(bu 2
Cluster
.UNINDENT
.UNINDENT
.sp
This part of the documentation is about setting up and maintain a CouchDB
cluster.
.SS Set Up
.sp
Everything you need to know to prepare the cluster for the installation of
CouchDB.
.SS Firewall
.sp
If you do not have a firewall between your servers, then you can skip this.
.sp
CouchDB in cluster mode uses the port \fB5984\fP just as standalone, but it also
uses \fB5986\fP for node\-local APIs.
.sp
Erlang uses TCP port \fB4369\fP (EPMD) to find other nodes, so all servers must be
able to speak to each other on this port. In an Erlang Cluster, all nodes are
connected to all other nodes. A mesh.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
If you expose the port \fB4369\fP to the Internet or any other untrusted
network, then the only thing protecting you is the
\fI\%cookie\fP\&.
.UNINDENT
.UNINDENT
.sp
Every Erlang application then uses other ports for talking to each other. Yes,
this means random ports. This will obviously not work with a firewall, but it is
possible to force an Erlang application to use a specific port rage.
.sp
This documentation will use the range TCP \fB9100\-9200\fP\&. Open up those ports in
your firewalls and it is time to test it.
.sp
You need 2 servers with working hostnames. Let us call them server1 and server2.
.sp
On server1:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
erl \-sname bus \-setcookie \(aqbrumbrum\(aq \-kernel inet_dist_listen_min 9100 \-kernel inet_dist_listen_max 9200
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Then on server2:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
erl \-sname car \-setcookie \(aqbrumbrum\(aq \-kernel inet_dist_listen_min 9100 \-kernel inet_dist_listen_max 9200
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B An explanation to the commands:
.INDENT 7.0
.IP \(bu 2
\fBerl\fP the Erlang shell.
.IP \(bu 2
\fB\-sname bus\fP the name of the Erlang node.
.IP \(bu 2
\fB\-setcookie \(aqbrumbrum\(aq\fP the "password" used when nodes connect to each
other.
.IP \(bu 2
\fB\-kernel inet_dist_listen_min 9100\fP the lowest port in the rage.
.IP \(bu 2
\fB\-kernel inet_dist_listen_max 9200\fP the highest port in the rage.
.UNINDENT
.UNINDENT
.sp
This gives us 2 Erlang shells. shell1 on server1, shell2 on server2.
Time to connect them. The \fB\&.\fP is to Erlang what \fB;\fP is to C.
.sp
In shell1:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
net_kernel:connect_node(car@server2).
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will connect to the node called \fBcar\fP on the server called \fBserver2\fP\&.
.sp
If that returns true, then you have an Erlang cluster, and the firewalls are
open. If you get false or nothing at all, then you have a problem with the
firewall.
.SS First time in Erlang? Time to play!
.sp
Run in both shells:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
register(shell, self()).
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
shell1:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{shell, car@server2} ! {hello, from, self()}.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
shell2:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
flush().
{shell, bus@server1} ! {"It speaks!", from, self()}.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
shell1:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
flush().
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To close the shells, run in both:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
q().
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Make CouchDB use the open ports.
.sp
Open \fBvm.args\fP, on all nodes, and add \fB\-kernel inet_dist_listen_min 9100\fP
and \fB\-kernel inet_dist_listen_max 9200\fP like below:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-name ...
\-setcookie ...
\&...
\-kernel inet_dist_listen_max 9100
\-kernel inet_dist_listen_max 9200
.ft P
.fi
.UNINDENT
.UNINDENT
.SS The Cluster Setup Wizard
.sp
Setting up a cluster of Erlang applications correctly can be a daunting
task. Luckily, CouchDB 2.0 comes with a convenient Cluster Setup Wizard
as part of the Fauxton web administration interface.
.sp
After installation and initial start\-up, visit Fauxton at
\fBhttp://127.0.0.1:5984/_utils#setup\fP\&. You will be asked to set up
CouchDB as a single\-node instance or set up a cluster.
.sp
When you click "setup cluster" you are asked for admin credentials again and
then to add nodes by IP address. To get more nodes, go through the same install
procedure on other machines. Be sure to specify the total number of nodes you
expect to add to the cluster before adding nodes.
.sp
In file etc/vm.args change the the line\ \fB\-name couchdb@127.0.0.1\fP to
\fB\-name couchdb@<this\-nodes\-ip\-address| FQDN>\fP for each node which defines
the node and must be seperate for each node. For clustered setup, each node in
system must have a unique name. Can also be a valid FQDN not necessarily the IP.
.sp
Before you can add nodes to form a cluster, you must have them listening on an
IP address accessible from the other nodes in the cluster.
Do this once per node:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT http://127.0.0.1:5984/_node/couchdb@<this\-nodes\-ip\-address>/_config/admins/admin \-d \(aq"password"\(aq
curl \-X PUT http://127.0.0.1:5984/_node/couchdb@<this\-nodes\-ip\-address>/_config/chttpd/bind_address \-d \(aq"0.0.0.0"\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now you can enter their IP addresses in the setup screen on your first
node. And make sure to put in the admin username and password. And use
the same admin username and password on all nodes.
.sp
Once you added all nodes, click "Setup" and Fauxton will finish the
cluster configuration for you.
.sp
See \fI\%http://127.0.0.1:5984/_membership\fP to get a list of all the nodes in
your cluster.
.sp
Now your cluster is ready and available. You can send requests to any
one of the nodes and get to all the data.
.sp
For a proper production setup, you\(aqd now set up an HTTP proxy in front
of the nodes, that does load balancing. We recommend \fI\%HAProxy\fP\&. See
our \fI\%example configuration for HAProxy\fP\&. All you need is to adjust the
ip addresses and ports.
.SS The Cluster Setup API
.sp
If you would prefer to manually configure your CouchDB cluster, CouchDB exposes
the \fB_cluster_setup\fP endpoint for that. After installation and initial setup,
we can set up the cluster. On each node we need to run the following command to
set up the node:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X POST \-H "Content\-Type: application/json" http://admin:password@127.0.0.1:5984/_cluster_setup \-d \(aq{"action": "enable_cluster", "bind_address":"0.0.0.0", "username": "admin", "password":"password", "node_count":"3"}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After that we can join all the nodes together. Choose one node
as the "setup coordination node" to run all these commands on.
This is a "setup coordination node" that manages the setup and
requires all other nodes to be able to see it and vice versa.
Set up will not work with unavailable nodes.
The notion of "setup coordination node" will be gone once the setup is finished.
From then on, the cluster will no longer have a "setup coordination node".
To add a node run these commands for each node you want to add:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X POST \-H "Content\-Type: application/json" http://admin:password@127.0.0.1:5984/_cluster_setup \-d \(aq{"action": "enable_cluster", "bind_address":"0.0.0.0", "username": "admin", "password":"password", "port": 15984, "node_count": "3", "remote_node": "<remote\-node\-ip>", "remote_current_user": "<remote\-node\-username>", "remote_current_password": "<remote\-node\-password>" }\(aq
curl \-X POST \-H "Content\-Type: application/json" http://admin:password@127.0.0.1:5984/_cluster_setup \-d \(aq{"action": "add_node", "host":"<remote\-node\-ip>", "port": <remote\-node\-port>, "username": "admin", "password":"password"}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will join the two nodes together.
Keep running the above commands for each
node you want to add to the cluster. Once this is done run the
following command to complete the setup and add the missing databases:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X POST \-H "Content\-Type: application/json" http://admin:password@127.0.0.1:5984/_cluster_setup \-d \(aq{"action": "finish_cluster"}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Verify install:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl http://admin:password@127.0.0.1:5984/_cluster_setup
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Response:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"state":"cluster_finished"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Verify cluster nodes:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl http://admin:password@127.0.0.1:5984/_membership
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Response:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "all_nodes": [
        "couchdb@couch1",
        "couchdb@couch2",
    ],
    "cluster_nodes": [
        "couchdb@couch1",
        "couchdb@couch2",
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You CouchDB cluster is now set up.
.SS Theory
.sp
Before we move on, we need some theory.
.sp
As you see in \fBetc/default.ini\fP there is a section called [cluster]
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[cluster]
q=8
n=3
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fBq\fP \- The number of shards.
.IP \(bu 2
\fBn\fP \- The number of copies there is of every document. Replicas.
.UNINDENT
.sp
When creating a database you can send your own values with request and
thereby override the defaults in \fBdefault.ini\fP\&.
.sp
In clustered operation, a quorum must be reached before CouchDB returns a
\fB200\fP for a fetch, or \fB201\fP for a write operation. A quorum is defined as
one plus half the number of "relevant copies". "Relevant copies" is defined
slightly differently for read and write operations.
.sp
For read operations, the number of relevant copies is the number of
currently\-accessible shards holding the requested data, meaning that in the case
of a failure or network partition, the number of relevant copies may be lower
than the number of replicas in the cluster.  The number of read copies can be
set with the \fBr\fP parameter.
.sp
For write operations the number of relevant copies is always \fBn\fP, the number
of replicas in the cluster.  For write operations, the number of copies can be
set using the w parameter. If fewer than this number of nodes is available, a
\fB202\fP will be returned.
.sp
We will focus on the shards and replicas for now.
.sp
A shard is a part of a database. The more shards, the more you can scale out.
If you have 4 shards, that means that you can have at most 4 nodes. With one
shard you can have only one node, just as with CouchDB 1.x.
.sp
Replicas add failure resistance, as some nodes can be offline without everything
crashing down.
.INDENT 0.0
.IP \(bu 2
\fBn=1\fP All nodes must be up.
.IP \(bu 2
\fBn=2\fP Any 1 node can be down.
.IP \(bu 2
\fBn=3\fP Any 2 nodes can be down.
.IP \(bu 2
etc
.UNINDENT
.sp
Computers go down and sysadmins pull out network cables in a furious rage from
time to time, so using \fBn<2\fP is asking for downtime. Having too high a value
of \fBn\fP adds servers and complexity without any real benefit. The sweet spot is
at \fBn=3\fP\&.
.sp
Say that we have a database with 3 replicas and 4 shards. That would give us a
maximum of 12 nodes. 4*3=12 Every shard have 3 copies.
.sp
We can lose any 2 nodes and still read and write all documents.
.sp
What happens if we lose more nodes? It depends on how lucky we are. As long as
there is at least one copy of every shard online, we can read and write all
documents.
.sp
So, if we are very lucky then we can lose 8 nodes at maximum.
.SS Node Management
.SS Adding a node
.sp
Go to \fBhttp://server1:5984/_membership\fP to see the name of the node and all
the nodes it is connected to and knows about.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X GET "http://xxx.xxx.xxx.xxx:5984/_membership" \-\-user admin\-user
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "all_nodes":[
        "node1@xxx.xxx.xxx.xxx"],
    "cluster_nodes":[
        "node1@xxx.xxx.xxx.xxx"]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fBall_nodes\fP are all the nodes thats this node knows about.
.IP \(bu 2
\fBcluster_nodes\fP are the nodes that are connected to this node.
.UNINDENT
.sp
To add a node simply do:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT "http://xxx.xxx.xxx.xxx:5986/_nodes/node2@yyy.yyy.yyy.yyy" \-d {}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now look at \fBhttp://server1:5984/_membership\fP again.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "all_nodes":[
        "node1@xxx.xxx.xxx.xxx",
        "node2@yyy.yyy.yyy.yyy"
    ],
    "cluster_nodes":[
        "node1@xxx.xxx.xxx.xxx",
        "node2@yyy.yyy.yyy.yyy"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And you have a 2 node cluster :)
.sp
\fBhttp://yyy.yyy.yyy.yyy:5984/_membership\fP will show the same thing, so you
only have to add a node once.
.SS Removing a node
.sp
Before you remove a node, make sure that you have moved all
\fIshards\fP away from that node.
.sp
To remove \fBnode2\fP from server \fByyy.yyy.yyy.yyy\fP, you need to first know the
revision of the document that signifies that node’s existence:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl "http://xxx.xxx.xxx.xxx:5986/_nodes/node2@yyy.yyy.yyy.yyy"
{"_id":"node2@yyy.yyy.yyy.yyy","_rev":"1\-967a00dff5e02add41820138abb3284d"}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
With that \fB_rev\fP, you can now proceed to delete the node document:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X DELETE "http://xxx.xxx.xxx.xxx:5986/_nodes/node2@yyy.yyy.yyy.yyy?rev=1\-967a00dff5e02add41820138abb3284d"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Database Management
.SS Creating a database
.sp
This will create a database with \fB3\fP replicas and \fB8\fP shards.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT "http://xxx.xxx.xxx.xxx:5984/database\-name?n=3&q=8" \-\-user admin\-user
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The database is in \fBdata/shards\fP\&. Look around on all the nodes and you will
find all the parts.
.sp
If you do not specify \fBn\fP and \fBq\fP the default will be used. The default is
\fB3\fP replicas and \fB8\fP shards.
.SS Deleting a database
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X DELETE "http://xxx.xxx.xxx.xxx:5984/database\-name \-\-user admin\-user
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Placing a database on specific nodes
.sp
In BigCouch, the predecessor to CouchDB 2.0\(aqs clustering functionality, there
was the concept of zones. CouchDB 2.0 carries this forward with cluster
placement rules.
.sp
First, each node must be labeled with a zone attribute. This defines which
zone each node is in. You do this by editing the node\(aqs document in the
\fB/nodes\fP database, which is accessed through the "back\-door" (5986) port.
Add a key value pair of the form:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
"zone": "metro\-dc\-a"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Do this for all of the nodes in your cluster.
.sp
In your config file (\fBlocal.ini\fP or \fBdefault.ini\fP) on each node, define a
consistent cluster\-wide setting like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[cluster]
placement = metro\-dc\-a:2,metro\-dc\-b:1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In this example, it will ensure that two replicas for a shard will be hosted
on nodes with the zone attribute set to \fBmetro\-dc\-a\fP and one replica will
be hosted on a new with the zone attribute set to \fBmetro\-dc\-b\fP\&.
.sp
Note that you can also use this system to ensure certain nodes in the cluster
do not host \fIany\fP replicas for newly created databases, by giving them a zone
attribute that does not appear in the \fB[cluster]\fP placement string.
.SS Shard Management
.SS Introduction
.sp
This document discusses how sharding works in CouchDB along with how to
safely add, move, remove, and create placement rules for shards and
shard replicas.
.sp
A \fI\%shard\fP is a
horizontal partition of data in a database. Partitioning data into
shards and distributing copies of each shard (called "shard replicas" or
just "replicas") to different nodes in a cluster gives the data greater
durability against node loss. CouchDB clusters automatically shard
databases and distribute the subsets of documents that compose each
shard among nodes. Modifying cluster membership and sharding behavior
must be done manually.
.SS Shards and Replicas
.sp
How many shards and replicas each database has can be set at the global
level, or on a per\-database basis. The relevant parameters are \fBq\fP and
\fBn\fP\&.
.sp
\fIq\fP is the number of database shards to maintain. \fIn\fP is the number of
copies of each document to distribute. The default value for \fBn\fP is \fB3\fP,
and for \fBq\fP is \fB8\fP\&. With \fBq=8\fP, the database is split into 8 shards. With
\fBn=3\fP, the cluster distributes three replicas of each shard. Altogether,
that\(aqs 24 shard replicas for a single database. In a default 3\-node cluster,
each node would receive 8 shards. In a 4\-node cluster, each node would
receive 6 shards. We recommend in the general case that the number of
nodes in your cluster should be a multiple of \fBn\fP, so that shards are
distributed evenly.
.sp
CouchDB nodes have a \fBetc/local.ini\fP file with a section named
\fI\%cluster\fP which looks like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[cluster]
q=8
n=3
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
These settings can be modified to set sharding defaults for all
databases, or they can be set on a per\-database basis by specifying the
\fBq\fP and \fBn\fP query parameters when the database is created. For
example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ curl \-X PUT "$COUCH_URL:5984/database\-name?q=4&n=2"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
That creates a database that is split into 4 shards and 2 replicas,
yielding 8 shard replicas distributed throughout the cluster.
.SS Quorum
.sp
Depending on the size of the cluster, the number of shards per database,
and the number of shard replicas, not every node may have access to
every shard, but every node knows where all the replicas of each shard
can be found through CouchDB\(aqs internal shard map.
.sp
Each request that comes in to a CouchDB cluster is handled by any one
random coordinating node. This coordinating node proxies the request to
the other nodes that have the relevant data, which may or may not
include itself. The coordinating node sends a response to the client
once a \fI\%quorum\fP of
database nodes have responded; 2, by default. The default required size
of a quorum is equal to \fBr=w=((n+1)/2)\fP where \fBr\fP refers to the size
of a read quorum, \fBw\fP refers to the size of a write quorum, and \fBn\fP
refers to the number of replicas of each shard. In a default cluster where
\fBn\fP is 3, \fB((n+1)/2)\fP would be 2.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Each node in a cluster can be a coordinating node for any one
request. There are no special roles for nodes inside the cluster.
.UNINDENT
.UNINDENT
.sp
The size of the required quorum can be configured at request time by
setting the \fBr\fP parameter for document and view reads, and the \fBw\fP
parameter for document writes. For example, here is a request that
directs the coordinating node to send a response once at least two nodes
have responded:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ curl "$COUCH_URL:5984/<doc>?r=2"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Here is a similar example for writing a document:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ curl \-X PUT "$COUCH_URL:5984/<doc>?w=2" \-d \(aq{...}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Setting \fBr\fP or \fBw\fP to be equal to \fBn\fP (the number of replicas)
means you will only receive a response once all nodes with relevant
shards have responded or timed out, and as such this approach does not
guarantee \fI\%ACIDic consistency\fP\&. Setting \fBr\fP or
\fBw\fP to 1 means you will receive a response after only one relevant
node has responded.
.SS Moving a shard
.sp
This section describes how to manually place and replace shards. These
activities are critical steps when you determine your cluster is too big
or too small, and want to resize it successfully, or you have noticed
from server metrics that database/shard layout is non\-optimal and you
have some "hot spots" that need resolving.
.sp
Consider a three\-node cluster with q=8 and n=3. Each database has 24
shards, distributed across the three nodes. If you \fIadd a fourth
node\fP to the cluster, CouchDB will not redistribute
existing database shards to it. This leads to unbalanced load, as the
new node will only host shards for databases created after it joined the
cluster. To balance the distribution of shards from existing databases,
they must be moved manually.
.sp
Moving shards between nodes in a cluster involves the following steps:
.INDENT 0.0
.IP 0. 4
\fIEnsure the target node has joined the cluster\fP\&.
.IP 1. 4
Copy the shard(s) and any secondary
\fIindex shard(s) onto the target node\fP\&.
.IP 2. 4
\fISet the target node to maintenance mode\fP\&.
.IP 3. 4
Update cluster metadata
\fIto reflect the new target shard(s)\fP\&.
.IP 4. 4
Monitor internal replication
\fIto ensure up\-to\-date shard(s)\fP\&.
.IP 5. 4
\fIClear the target node\(aqs maintenance mode\fP\&.
.IP 6. 4
Update cluster metadata again
\fIto remove the source shard(s)\fP
.IP 7. 4
Remove the shard file(s) and secondary index file(s)
\fIfrom the source node\fP\&.
.UNINDENT
.SS Copying shard files
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Technically, copying database and secondary index
shards is optional. If you proceed to the next step without
performing this data copy, CouchDB will use internal replication
to populate the newly added shard replicas. However, copying files
is faster than internal replication, especially on a busy cluster,
which is why we recommend performing this manual data copy first.
.UNINDENT
.UNINDENT
.sp
Shard files live in the \fBdata/shards\fP directory of your CouchDB
install. Within those subdirectories are the shard files themselves. For
instance, for a \fBq=8\fP database called \fBabc\fP, here is its database shard
files:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
data/shards/00000000\-1fffffff/abc.1529362187.couch
data/shards/20000000\-3fffffff/abc.1529362187.couch
data/shards/40000000\-5fffffff/abc.1529362187.couch
data/shards/60000000\-7fffffff/abc.1529362187.couch
data/shards/80000000\-9fffffff/abc.1529362187.couch
data/shards/a0000000\-bfffffff/abc.1529362187.couch
data/shards/c0000000\-dfffffff/abc.1529362187.couch
data/shards/e0000000\-ffffffff/abc.1529362187.couch
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Secondary indexes (including JavaScript views, Erlang views and Mango
indexes) are also sharded, and their shards should be moved to save the
new node the effort of rebuilding the view. View shards live in
\fBdata/.shards\fP\&. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
data/.shards
data/.shards/e0000000\-ffffffff/_replicator.1518451591_design
data/.shards/e0000000\-ffffffff/_replicator.1518451591_design/mrview
data/.shards/e0000000\-ffffffff/_replicator.1518451591_design/mrview/3e823c2a4383ac0c18d4e574135a5b08.view
data/.shards/c0000000\-dfffffff
data/.shards/c0000000\-dfffffff/_replicator.1518451591_design
data/.shards/c0000000\-dfffffff/_replicator.1518451591_design/mrview
data/.shards/c0000000\-dfffffff/_replicator.1518451591_design/mrview/3e823c2a4383ac0c18d4e574135a5b08.view
\&...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Since they are files, you can use \fBcp\fP, \fBrsync\fP,
\fBscp\fP or other file\-copying command to copy them from one node to
another. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# one one machine
$ mkdir \-p data/.shards/<range>
$ mkdir \-p data/shards/<range>
# on the other
$ scp <couch\-dir>/data/.shards/<range>/<database>.<datecode>* \e
  <node>:<couch\-dir>/data/.shards/<range>/
$ scp <couch\-dir>/data/shards/<range>/<database>.<datecode>.couch \e
  <node>:<couch\-dir>/data/shards/<range>/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Remember to move view files before database files! If a view index
is ahead of its database, the database will rebuild it from
scratch.
.UNINDENT
.UNINDENT
.SS Set the target node to \fBtrue\fP maintenance mode
.sp
Before telling CouchDB about these new shards on the node, the node
must be put into maintenance mode. Maintenance mode instructs CouchDB to
return a \fB404 Not Found\fP response on the \fB/_up\fP endpoint, and
ensures it does not participate in normal interactive clustered requests
for its shards. A properly configured load balancer that uses \fBGET
/_up\fP to check the health of nodes will detect this 404 and remove the
node from circulation, preventing requests from being sent to that node.
For example, to configure HAProxy to use the \fB/_up\fP endpoint, use:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
http\-check disable\-on\-404
option httpchk GET /_up
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you do not set maintenance mode, or the load balancer ignores this
maintenance mode status, after the next step is performed the cluster
may return incorrect responses when consulting the node in question. You
don\(aqt want this! In the next steps, we will ensure that this shard is
up\-to\-date before allowing it to participate in end\-user requests.
.sp
To enable maintenance mode:
.sp
Then, verify that the node is in maintenance mode by performing a \fBGET
/_up\fP on that node\(aqs individual endpoint:
.sp
Finally, check that your load balancer has removed the node from the
pool of available backend nodes.
.SS Updating cluster metadata to reflect the new target shard(s)
.sp
Now we need to tell CouchDB that the target node (which must already be
\fIjoined to the cluster\fP) should be hosting
shard replicas for a given database.
.sp
To update the cluster metadata, use the special \fB/_dbs\fP database,
which is an internal CouchDB database that maps databases to shards and
nodes. This database is replicated between nodes. It is accessible only
via a node\-local port, usually at port 5986. By default, this port is
only available on the localhost interface for security purposes.
.sp
First, retrieve the database\(aqs current metadata:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ curl http://localhost:5986/_dbs/{name}
{
  "_id": "{name}",
  "_rev": "1\-e13fb7e79af3b3107ed62925058bfa3a",
  "shard_suffix": [46, 49, 53, 51, 48, 50, 51, 50, 53, 50, 54],
  "changelog": [
    ["add", "00000000\-1fffffff", "node1@xxx.xxx.xxx.xxx"],
    ["add", "00000000\-1fffffff", "node2@xxx.xxx.xxx.xxx"],
    ["add", "00000000\-1fffffff", "node3@xxx.xxx.xxx.xxx"],
    …
  ],
  "by_node": {
    "node1@xxx.xxx.xxx.xxx": [
      "00000000\-1fffffff",
      …
    ],
    …
  },
  "by_range": {
    "00000000\-1fffffff": [
      "node1@xxx.xxx.xxx.xxx",
      "node2@xxx.xxx.xxx.xxx",
      "node3@xxx.xxx.xxx.xxx"
    ],
    …
  }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Here is a brief anatomy of that document:
.INDENT 0.0
.IP \(bu 2
\fB_id\fP: The name of the database.
.IP \(bu 2
\fB_rev\fP: The current revision of the metadata.
.IP \(bu 2
\fBshard_suffix\fP: A timestamp of the database\(aqs creation, marked as
seconds after the Unix epoch mapped to the codepoints for ASCII
numerals.
.IP \(bu 2
\fBchangelog\fP: History of the database\(aqs shards.
.IP \(bu 2
\fBby_node\fP: List of shards on each node.
.IP \(bu 2
\fBby_range\fP: On which nodes each shard is.
.UNINDENT
.sp
To reflect the shard move in the metadata, there are three steps:
.INDENT 0.0
.IP 1. 3
Add appropriate changelog entries.
.IP 2. 3
Update the \fBby_node\fP entries.
.IP 3. 3
Update the \fBby_range\fP entries.
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Be very careful! Mistakes during this process can
irreparably corrupt the cluster!
.UNINDENT
.UNINDENT
.sp
As of this writing, this process must be done manually.
.sp
To add a shard to a node, add entries like this to the database
metadata\(aqs \fBchangelog\fP attribute:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
["add", "<range>", "<node\-name>"]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fB<range>\fP is the specific shard range for the shard. The \fB<node\-
name>\fP should match the name and address of the node as displayed in
\fBGET /_membership\fP on the cluster.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
When removing a shard from a node, specify \fBremove\fP instead of \fBadd\fP\&.
.UNINDENT
.UNINDENT
.sp
Once you have figured out the new changelog entries, you will need to
update the \fBby_node\fP and \fBby_range\fP to reflect who is storing what
shards. The data in the changelog entries and these attributes must
match. If they do not, the database may become corrupted.
.sp
Continuing our example, here is an updated version of the metadata above
that adds shards to an additional node called \fBnode4\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "_id": "{name}",
  "_rev": "1\-e13fb7e79af3b3107ed62925058bfa3a",
  "shard_suffix": [46, 49, 53, 51, 48, 50, 51, 50, 53, 50, 54],
  "changelog": [
    ["add", "00000000\-1fffffff", "node1@xxx.xxx.xxx.xxx"],
    ["add", "00000000\-1fffffff", "node2@xxx.xxx.xxx.xxx"],
    ["add", "00000000\-1fffffff", "node3@xxx.xxx.xxx.xxx"],
    …
    ["add", "00000000\-1fffffff", "node4@xxx.xxx.xxx.xxx"]
  ],
  "by_node": {
    "node1@xxx.xxx.xxx.xxx": [
      "00000000\-1fffffff",
      …
    ],
    …
    "node4@xxx.xxx.xxx.xxx": [
      "00000000\-1fffffff"
    ]
  },
  "by_range": {
    "00000000\-1fffffff": [
      "node1@xxx.xxx.xxx.xxx",
      "node2@xxx.xxx.xxx.xxx",
      "node3@xxx.xxx.xxx.xxx",
      "node4@xxx.xxx.xxx.xxx"
    ],
    …
  }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now you can \fBPUT\fP this new metadata:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ curl \-X PUT http://localhost:5986/_dbs/{name} \-d \(aq{...}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Monitor internal replication to ensure up\-to\-date shard(s)
.sp
After you complete the previous step, as soon as CouchDB receives a
write request for a shard on the target node, CouchDB will check if the
target node\(aqs shard(s) are up to date. If it finds they are not up to
date, it will trigger an internal replication job to complete this task.
You can observe this happening by triggering a write to the database
(update a document, or create a new one), while monitoring the
\fB/_node/<nodename>/_system\fP endpoint, which includes the
\fBinternal_replication_jobs\fP metric.
.sp
Once this metric has returned to the baseline from before you wrote the
document, or is \fB0\fP, the shard replica is ready to serve data and we
can bring the node out of maintenance mode.
.SS Clear the target node\(aqs maintenance mode
.sp
You can now let the node start servicing data requests by
putting \fB"false"\fP to the maintenance mode configuration endpoint, just
as in step 2.
.sp
Verify that the node is not in maintenance mode by performing a \fBGET
/_up\fP on that node\(aqs individual endpoint.
.sp
Finally, check that your load balancer has returned the node to the pool
of available backend nodes.
.SS Update cluster metadata again to remove the source shard
.sp
Now, remove the source shard from the shard map the same way that you
added the new target shard to the shard map in step 2. Be sure to add
the \fB["remove", <range>, <source\-shard>]\fP entry to the end of the
changelog as well as modifying both the \fBby_node\fP and \fBby_range\fP sections of
the database metadata document.
.SS Remove the shard and secondary index files from the source node
.sp
Finally, you can remove the source shard replica by deleting its file from the
command line on the source host, along with any view shard replicas:
.sp
Congratulations! You have moved a database shard replica. By adding and removing
database shard replicas in this way, you can change the cluster\(aqs shard layout,
also known as a shard map.
.SS Specifying database placement
.sp
You can configure CouchDB to put shard replicas on certain nodes at
database creation time using placement rules.
.sp
First, each node must be labeled with a zone attribute. This defines
which zone each node is in. You do this by editing the node’s document
in the \fB/_nodes\fP database, which is accessed through the node\-local
port. Add a key value pair of the form:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
"zone": "{zone\-name}"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Do this for all of the nodes in your cluster. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ curl \-X PUT http://localhost:5986/_nodes/<node\-name> \e
    \-d \(aq{ \e
        "_id": "<node\-name>",
        "_rev": "<rev>",
        "zone": "<zone\-name>"
        }\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the local config file (\fBlocal.ini\fP) of each node, define a
consistent cluster\-wide setting like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[cluster]
placement = <zone\-name\-1>:2,<zone\-name\-2>:1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In this example, CouchDB will ensure that two replicas for a shard will
be hosted on nodes with the zone attribute set to \fB<zone\-name\-1>\fP and
one replica will be hosted on a new with the zone attribute set to
\fB<zone\-name\-2>\fP\&.
.sp
This approach is flexible, since you can also specify zones on a per\-
database basis by specifying the placement setting as a query parameter
when the database is created, using the same syntax as the ini file:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-X PUT $COUCH_URL:5984/<dbname>?zone=<zone>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that you can also use this system to ensure certain nodes in the
cluster do not host any replicas for newly created databases, by giving
them a zone attribute that does not appear in the \fB[cluster]\fP
placement string.
.SS Resharding a database to a new q value
.sp
The \fBq\fP value for a database can only be set when the database is
created, precluding live resharding. Instead, to reshard a database, it
must be regenerated. Here are the steps:
.INDENT 0.0
.IP 1. 3
Create a temporary database with the desired shard settings, by
specifying the q value as a query parameter during the PUT
operation.
.IP 2. 3
Stop clients accessing the database.
.IP 3. 3
Replicate the primary database to the temporary one. Multiple
replications may be required if the primary database is under
active use.
.IP 4. 3
Delete the primary database. \fBMake sure nobody is using it!\fP
.IP 5. 3
Recreate the primary database with the desired shard settings.
.IP 6. 3
Clients can now access the database again.
.IP 7. 3
Replicate the temporary back to the primary.
.IP 8. 3
Delete the temporary database.
.UNINDENT
.sp
Once all steps have completed, the database can be used again. The
cluster will create and distribute its shards according to placement
rules automatically.
.sp
Downtime can be avoided in production if the client application(s) can
be instructed to use the new database instead of the old one, and a cut\-
over is performed during a very brief outage window.
.SS JSON Structure Reference
.sp
The following appendix provides a quick reference to all the JSON structures
that you can supply to CouchDB, or get in return to requests.
.SS All Database Documents
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
total_rows
T}	T{
Number of documents in the database/view
T}
_
T{
offset
T}	T{
Offset where the document list started
T}
_
T{
update_seq (optional)
T}	T{
Current update sequence for the database
T}
_
T{
rows [array]
T}	T{
Array of document object
T}
_
.TE
.SS Bulk Document Response
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
docs [array]
T}	T{
Bulk Docs Returned Documents
T}
_
T{
id
T}	T{
Document ID
T}
_
T{
error
T}	T{
Error type
T}
_
T{
reason
T}	T{
Error string with extended reason
T}
_
.TE
.SS Bulk Documents
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
docs [array]
T}	T{
Bulk Documents Document
T}
_
T{
_id (optional)
T}	T{
Document ID
T}
_
T{
_rev (optional)
T}	T{
Revision ID (when updating an existing
document)
T}
_
T{
_deleted (optional)
T}	T{
Whether the document should be deleted
T}
_
.TE
.SS Changes information for a database
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
last_seq
T}	T{
Last update sequence
T}
_
T{
pending
T}	T{
Count of remaining items in the feed
T}
_
T{
results [array]
T}	T{
Changes made to a database
T}
_
T{
seq
T}	T{
Update sequence
T}
_
T{
id
T}	T{
Document ID
T}
_
T{
changes [array]
T}	T{
List of changes, field\-by\-field, for this
document
T}
_
.TE
.SS CouchDB Document
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
_id (optional)
T}	T{
Document ID
T}
_
T{
_rev (optional)
T}	T{
Revision ID (when updating an existing
document)
T}
_
.TE
.SS CouchDB Error Status
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
id
T}	T{
Document ID
T}
_
T{
error
T}	T{
Error type
T}
_
T{
reason
T}	T{
Error string with extended reason
T}
_
.TE
.SS CouchDB database information object
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
db_name
T}	T{
The name of the database.
T}
_
T{
committed_update_seq
T}	T{
The number of committed updates.
T}
_
T{
doc_count
T}	T{
The number of documents in the database.
T}
_
T{
doc_del_count
T}	T{
The number of deleted documents.
T}
_
T{
compact_running
T}	T{
Set to true if the database compaction
routine is operating on this database.
T}
_
T{
disk_format_version
T}	T{
The version of the physical format used for
the data when it is stored on hard disk.
T}
_
T{
disk_size
T}	T{
Size in bytes of the data as stored on disk.
View indexes are not included in the
calculation.
T}
_
T{
instance_start_time
T}	T{
Timestamp indicating when the database was
opened, expressed in microseconds since the
epoch.
T}
_
T{
purge_seq
T}	T{
The number of purge operations on the
database.
T}
_
T{
update_seq
T}	T{
Current update sequence for the database.
T}
_
.TE
.SS Design Document
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
_id
T}	T{
Design Document ID
T}
_
T{
_rev
T}	T{
Design Document Revision
T}
_
T{
views
T}	T{
View
T}
_
T{
viewname
T}	T{
View Definition
T}
_
T{
map
T}	T{
Map Function for View
T}
_
T{
reduce (optional)
T}	T{
Reduce Function for View
T}
_
.TE
.SS Design Document Information
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
name
T}	T{
Name/ID of Design Document
T}
_
T{
view_index
T}	T{
View Index
T}
_
T{
compact_running
T}	T{
Indicates whether a compaction routine is
currently running on the view
T}
_
T{
disk_size
T}	T{
Size in bytes of the view as stored on disk
T}
_
T{
language
T}	T{
Language for the defined views
T}
_
T{
purge_seq
T}	T{
The purge sequence that has been processed
T}
_
T{
signature
T}	T{
MD5 signature of the views for the design
document
T}
_
T{
update_seq
T}	T{
The update sequence of the corresponding
database that has been indexed
T}
_
T{
updater_running
T}	T{
Indicates if the view is currently being
updated
T}
_
T{
waiting_clients
T}	T{
Number of clients waiting on views from this
design document
T}
_
T{
waiting_commit
T}	T{
Indicates if there are outstanding commits
to the underlying database that need to
processed
T}
_
.TE
.SS Document with Attachments
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
_id (optional)
T}	T{
Document ID
T}
_
T{
_rev (optional)
T}	T{
Revision ID (when updating an existing
document)
T}
_
T{
_attachments (optional)
T}	T{
Document Attachment
T}
_
T{
filename
T}	T{
Attachment information
T}
_
T{
content_type
T}	T{
MIME Content type string
T}
_
T{
data
T}	T{
File attachment content, Base64 encoded
T}
_
.TE
.SS List of Active Tasks
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
tasks [array]
T}	T{
Active Tasks
T}
_
T{
pid
T}	T{
Process ID
T}
_
T{
status
T}	T{
Task status message
T}
_
T{
task
T}	T{
Task name
T}
_
T{
type
T}	T{
Operation Type
T}
_
.TE
.SS Replication Settings
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
source
T}	T{
Source database name or URL.
T}
_
T{
target
T}	T{
Target database name or URL.
T}
_
T{
cancel (optional)
T}	T{
Cancels the replication.
T}
_
T{
checkpoint_interval (optional)
T}	T{
Specifies the checkpoint interval in ms.
T}
_
T{
continuous (optional)
T}	T{
Configure the replication to be continuous.
T}
_
T{
create_target (optional)
T}	T{
Creates the target database.
T}
_
T{
doc_ids (optional)
T}	T{
Array of document IDs to be synchronized.
T}
_
T{
filter (optional)
T}	T{
name of the filter function in the form of
\fBddoc/myfilter\fP\&.
T}
_
T{
proxy (optional)
T}	T{
Address of a proxy server through which
replication should occur.
T}
_
T{
query_params (optional)
T}	T{
Query parameter that are passed to the
filter function; the value should be a
document containing parameters as members.
T}
_
T{
selector (optional)
T}	T{
Select the documents included in the
replication. This option provides
performance benefits compared with using
the \fBfilter\fP option.
T}
_
T{
since_seq (optional)
T}	T{
Sequence from which the replication should
start.
T}
_
T{
use_checkpoints (optional)
T}	T{
Whether to use replication checkpoints
or not.
T}
_
.TE
.SS Replication Status
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
ok
T}	T{
Replication status
T}
_
T{
session_id
T}	T{
Unique session ID
T}
_
T{
source_last_seq
T}	T{
Last sequence number read from the source
database
T}
_
T{
history [array]
T}	T{
Replication History
T}
_
T{
session_id
T}	T{
Session ID for this replication operation
T}
_
T{
recorded_seq
T}	T{
Last recorded sequence number
T}
_
T{
docs_read
T}	T{
Number of documents read
T}
_
T{
docs_written
T}	T{
Number of documents written to target
T}
_
T{
doc_write_failures
T}	T{
Number of document write failures
T}
_
T{
start_time
T}	T{
Date/Time replication operation started
T}
_
T{
start_last_seq
T}	T{
First sequence number in changes stream
T}
_
T{
end_time
T}	T{
Date/Time replication operation completed
T}
_
T{
end_last_seq
T}	T{
Last sequence number in changes stream
T}
_
T{
missing_checked
T}	T{
Number of missing documents checked
T}
_
T{
missing_found
T}	T{
Number of missing documents found
T}
_
.TE
.SS Request object
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
body
T}	T{
Request body data as \fIstring\fP\&.
If the request method is \fIGET\fP this field
contains the value \fB"undefined"\fP\&. If the
method is \fIDELETE\fP or \fIHEAD\fP the value is
\fB""\fP (empty string).
T}
_
T{
cookie
T}	T{
Cookies \fIobject\fP\&.
T}
_
T{
form
T}	T{
Form data \fIobject\fP\&.
Contains the decoded body as key\-value
pairs if the \fIContent\-Type\fP header was
\fBapplication/x\-www\-form\-urlencoded\fP\&.
T}
_
T{
headers
T}	T{
Request headers \fIobject\fP\&.
T}
_
T{
id
T}	T{
Requested document id \fIstring\fP if it was
specified or \fBnull\fP otherwise.
T}
_
T{
info
T}	T{
\fIDatabase information\fP
T}
_
T{
method
T}	T{
Request method as \fIstring\fP or \fIarray\fP\&.
String value is a method as one of: \fIHEAD\fP,
\fIGET\fP, \fIPOST\fP, \fIPUT\fP, \fIDELETE\fP, \fIOPTIONS\fP,
and \fITRACE\fP\&. Otherwise it will be
represented as an array of char codes.
T}
_
T{
path
T}	T{
List of requested path sections.
T}
_
T{
peer
T}	T{
Request source IP address.
T}
_
T{
query
T}	T{
URL query parameters \fIobject\fP\&.
Note that multiple keys are not supported
and the last key value suppresses others.
T}
_
T{
requested_path
T}	T{
List of actual requested path section.
T}
_
T{
raw_path
T}	T{
Raw requested path \fIstring\fP\&.
T}
_
T{
secObj
T}	T{
\fIsecurity_object\fP\&.
T}
_
T{
userCtx
T}	T{
\fIuserctx_object\fP\&.
T}
_
T{
uuid
T}	T{
Generated UUID by a specified algorithm in
the config file.
T}
_
.TE
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "body": "undefined",
    "cookie": {
        "AuthSession": "cm9vdDo1MDZBRjQzRjrfcuikzPRfAn\-EA37FmjyfM8G8Lw",
        "m": "3234"
    },
    "form": {},
    "headers": {
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Accept\-Charset": "ISO\-8859\-1,utf\-8;q=0.7,*;q=0.3",
        "Accept\-Encoding": "gzip,deflate,sdch",
        "Accept\-Language": "en\-US,en;q=0.8",
        "Connection": "keep\-alive",
        "Cookie": "m=3234:t|3247:t|6493:t|6967:t|34e2:|18c3:t|2c69:t|5acb:t|ca3:t|c01:t|5e55:t|77cb:t|2a03:t|1d98:t|47ba:t|64b8:t|4a01:t; AuthSession=cm9vdDo1MDZBRjQzRjrfcuikzPRfAn\-EA37FmjyfM8G8Lw",
        "Host": "127.0.0.1:5984",
        "User\-Agent": "Mozilla/5.0 (Windows NT 5.2) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.75 Safari/535.7"
    },
    "id": "foo",
    "info": {
        "committed_update_seq": 2701412,
        "compact_running": false,
        "data_size": 7580843252,
        "db_name": "mailbox",
        "disk_format_version": 6,
        "disk_size": 14325313673,
        "doc_count": 2262757,
        "doc_del_count": 560,
        "instance_start_time": "1347601025628957",
        "purge_seq": 0,
        "update_seq": 2701412
    },
    "method": "GET",
    "path": [
        "mailbox",
        "_design",
        "request",
        "_show",
        "dump",
        "foo"
    ],
    "peer": "127.0.0.1",
    "query": {},
    "raw_path": "/mailbox/_design/request/_show/dump/foo",
    "requested_path": [
        "mailbox",
        "_design",
        "request",
        "_show",
        "dump",
        "foo"
    ],
    "secObj": {
        "admins": {
            "names": [
                "Bob"
            ],
            "roles": []
        },
        "members": {
            "names": [
                "Mike",
                "Alice"
            ],
            "roles": []
        }
    },
    "userCtx": {
        "db": "mailbox",
        "name": "Mike",
        "roles": [
            "user"
        ]
    },
    "uuid": "3184f9d1ea934e1f81a24c71bde5c168"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Request2 object
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
body
T}	T{
Request body data as \fIstring\fP\&.
If the request method is \fIGET\fP this field
contains the value \fB"undefined"\fP\&. If the
method is \fIDELETE\fP or \fIHEAD\fP the value is
\fB""\fP (empty string).
T}
_
T{
cookie
T}	T{
Cookies \fIobject\fP\&.
T}
_
T{
headers
T}	T{
Request headers \fIobject\fP\&.
T}
_
T{
method
T}	T{
Request method as \fIstring\fP or \fIarray\fP\&.
String value is a method as one of: \fIHEAD\fP,
\fIGET\fP, \fIPOST\fP, \fIPUT\fP, \fIDELETE\fP, \fIOPTIONS\fP,
and \fITRACE\fP\&. Otherwise it will be
represented as an array of char codes.
T}
_
T{
path
T}	T{
List of requested path sections.
T}
_
T{
peer
T}	T{
Request source IP address.
T}
_
T{
query
T}	T{
URL query parameters \fIobject\fP\&.
Note that multiple keys are not supported
and the last key value suppresses others.
T}
_
T{
requested_path
T}	T{
List of actual requested path section.
T}
_
T{
raw_path
T}	T{
Raw requested path \fIstring\fP\&.
T}
_
T{
secObj
T}	T{
\fIsecurity_object\fP\&.
T}
_
T{
userCtx
T}	T{
\fIuserctx_object\fP\&.
T}
_
.TE
.SS Response object
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
code
T}	T{
HTTP status code \fInumber\fP\&.
T}
_
T{
json
T}	T{
JSON encodable \fIobject\fP\&.
Implicitly sets \fIContent\-Type\fP header as
\fBapplication/json\fP\&.
T}
_
T{
body
T}	T{
Raw response text \fIstring\fP\&.
Implicitly sets \fIContent\-Type\fP header as
\fBtext/html; charset=utf\-8\fP\&.
T}
_
T{
base64
T}	T{
Base64 encoded \fIstring\fP\&.
Implicitly sets \fIContent\-Type\fP header as
\fBapplication/binary\fP\&.
T}
_
T{
headers
T}	T{
Response headers \fIobject\fP\&.
\fIContent\-Type\fP header from this object
overrides any implicitly assigned one.
T}
_
T{
stop
T}	T{
\fIboolean\fP signal to stop iteration over
view result rows (for list functions only)
T}
_
.TE
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
The \fBbody\fP, \fBbase64\fP and \fBjson\fP object keys are overlapping each other
where the last one wins. Since most realizations of key\-value objects do
not preserve the key order or if they are mixed, confusing situations can
occur. Try to use only one of them.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Any custom property makes CouchDB raise an internal exception. Furthermore,
the \fIResponse object\fP could be a simple string value which would be
implicitly wrapped into a \fB{"body": ...}\fP object.
.UNINDENT
.UNINDENT
.SS Returned CouchDB Document with Detailed Revision Info
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
_id (optional)
T}	T{
Document ID
T}
_
T{
_rev (optional)
T}	T{
Revision ID (when updating an existing
document)
T}
_
T{
_revs_info [array]
T}	T{
CouchDB document extended revision info
T}
_
T{
rev
T}	T{
Full revision string
T}
_
T{
status
T}	T{
Status of the revision
T}
_
.TE
.SS Returned CouchDB Document with Revision Info
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
_id (optional)
T}	T{
Document ID
T}
_
T{
_rev (optional)
T}	T{
Revision ID (when updating an existing
document)
T}
_
T{
_revisions
T}	T{
CouchDB document revisions
T}
_
T{
ids [array]
T}	T{
Array of valid revision IDs, in reverse
order (latest first)
T}
_
T{
start
T}	T{
Prefix number for the latest revision
T}
_
.TE
.SS Returned Document with Attachments
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
_id (optional)
T}	T{
Document ID
T}
_
T{
_rev (optional)
T}	T{
Revision ID (when updating an existing
document)
T}
_
T{
_attachments (optional)
T}	T{
Document attachment
T}
_
T{
filename
T}	T{
Attachment
T}
_
T{
stub
T}	T{
Indicates whether the attachment is a stub
T}
_
T{
content_type
T}	T{
MIME Content type string
T}
_
T{
length
T}	T{
Length (bytes) of the attachment data
T}
_
T{
revpos
T}	T{
Revision where this attachment exists
T}
_
.TE
.SS Security Object
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
admins
T}	T{
Roles/Users with admin privileges
T}
_
T{
roles [array]
T}	T{
List of roles with parent privilege
T}
_
T{
names [array]
T}	T{
List of users with parent privilege
T}
_
T{
members
T}	T{
Roles/Users with non\-admin privileges
T}
_
T{
roles [array]
T}	T{
List of roles with parent privilege
T}
_
T{
names [array]
T}	T{
List of users with parent privilege
T}
_
.TE
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "admins": {
        "names": [
            "Bob"
        ],
        "roles": []
    },
    "members": {
        "names": [
            "Mike",
            "Alice"
        ],
        "roles": []
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS User Context Object
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
db
T}	T{
Database name in the context of the
provided operation.
T}
_
T{
name
T}	T{
User name.
T}
_
T{
roles
T}	T{
List of user roles.
T}
_
.TE
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "db": "mailbox",
    "name": null,
    "roles": [
        "_admin"
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS View Head Information
.TS
center;
|l|l|.
_
T{
Field
T}	T{
Description
T}
_
T{
total_rows
T}	T{
Number of documents in the view
T}
_
T{
offset
T}	T{
Offset where the document list started
T}
_
.TE
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "total_rows": 42,
    "offset": 3
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Experimental Features
.sp
This is a list of experimental features in CouchDB. They are included in
a release because the development team is requesting feedback from the
larger developer community. As such, please play around with these
features and send us feedback, thanks!
.sp
Use at your own risk! Do not rely on these features for critical applications.
.SS Content\-Security\-Policy (CSP) Header Support for /_utils (Fauxton)
.sp
This will just work with Fauxton. You can enable it in your config: you
can enable the feature in general and change the default header that is
sent for everything in /_utils.
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[csp]
enable = true
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Then restart CouchDB.
.sp
Have fun!
.SS Contributing to this Documentation
.sp
The documentation lives in its own source tree. We\(aqll start by forking and
cloning the CouchDB documentation GitHub mirror. That will allow us to send the
contribution to CouchDB with a pull request.
.sp
If you don\(aqt have a GitHub account yet, it is a good time to get one, they are
free. If you don\(aqt want to use GitHub, there are alternate ways to
contributing back, that we\(aqll cover next time.
.sp
Go to \fI\%https://github.com/apache/couchdb\-documentation\fP and click the "fork"
button in the top right. This will create a fork of CouchDB in your GitHub
account. If your account is \fIusername\fP, your fork lives at
\fI\%https://github.com/username/couchdb\-documentation\fP\&. In the header, it tells me my
"GitHub Clone URL". We need to copy that and start a terminal:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ git clone https://github.com/username/couchdb\-documentation.git
$ cd couchdb\-documentation
$ subl .
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
I\(aqm opening the whole CouchDB documentation source tree in my favourite editor.
It gives me the usual directory listing:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ebin/
ext/
\&.git/
\&.gitignore
images/
LICENSE
make.bat
Makefile
NOTICE
rebar.config
src/
static/
templates/
themes/
\&.travis.yml
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The documentation sources live in \fIsrc\fP, you can safely ignore all
the other files and directories.
.sp
First we should determine where we want to document this inside the
documentation. We can look through \fI\%http://docs.couchdb.org/en/latest/\fP
for inspiration. The \fI\%JSON Structure Reference\fP looks like a fine place to
write this up.
.sp
The current state includes mostly tables describing the JSON structure (after
all, that\(aqs the title of this chapter), but some prose about the number
representation can\(aqt hurt. For future reference, since the topic in the thread
includes views and different encoding in views (as opposed to the storage
engine), we should remember to make a note in the views documentation as well,
but we\(aqll leave this for later.
.sp
Let\(aqs try and find the source file that builds the file
\fI\%http://docs.couchdb.org/en/latest/json\-structure.html\fP \-\- we are in luck, under
\fIshare/doc/src\fP we find the file \fIjson\-structure.rst\fP\&. That looks promising.
\fI\&.rst\fP stands for ReStructured Text (see
\fI\%http://thomas\-cokelaer.info/tutorials/sphinx/rest_syntax.html\fP
for a markup reference), which is an ASCII format for writing
documents, documentation in this case. Let\(aqs have a look and open it.
.sp
We see ASCII tables with some additional formatting, all looking like the
final HTML. So far so easy. For now, let\(aqs just add to the bottom of this. We
can worry about organising this better later.
.sp
We start by adding a new headline:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Number Handling
===============
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now we paste in the rest of the main email of the thread. It is mostly text,
but it includes some code listings. Let\(aqs mark them up. We\(aqll turn:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ejson:encode(ejson:decode(<<"1.1">>)).
<<"1.1000000000000000888">>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Into:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&.. code\-block:: erlang

    ejson:encode(ejson:decode(<<"1.1">>)).
    <<"1.1000000000000000888">>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And we follow along with the other code samples. We turn:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Spidermonkey

$ js \-h 2>&1 | head \-n 1
JavaScript\-C 1.8.5 2011\-03\-31
$ js
js> JSON.stringify(JSON.parse("1.01234567890123456789012345678901234567890"))
"1.0123456789012346"
js> var f = JSON.stringify(JSON.parse("1.01234567890123456789012345678901234567890"))
js> JSON.stringify(JSON.parse(f))
"1.0123456789012346"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
into:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Spidermonkey::

    $ js \-h 2>&1 | head \-n 1
    JavaScript\-C 1.8.5 2011\-03\-31
    $ js
    js> JSON.stringify(JSON.parse("1.01234567890123456789012345678901234567890"))
    "1.0123456789012346"
    js> var f = JSON.stringify(JSON.parse("1.01234567890123456789012345678901234567890"))
    js> JSON.stringify(JSON.parse(f))
    "1.0123456789012346"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And then follow all the other ones.
.sp
I cleaned up the text a little but to make it sound more like a documentation
entry as opposed to a post on a mailing list.
.sp
The next step would be to validate that we got all the markup right. I\(aqll
leave this for later. For now we\(aqll contribute our change back to CouchDB.
.sp
First, we commit our changes:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ > git commit \-am \(aqdocument number encoding\(aq
[master a84b2cf] document number encoding
1 file changed, 199 insertions(+)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Then we push the commit to our CouchDB fork:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ git push origin master
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Next, we go back to our GitHub page
\fI\%https://github.com/username/couchdb\-documentation\fP and click the "Pull Request"
button. Fill in the description with something useful and hit the
"Send Pull Request" button.
.sp
And we\(aqre done!
.SS Style Guidelines for this Documentation
.sp
When you make a change to the documentation, you should make sure that you
follow the style. Look through some files and you will see that the style is
quite straightforward. If you do not know if your formating is in compliance
with the style, ask yourself the following question:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Is it needed for correct syntax?
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the answer is \fBNo.\fP then it is probably not.
.sp
These guidelines strive be simple, without contradictions and exceptions. The
best style is the one that is followed because it seems to be the natural way of
doing it.
.SS The guidelines
.sp
The guidelines are in descending priority.
.INDENT 0.0
.IP 1. 3
Syntax
.INDENT 3.0
.IP \(bu 2
Correct syntax is always more important than style. This includes
configuration files, HTML responses, etc.
.UNINDENT
.IP 2. 3
Encoding
.INDENT 3.0
.IP \(bu 2
All files are \fBUTF\-8\fP\&.
.UNINDENT
.IP 3. 3
Line ending
.INDENT 3.0
.IP \(bu 2
All lines end with \fB\en\fP\&.
.IP \(bu 2
No trailing whitespace.
.UNINDENT
.IP 4. 3
Line length
.INDENT 3.0
.IP \(bu 2
The maximum line length is \fB80\fP characters.
.UNINDENT
.IP 5. 3
Links
.INDENT 3.0
.IP \(bu 2
All internal links are relative.
.UNINDENT
.IP 6. 3
Indentation
.INDENT 3.0
.IP \(bu 2
\fB4\fP spaces.
.UNINDENT
.IP 7. 3
Titles
.INDENT 3.0
.IP \(bu 2
The highest level titles in a file is over and underlined with \fB=\fP\&.
.IP \(bu 2
Lower level titles are underlined with the following characters in
descending order:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
= \- ^ *  + # \(ga : . " ~ _
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Over and underline match the title length.
.UNINDENT
.IP 8. 3
Empty lines
.INDENT 3.0
.IP \(bu 2
No empty line at the end of the file.
.IP \(bu 2
Lists may separated each item with an empty line.
.UNINDENT
.UNINDENT
.SS Release History
.SS 2.2.x Branch
.INDENT 0.0
.IP \(bu 2
\fI\%Upgrade Notes\fP
.IP \(bu 2
\fI\%Version 2.2.0\fP
.UNINDENT
.SS Upgrade Notes
.INDENT 0.0
.IP \(bu 2
The minimum supported version of Erlang is now 17, not R16B03. Support for Erlang 21
is still ongoing and will be provided in a future release.
.IP \(bu 2
The CouchDB replication client can now use the \fB/_session\fP endpoint when
authenticating against remote CouchDB instances, improving performance since
re\-authorization does not have to be performed with every request. Because of
this performance improvement, it is recommended to increase the PBKDF2 work
factor beyond the default \fB10\fP to a modern default such as \fB10000\fP\&. This is done
via the local ini file setting \fB[couch_httpd_auth] iterations = 10000\fP\&.
.sp
Do \fBnot\fP do this if an older version of CouchDB is replicating TO this instance or
cluster regularly, since CouchDB < 2.2.0 must perform authentication on every request
and replication performance will suffer.
.sp
A future version will make this increased number of iterations a default.
.IP \(bu 2
\fI\%#820\fP, \fI\%#1032\fP: Multiple queries can now be made at the
\fBPOST /{db}/_all_docs/queries\fP, \fBPOST /{db}/_design_docs/queries\fP and
\fBPOST /{db}/_local_docs/queries\fP endpoints. Also, a new endpoint
\fBPOST /{db}/_design/{ddoc}/_view/{view}/queries\fP has been introduced to replace
the \fB?queries\fP parameter formerly provided for making multiple queries to a view.
The old \fB?queries\fP parameter \fIis now deprecated and will be removed in a future
release of CouchDB.\fP
.IP \(bu 2
The maximum http request limit, which had been lowered in 2.1.0, has been re\-raised
to a 4GB limit for now. (\fI\%#1446\fP). Ongoing discussion about the path forward
for future releases is available in \fI\%#1200\fP and \fI\%#1253\fP\&.
.IP \(bu 2
\fI\%#1118\fP: The least recently used (LRU) cache of databases is now only updated
on database write, not read. This has lead to significant performance enhancements
on very busy clusters. To restore the previous behaviour, your local ini file can
contain the block \fB[couchdb] update_lru_on_read = true\fP\&.
.IP \(bu 2
\fI\%#1153\fP: The CouchDB replicator can now make use of the \fB/_session\fP endpoint
rather than relying entirely on HTTP basic authentication headers. This can greatly
improve replication performance. We encourage you to upgrade any nodes or clusters that
regularly act as replication clients to use this new feature, which is enabled by
default (\fI\%#1462\fP).
.IP \(bu 2
\fI\%#1283\fP: The \fB[couchdb] enable_database_recovery\fP feature, which only
soft\-deletes databases in response to a \fBDELETE /{db}\fP call, is now documented in
\fBdefault.ini\fP\&.
.IP \(bu 2
\fI\%#1330\fP: CouchDB externals and OS daemons are now officially deprecated and no
longer documented. Support for these features will be completely removed in a future
release of CouchDB (probably 3.0.0).
.IP \(bu 2
\fI\%#1436\fP: CouchDB proxy authentication now uses a proper \fBchttpd_auth\fP
module, simplifying configuration in local ini files. While this is not a backward\-
compatible breaking change, it is best to update your local ini files to reference the
new \fB{chttpd_auth, proxy_authentication_handler}\fP handler rather than the
\fBcouch_httpd_auth\fP version, as \fBcouch_httpd\fP is in the process of being deprecated
completely.
.IP \(bu 2
\fI\%#1476\fP, \fI\%#1477\fP: The obsolete \fIupdate_notification\fP feature, which
was replaced by \fI/{db}/_changes\fP feeds c. CouchDB 1.2, has been completely removed.
This feature never worked in 2.0 for databases, only for shards, making it effectively
useless.
.UNINDENT
.SS Version 2.2.0
.SS Features
.INDENT 0.0
.IP \(bu 2
Much improved documentation. Highlights include:
.INDENT 2.0
.IP \(bu 2
A complete rewrite of the \fIsharding\fP documentation.
.IP \(bu 2
Developer installation notes (\fBINSTALL.*.rst\fP)
.IP \(bu 2
Much of the content of the original CouchDB Wiki has been imported into the
official docs. (The old CouchDB Wiki is in the process of being deprecated.)
.UNINDENT
.IP \(bu 2
Much improved Fauxton functionality. Highlights include:
.INDENT 2.0
.IP \(bu 2
Search support in the code editor
.IP \(bu 2
Support for relative Fauxton URLs (\fIi.e.\fP, not always at \fB/_utils\fP)
.IP \(bu 2
Replication setup enhancements for various authentication mechanisms
.IP \(bu 2
Fixes for IE10, IE11, and Edge (we hope...)
.IP \(bu 2
Resolving conflicts of design documents is now allowed
.UNINDENT
.IP \(bu 2
\fI\%#496\fP, \fI\%COUCHDB\-3287\fP: New pluggable storage engine framework has landed in
CouchDB. This internal refactor makes it possible for CouchDB to use different backends
for storing the base database file itself. The refactor included a full migration of
the existing "legacy" storage engine into the new framework.
.IP \(bu 2
\fI\%#603\fP: When creating a new database on a cluster without quorum, CouchDB will
now return a \fB202 Accepted\fP code if possible, indicating that at least one node
has written the database record to disk, and that other nodes will be updated as they
return to an online state. This replaces the former \fB500\fP internal error.
.IP \(bu 2
\fI\%#1136\fP, \fI\%#1139\fP: When deleting a database in a cluster without
quorum, CouchDB will no longer throw a \fB500\fP error status, but a \fB202\fP as long as
at least one node records the deletion, or a \fB200\fP when all nodes respond. This fix
parallels the one made for \fI\%#603\fP\&.
.IP \(bu 2
\fI\%#745\fP: CouchDB no longer fails to complete replicating databases with
large attachments. The fix for this issue included several related changes:
.INDENT 2.0
.IP \(bu 2
The maximum http request limit, which had been lowered in 2.1.0, has been re\-raised
to a 4GB limit for now. (\fI\%#1446\fP). Ongoing discussion about the path forward
for future releases is available in \fI\%#1200\fP and \fI\%#1253\fP\&.
.IP \(bu 2
An update to the replicator http client that improves active socket accounting,
without which CouchDB can cease to be responsive over the main http interface
(\fI\%#1117\fP)
.IP \(bu 2
The replicator\(aqs http client no longer performs unconditional retries on failure
(\fI\%#1177\fP)
.IP \(bu 2
A path by which CouchDB could lose track of their RPC workers during multipart
attachment processing was removed. (\fI\%#1178\fP)
.IP \(bu 2
When CouchDB transmits a \fB413 Payload Too Large\fP response on attachment upload,
it now correctly flushes the receive socket before closing the connection to avoid
a TCP reset, and to give the client a better chance of parsing the 413 response. In
tandem, the replicator http client correctly closes its own socket after processing
any 413 response. (\fI\%#1234\fP)
.IP \(bu 2
A \fBfabric\fP process to receive unchunked attachments can no longer orphan processes
that leave unprocessed binaries in memory until all available memory is exhausted.
(\fI\%#1264\fP).
.IP \(bu 2
When using CouchDB\(aqs native SSL responder (port 6984 by default), sessions are now
timed out by default after 300s. This is to work around RAM explosion in the BEAM VM
when using the Erlang\-native SSL libraries. (\fI\%#1321\fP
.UNINDENT
.IP \(bu 2
\fI\%#822\fP: A new end point \fIapi/server/dbs_info\fP has been added to return
information about a list of specified databases. This endpoint can take the place of
multiple queries to \fB/{db}\fP\&.
.IP \(bu 2
\fI\%#875\fP, \fI\%#1030\fP: \fBcouch_peruser\fP installations can now specify a
default \fBq\fP value for each peruser\-created database that is different from the
cluster\(aqs \fBq\fP value. Set this in your local ini file, under \fB[couch_peruser] q\fP\&.
.IP \(bu 2
\fI\%#876\fP, \fI\%#1068\fP: The \fBcouch_peruser\fP database prefix is now
configurable through your local ini file, under \fB[couch_peruser] database_prefix\fP\&.
.IP \(bu 2
\fI\%#887\fP: Replicator documents can now include parameters for target database
creation, such as \fB"create_target_params": {"q": "1"}\fP\&. This can assist in
database resharding or placement.
.IP \(bu 2
\fI\%#977\fP: When using \fBCOPY\fP to copy a document, CouchDB no longer fails if
the new ID includes Unicode characters.
.IP \(bu 2
\fI\%#1095\fP: Recognize the environment variables \fBARGS_FILE\fP, \fBSYSCONFIG_FILE\fP,
\fBCOUCHDB_ARGS_FILE\fP and \fBCOUCHDB_SYSCONFIG_FILE\fP to overrride where CouchDB looks
for the \fBvm.args\fP and \fBsys.config\fP files at startup.
.IP \(bu 2
\fI\%#1101\fP, \fI\%#1425\fP: Mango can now be used to find conflicted documents
in a database by adding \fBconflicts: true\fP to a mango selector.
.IP \(bu 2
\fI\%#1126\fP: When queried back after saving, replication documents no longer
contain sensitive credential information (such as basic authenticataion headers).
.IP \(bu 2
\fI\%#1203\fP:
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
The compaction daemon now has a snooze period, during which it waits to start
the next compaction after finishing the previous one. This value is useful in
setups with many databases (e.g. with \fBcouch_peruser\fP) or many design docs,
which can cause a CPU spike every \fBcheck_interval\fP seconds. The setting can
be adjusted in your local ini file via \fB[compaction_daemon] snooze_period\fP\&.
The current default is a 3 second pause.
.IP \(bu 2
The \fBcheck_interval\fP has been raised from 300 seconds to 3600 seconds.
.IP \(bu 2
A \fBnotice\fP\-level log about closing view indexes has been demoted to the
\fBdebug\fP level. In a sceario with many design docs, this would createsignficant
load on the logging subsystem every \fB[compaction_daemon] check_interval\fP for
no discernible benefit.
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
\fI\%#1309\fP, \fI\%#1435\fP: CouchDB now reports the git sha at the time of build
in the top\-level \fBGET /\fP version string, in a new \fBgit_sha\fP key. This can be used
to help ensure an unmodified version of CouchDB has been built and is running on any
given machine.
.IP \(bu 2
\fI\%COUCHDB\-2971\fP, \fI\%#1346\fP: CouchDB now includes a new builtin reduce function
\fB_approx_count_distinct\fP, that uses a HyperLogLog algorithm to estimate the number of
distinct keys in the view index. The precision is currently fixed to 2^11 observables,
and therefore uses approximately 1.5KB of memory.
.IP \(bu 2
\fI\%#1377\fP: CouchDB finalization of view reduces now occurs at the coordinator
node. This simplified the built\-in \fB_stats\fP function.
.IP \(bu 2
\fI\%#1392\fP: When running CouchDB under Erlang 19.0 or newer, messages can now be
stored off the process heap. This is extremely useful for Erlang processes that can
have huge number of messages in their mailbox, and is now enabled for \fBcouch_server\fP,
\fBcouch_log_server\fP, \fBddoc_cache\fP, \fBmem3_shards\fP, and \fBrexi_server\fP whenever
possible.
.IP \(bu 2
\fI\%#1424\fP: The CouchDB native SSL/TLS server \fBhttpsd\fP now accepts socket\-level
configuration options through the \fB[httpsd] server_options\fP ini file setting.
.IP \(bu 2
\fI\%#1440\fP: CouchDB can now be configured to prevent non\-admins from accessing
the \fBGET /_all_dbs\fP method by specifying \fB[chttpd] admin_only_all_dbs = true\fP in
your local ini file(s). The \fBtrue\fP setting will become default in future versions.
.IP \(bu 2
\fI\%#1171\fP, \fI\%#1445\fP: CouchDB can now be configured to use the internal
Erlang MD5 hash function when not available in the external environment (e.g. FIPS
enabled CentOS) at compile time with the \fBconfigure\fP flag \fB\-\-enable\-md5\fP\&. Because
this implementation is slower, it is not recommended in the general case.
.UNINDENT
.SS Performance
.INDENT 0.0
.IP \(bu 2
\fI\%#958\fP: The revision stemming algorithm was optimized down from \fIO(N^2)\fP to
\fIO(N)\fP via a depth\-first search approach, and then further improved by calling the
stemming operation only when necessary. This new algorithm can be disabled by
setting the option \fB[couchdb] stem_interactive_updates = false\fP if necessary.
.IP \(bu 2
\fI\%#1246\fP: CouchDB now checks for request authorization only once per each
database request, improving the performance of any request that requires
authorization.
.UNINDENT
.SS Bugfixes
.INDENT 0.0
.IP \(bu 2
\fI\%#832\fP, \fI\%#1064\fP: Tracking of Couch logging stats has been added back
into the per\-node \fB/_node/<node\-name>/_stats\fP endpoint.
.IP \(bu 2
\fI\%#953\fP, \fI\%#973\fP: Return \fB404 Not Found\fP on \fBGET /_scheduler\fP,
not \fB405 Method Not Allowed\fP\&.
.IP \(bu 2
\fI\%#955\fP: The \fB/{db}/_bulk_docs\fP endpoint now correctly responds with a
\fB400 Bad Request\fP error if the \fBnew_edits\fP parameter is not a boolean.
.IP \(bu 2
\fI\%#969\fP: CouchDB now returns \fBoffset\fP and \fBupdate_seq\fP values when \fBkeys\fP
are provided to the \fBGET\fP or \fBPOST\fP \fB/{db}/_all_docs?update_seq=true\fP endpoints.
This was affecting PouchDB compatibility.
.IP \(bu 2
\fI\%#984\fP, \fI\%#1434\fP: CouchDB views now retain their \fBupdate_seq\fP after
compaction, preventing potentially expensive client\-side view rewinds after compaction.
.IP \(bu 2
\fI\%#1012\fP: Address a theoretical race condition the replication scheduler could
encounter when trying to determine if the cluster is "stable" enough to resume
handling replication\-introduced document updates.
.IP \(bu 2
\fI\%#1051\fP: Return a user\-friendly error message when attempting to create a
CouchDB user with an invalid password field (non\-string).
.IP \(bu 2
\fI\%#1059\fP: DB\-specific compaction configurations were not working correctly. The
syntax now also supports shard\-level custom compaction configuration if desired (which
it probably isn\(aqt.)
.IP \(bu 2
\fI\%#1097\fP: Compaction daemon will not crash out when trying to check specific
file system mounts that are not "real" file systems (like \fB/run\fP on Linux).
.IP \(bu 2
\fI\%#1198\fP: Fauxton is no longer available on the node\-local port (5986, by
default). The node\-local port is only to be used for specific administrative tasks;
removing the Fauxton interface prevents mistaking the node\-local port as the correct
CouchDB port (5984, by default).
.IP \(bu 2
\fI\%#1165\fP: \fBvalidate_doc_update\fP view functions can once again be implemented
directly in Erlang (after enabling the optional Erlang view server).
.IP \(bu 2
\fI\%#1223\fP: The \fBcouch_config\fP application now correctly handles non\-persistent
integer and boolean\-valued configuration changes.
.IP \(bu 2
\fI\%#1242\fP: \fBcouch_os_daemons\fP may now reside in directories with spaces.
.IP \(bu 2
\fI\%#1258\fP: CouchDB will now successfully login users, even if password encryption
is very slow.
.IP \(bu 2
\fI\%#1276\fP: The replication scheduler status for a repeatedly erroring job now
correctly reflects the \fIcrashing\fP state in more scenarios.
.IP \(bu 2
\fI\%#1375\fP: If CouchDB fails authorization but passes authentication, it no longer
drops the \fBuser_ctx\fP out of the request.
.IP \(bu 2
\fI\%#1390\fP: The active size of views (as returned in a database info response) no
longer is incorrectly calculated in such a way that it could occasionally be larger than
the actual on\-disk file size.
.IP \(bu 2
\fI\%#1401\fP: CouchDB Erlang views no longer crash in the \fBcouch_native\fP process
with an unexpected \fBfunction_clause\fP error.
.IP \(bu 2
\fI\%#1419\fP: When deleting a file, CouchDB now properly ignores the configuration
flag \fBenable_database_recovery\fP when set when compacting databases, rather than
always retaining the old, renamed, uncompacted database file.
.IP \(bu 2
\fI\%#1439\fP: The CouchDB setup wizard now correctly validates bind_addresses. It
also no longer logs credentials by moving logging of internal wizard setup steps to
the \fBdebug\fP level from the \fBnotice\fP level.
.UNINDENT
.SS Mango
.INDENT 0.0
.IP \(bu 2
\fI\%#816\fP, \fI\%#962\fP, \fI\%#1038\fP: If a user specifies a value for
\fBuse_index\fP that is not valid for the selector (does not meet coverage requirements
or proper sort fields), attempt to fall back to a valid index or full DB scan rather
than returning  a \fB400\fP\&.  If we fall back, populate a \fBwarning\fP field in the
response. Mango also tries to use indexes where \fB$or\fP may select a field only when
certain values are present.
.IP \(bu 2
\fI\%#849\fP: When \fB{"seq_indexed": true}\fP is specified, a badmatch error was
returned. This is now fixed.
.IP \(bu 2
\fI\%#927\fP, \fI\%#1310\fP: Error messages when attempting to sort incorrectly are
now actually useful.
.IP \(bu 2
\fI\%#951\fP: When using \fBGET /{db}/_index\fP, only use a partial filter selector for
an index if it is set to something other than the default.
.IP \(bu 2
\fI\%#961\fP: Do not prefix \fB_design/\fP to a Mango index name whose user\-specified
name already starts with \fB_design/\fP\&.
.IP \(bu 2
\fI\%#988\fP, \fI\%#989\fP: When specifying a \fBuse_index\fP value with an invalid
index, correctly return a \fB400 Bad Request\fP showing that the requested index is
invalid for the request specified.
.IP \(bu 2
\fI\%#998\fP: The fix for \fICVE 2017\-12635\fP presented a breaking
change to Mango\(aqs \fB/{db}/_find\fP, which would evaluate all instances of all JSON
fields in a selector. Mango is now tested to ensure it only considers the last instance
of a field, silently ignoring those that appear before it.
.IP \(bu 2
\fI\%#1014\fP: Correctly deduce list of indexed fields in a selector when nested
\fB$and\fP operators are specified.
.IP \(bu 2
\fI\%#1023\fP: Fix an unexpected \fB500\fP error if \fBstartkey\fP and \fBendkey\fP in a
Mango selector were reversed.
.IP \(bu 2
\fI\%#1067\fP: Prevent an \fBinvalid_cast\fP crash when the \fBcouch_proc_manager\fP soft
limit for processes is reached and mango idle processes are stopped.
.IP \(bu 2
\fI\%#1336\fP: The built\-in fields \fB_id\fP and \fBrev\fP will always be covered by any
index, and Mango now correctly ignores their presence in any index that explicitly
includes them for selector matching purposes.
.IP \(bu 2
\fI\%#1376\fP: Mango now appropriately selects some indexes as usable for queries,
even if not all columns for an index are added to the query\(aqs sort field list.
.IP \(bu 2
Multiple fixes related to using Mango as a front\-end for full text indexing (a feature
not shipped with couch, but for which support is in place as a compile\-time addon).
.UNINDENT
.SS Other
.sp
The 2.2.0 release also includes the following minor improvements:
.INDENT 0.0
.IP \(bu 2
Developers can, at build time, enable curl libraries & disable Fauxton and documentation
builds by specifying the new \fB\-\-dev\fP option to the \fBconfigure\fP script.
.IP \(bu 2
The \fBmochiweb\fP dependency was bumped to version 2.17.0, in part to address the
difficult \fI\%#745\fP issue.
.IP \(bu 2
Improved compatibility with newer versions of Erlang (20.x)
.IP \(bu 2
Improved release process for CouchDB maintainers and PMC members.
.IP \(bu 2
Multiple test suite improvements, focused on increased coverage, speed, and
reliability.
.IP \(bu 2
Improvements to the Travis CI and Jenkins CI setups, focused on improved long\-term
project maintenance and automatability.
.IP \(bu 2
Related improvements to the CouchDB deb/rpm packaging and Docker repositories to
make deployment even easier.
.IP \(bu 2
\fI\%#1007\fP: Move \fBetc/default.ini\fP entries back into \fB[replicator]\fP section
(incorrectly moved to \fB[couch_peruser]\fP section)
.IP \(bu 2
\fI\%#1245\fP: Increased debug\-level logging for shard open errors is now available.
.IP \(bu 2
\fI\%#1296\fP: CouchDB by default now always invokes the SMP\-enabled BEAM VM, even
on single\-processor machines. A future release of Erlang will remove the non\-SMP BEAM
VM entirely.
.IP \(bu 2
A pony! OK, no, not really. If you got this far...thank you for reading.
.UNINDENT
.SS 2.1.x Branch
.INDENT 0.0
.IP \(bu 2
\fI\%Upgrade Notes\fP
.IP \(bu 2
\fI\%Version 2.1.2\fP
.IP \(bu 2
\fI\%Version 2.1.1\fP
.IP \(bu 2
\fI\%Version 2.1.0\fP
.IP \(bu 2
\fI\%Fixed Issues\fP
.UNINDENT
.SS Upgrade Notes
.INDENT 0.0
.IP \(bu 2
When upgrading from 2.x to 2.1.1, if you have not customized your
node name in \fBvm.args\fP, be sure to retain your original \fBvm.args\fP
file. The default node name has changed from \fBcouchdb@localhost\fP to
\fBcouchdb@127.0.0.1\fP, which can prevent CouchDB from accessing existing
databases on the system. You may also change the name option back to the
old value by setting \fB\-name couchdb@localhost\fP in \fBetc/vm.args\fP by
hand. The default has changed to meet new guidelines and to provide
additional functionality in the future.
.sp
If you receive errors in the logfile, such as
\fBinternal_server_error : No DB shards could be opened.\fP or in Fauxton,
such as \fBThis database failed to load.\fP you need to make this change.
.IP \(bu 2
The deprecated (and broken) OAuth 1.0 implementation has been removed.
.IP \(bu 2
If user code reads or manipulates replicator document states,
consider using the \fB[replicator] update_docs = true\fP compatibility
parameter. In that case the replicator will continue updating documents
with transient replication states. However, that will incur a
performance cost. Consider instead using the \fB_scheduler/docs\fP HTTP
endpoint.
.IP \(bu 2
The \fBstale\fP parameter for views and \fB_find\fP has been deprecated in favour
of two new parameters: \fBstable\fP and \fBupdate\fP\&. The old \fBstale=ok\fP
behaviour is equivalent to \fBstable=true&update=false\fP, and the old
\fBstale=update_after\fP behaviour is equivalent to \fBstable=true&update=lazy\fP\&.
The deprecated \fBstale\fP parameter will be removed in CouchDB 3.0.
.IP \(bu 2
The new \fBhttpd/max_http_request_size\fP configuration parameter
was added. This has the same behavior as the old
\fBcouchdb/max_document_size\fP configuration parameter, which
had been unfortunately misnamed, and has now been updated to behave as the
name would suggest. Both are documented in the shipped \fBdefault.ini\fP file.
.sp
Note that the default for this new parameter is 64MB instead of 4GB. If you
get errors when trying to PUT or POST and see HTTP 413 return codes in couchdb
logs, this could be the culprit. This can affect couchup in\-place upgrades as
well.
.IP \(bu 2
\fI\%#914\fP: Certain critical config sections are blacklisted from being
modified through the HTTP API. These sections can still be modified through
the standard \fBlocal.ini\fP or \fBlocal.d/*.ini\fP files.
.IP \(bu 2
\fI\%#916\fP: \fBcouchjs\fP now disables \fBeval()\fP and the \fBFunction()\fP
constructor by default. To restore the original behaviour, add the
\fB\-\-eval\fP flag to the definition of the javascript query server in your
\fBlocal.ini\fP file.
.UNINDENT
.SS Version 2.1.2
.SS Security
.INDENT 0.0
.IP \(bu 2
\fICVE 2018\-8007\fP
.UNINDENT
.SS Version 2.1.1
.SS Security
.INDENT 0.0
.IP \(bu 2
\fICVE 2017\-12635\fP
.IP \(bu 2
\fICVE 2017\-12636\fP
.UNINDENT
.SS General
.INDENT 0.0
.IP \(bu 2
\fI\%#617\fP: CouchDB now supports compilation and running under Erlang/OTP
20.x.
.IP \(bu 2
\fI\%#756\fP: The \fBcouch_peruser\fP functionality is now \fIreally\fP fixed.
Really.
.IP \(bu 2
\fI\%#827\fP: The cookie domain for AuthSession cookies, used in a
proxy authentication configuration, can now be customized via the ini file.
.IP \(bu 2
\fI\%#858\fP: It is now possible to modify shard maps for system databases.
.IP \(bu 2
\fI\%#732\fP: Due to an Erlang bug (\fI\%ERL\-343\fP), invalid paths can be
returned if volumes are mounted containing whitespace in their name. This
problem surfaced primarily on macOS (Time Machine volumes). CouchDB now
works around this bug in unpatched versions of Erlang by skipping the free
space check performed by the compaction daemon. Erlang itself will
correctly perform free space checks in version 21.0.
.IP \(bu 2
\fI\%#824\fP: The current node\(aqs local interface can now be accessed at
\fB/_node/_local/{endpoint}\fP as well as at
\fB/_node/<nodename>@<hostname>/{endpoint}\fP\&.
.IP \(bu 2
The Dockerfile in the source repository has been retired. For a current
Dockerfile, see the \fIcouchdb\-docker repository\fP\&.
.IP \(bu 2
Fauxton now uses a version of React with a BSD license.
.UNINDENT
.SS Performance
.INDENT 0.0
.IP \(bu 2
\fI\%#835\fP: CouchDB now no longer decompresses documents just to
determine their uncompressed size. In tests, this has lead to improvements
between 10\-40% in both CPU and wall\-clock time for database compaction.
.IP \(bu 2
The design document cache (\fBddoc_cache\fP) has been rewritten to improve
performance.
.UNINDENT
.SS Mango
.INDENT 0.0
.IP \(bu 2
\fI\%#808\fP: Mango now supports
\fIpartial indexes\fP\&. Partial indexes allow
documents to be filtered at indexing time, potentially offering
significant performance improvements for query selectors that don\(aqt map
cleanly to a range query on an index.
.IP \(bu 2
\fI\%#740\fP: Mango queries can now be paginated. Each query response
includes a bookmark.  The bookmark can be provided on a subsequent query to
continue from a specific key.
.IP \(bu 2
\fI\%#768\fP: Mango \fB_find\fP accepts an \fBexecution_stats\fP
parameter. If present, a new object is included in the response which
contains information about the query executed. The object contains the
count of total keys examined (0 for json indexes), total documents
examined (when \fBinclude_docs=true\fP is used), and the total quorum
documents examined (when fabric doc lookups are used).
.IP \(bu 2
\fI\%#816\fP and \fI\%#866\fP: Mango now requires that all of the fields
in a candidate index must exist in a query\(aqs selector. Previously, this check
was incorrect, and indexes that might only contain a subset of valid
documents might be selected by the query planner if no explicit index was
specified at query time. Further, if a sort field is specified at query time,
that field needs to exist (but could be null) in the results returned.
.UNINDENT
.SS Other
.sp
The 2.1.1 release also includes the following minor improvements:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%#635\fP: Stop couch_index processes on ddoc update
.IP \(bu 2
\fI\%#721\fP: Save migrated replicator checkpoint documents immediately
.IP \(bu 2
\fI\%#688\fP: Reuse http\-based replication checkpoints when upgrading
to https
.IP \(bu 2
\fI\%#729\fP: Recommend the use only of \fB\-name\fP and not \fB\-sname\fP in
\fIvm.args\fP for compatibility.
.IP \(bu 2
\fI\%#738\fP: Allow replicator application to always update replicator
docs.
.IP \(bu 2
\fI\%#605\fP: Add \fBPrefer: return=minimal\fP header options from
RFC7240 to reduce the number of headers in the response.
.IP \(bu 2
\fI\%#744\fP: Allow a 503 response to be returned to clients (with
metric support)
.IP \(bu 2
\fI\%#746\fP: Log additional information on crashes from rexi
.IP \(bu 2
\fI\%#752\fP: Allow Mango $in queries without requiring the index to
use an array
.IP \(bu 2
(multiple) Additional debugging utilities have been added.
.IP \(bu 2
(multiple) Hot code upgrades from 2.0 \-> 2.1.1 are now possible.
.IP \(bu 2
(multiple) Improvements to the test suite have been made.
.IP \(bu 2
\fI\%#765\fP: Mango \fB_explain\fP now includes view parameters as requested
by the user.
.IP \(bu 2
\fI\%#653\fP: \fI_show\fP and \fI_list\fP should now work for admin\-only
databases such as \fB_users\fP\&.
.IP \(bu 2
\fI\%#807\fP: Mango index selection should occur only once.
.IP \(bu 2
\fI\%#804\fP: Unhandled Mango errors are now logged.
.IP \(bu 2
\fI\%#659\fP: Improve accuracy of the \fBmax_document_size\fP check.
.IP \(bu 2
\fI\%#817\fP: Invalid Base64 in inline attachments is now caught.
.IP \(bu 2
\fI\%#825\fP: Replication IDs no longer need to be URL encoded when
using the \fB_scheduler/jobs/<job_id>\fP endpoint.
.IP \(bu 2
\fI\%#838\fP: Do not buffer rexi messages to disconnected nodes.
.IP \(bu 2
\fI\%#830\fP: The stats collection interval is now configurable in
an ini file, not in the application context. The default value is 10,
and the setting is reloaded every 600 seconds.
.IP \(bu 2
\fI\%#812\fP: The \fB/{db}\fP endpoint now includes a \fBcluster\fP block
with the database\(aqs \fBq\fP, \fBn\fP, and default \fBw\fP and \fBr\fP values.
This supplements the existing \fB/{db}/_shards\fP and \fB/{db}/_shards/{id}\fP
detailed information on sharding and quorum.
.IP \(bu 2
\fI\%#810\fP: The replicator scheduler crashed counter gauge more
reliably detects replication crashes by reducing the default number
of retries from 10 to 5 (reducing the duration from 4 mins to 8 secs).
.IP \(bu 2
\fI\%COUCHDB\-3288\fP: Tolerate mixed clusters for the upcoming pluggable
storage engine work.
.IP \(bu 2
\fI\%#839\fP: Mango python tests now support Python 3 as well as 2.
.IP \(bu 2
\fI\%#845\fP: A convenience \fBremsh\fP script has been added to support
live debugging of running systems.
.IP \(bu 2
\fI\%#846\fP: Replicator logging is now less verbose and more informative
when replication terminates unexpectedly.
.IP \(bu 2
\fI\%#797\fP: Reduce overflow errors are now returned to the client,
allowing views with a single bad reduce to build while not exhausting the
server\(aqs RAM usage.
.IP \(bu 2
\fI\%#881\fP: Mango now allows match on documents where the indexed
value is an object if a range query is issued. Previously, query results
might change in the presence of an index, and operators/selectors which
explicitly depend on a full index scan (such as \fB$exists\fP) would not
return a complete result set.
.IP \(bu 2
\fI\%#883\fP: Erlang time module compatibility has been improved for
releases of Erlang newer than 18.0.
.IP \(bu 2
\fI\%#933\fP: 410 is now returned when attempting to make a temporary
view request.
.IP \(bu 2
\fI\%#934\fP: The replicator now has a configurable delay before
retrying to retrieve a document after receiving a \fBmissing_doc\fP error.
.IP \(bu 2
\fI\%#936\fP: jiffy now deduplicates JSON keys.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Version 2.1.0
.INDENT 0.0
.IP \(bu 2
The Mango \fB_find\fP endpoint supports a new combination operator,
\fB$allMatch\fP, which matches and returns all documents that contain an
array field with all its elements matching all the specified query
criteria.
.IP \(bu 2
New scheduling replicator. The core of the new replicator is a
scheduler which allows running a large number of replication
jobs by switching between them, stopping some and starting others
periodically. Jobs which fail are backed off exponentially. There is
also an improved inspection and querying API: \fB_scheduler/jobs\fP and
\fB_scheduler/docs\fP:
.INDENT 2.0
.IP \(bu 2
\fB_scheduler/jobs\fP : This endpoint shows active replication
jobs. These are jobs managed by the scheduler. Some of them might
be running, some might be waiting to run, or backed off
(penalized) because they crashed too many times. Semantically this
is somewhat equivalent to \fB_active_tasks\fP but focuses only on
replications. Jobs which have completed or which were never
created because of malformed replication documents will not be
shown here as they are not managed by the scheduler.
\fB_replicate\fP replications, started form _replicate endpoint not
from a document in a \fB_replicator\fP db, will also show up here.
.IP \(bu 2
\fB_scheduler/docs\fP : This endpoint is an improvement on having to go
back and read replication documents to query their state. It
represents the state of all the replications started from
documents in _replicator db. Unlike \fB_scheduler/jobs\fP it will also
show jobs which have failed or have completed.
.UNINDENT
.sp
By default, scheduling replicator will not update documents with
transient states like \fBtriggered\fP or \fBerror\fP anymore, instead
\fB_scheduler/docs\fP API should be used to query replication document
states.
.UNINDENT
.SS Other scheduling replicator improvements
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Network resource usage and performance was improved by
implementing a shared connection pool. This should help in cases
of a large number of connections to the same sources or
target. Previously connection pools were shared only withing a
single replication job.
.IP \(bu 2
Improved request rate limit handling. Replicator requests will
auto\-discover rate limit capacity on targets and sources based on
a proven Additive Increase / Multiplicative Decrease feedback
control algorithm.
.IP \(bu 2
Improved performance by having exponential backoff for all
replication jobs failures.  Previously there were some scenarios
were failure led to continuous repeated retries, consuming CPU and
disk resources in the process.
.IP \(bu 2
Improved recovery from long but temporary network
failure. Currently if replications jobs fail to start 10 times in
a row, they will not be retried anymore. This is sometimes
desirable, but in some cases, for example, after a sustained DNS
failure which eventually recovers, replications reach their retry
limit, stop retrying and never recover. Previously it required
user intervention to continue. Scheduling replicator will never
give up retrying a valid scheduled replication job and so it
should recover automatically.
.IP \(bu 2
Better handling of filtered replications. Failing user filter code
fetches from the source will not block replicator manager and
stall other replications. Failing filter fetches will also be
backed off exponentially. Another improvement is when filter code
changes on the source, a running replication will detect that and
restart itself with a new replication ID automatically.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The 2.1.0 release also includes the following minor improvements:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1946\fP: Hibernate couch_stream after each write (up to 70% reduction
in memory usage during replication of DBs with large attachments)
.IP \(bu 2
\fI\%COUCHDB\-2964\fP: Investigate switching replicator manager change feeds to
using "normal" instead of "longpoll"
.IP \(bu 2
\fI\%COUCHDB\-2988\fP: (mango) Allow query selector as changes and replication
filter
.IP \(bu 2
\fI\%COUCHDB\-2992\fP: Add additional support for document size
.IP \(bu 2
\fI\%COUCHDB\-3046\fP: Improve reduce function overflow protection
.IP \(bu 2
\fI\%COUCHDB\-3061\fP: Use vectored reads to search for buried headers in .couch
files. "On a modern linux system with SSD, we see improvements up to 15x."
.IP \(bu 2
\fI\%COUCHDB\-3063\fP: "stale=ok" option replaced with new "stable" and "update"
options.
.IP \(bu 2
\fI\%COUCHDB\-3180\fP: Add features list in the welcome message
.IP \(bu 2
\fI\%COUCHDB\-3203\fP: Make auth handlers configurable (in ini files)
.IP \(bu 2
\fI\%COUCHDB\-3234\fP: Track open shard timeouts with a counter instead of logging
.IP \(bu 2
\fI\%COUCHDB\-3242\fP: Make get view group info timeout in couch_indexer
configurable
.IP \(bu 2
\fI\%COUCHDB\-3249\fP: Add config to disable index all fields (text indexes)
.IP \(bu 2
\fI\%COUCHDB\-3251\fP: Remove hot loop usage of filename:rootname/1
.IP \(bu 2
\fI\%COUCHDB\-3284\fP: 8Kb read\-ahead in couch_file causes extra IO and binary
memory usage
.IP \(bu 2
\fI\%COUCHDB\-3298\fP: Optimize writing btree nodes
.IP \(bu 2
\fI\%COUCHDB\-3302\fP: (Improve) Attachment replication over low bandwidth network
connections
.IP \(bu 2
\fI\%COUCHDB\-3307\fP: Limit calls to maybe_add_sys_db_callbacks to once per db
open
.IP \(bu 2
\fI\%COUCHDB\-3318\fP: bypass couch_httpd_vhost if there are none
.IP \(bu 2
\fI\%COUCHDB\-3323\fP: Idle dbs cause excessive overhead
.IP \(bu 2
\fI\%COUCHDB\-3324\fP: Introduce couch_replicator_scheduler
.IP \(bu 2
\fI\%COUCHDB\-3337\fP: End\-point _local_docs doesn\(aqt conform to query params of
_all_docs
.IP \(bu 2
\fI\%COUCHDB\-3358\fP: (mango) Use efficient set storage for field names
.IP \(bu 2
\fI\%COUCHDB\-3425\fP: Make _doc_ids _changes filter fast\-path limit configurable
.IP \(bu 2
\fI\%#457\fP: TeX/LaTeX/texinfo removed from default docs build chain
.IP \(bu 2
\fI\%#469\fP: (mango) Choose index based on fields match
.IP \(bu 2
\fI\%#483\fP: couchup database migration tool
.IP \(bu 2
\fI\%#582\fP: Add X\-Frame\-Options support to help protect against
clickjacking
.IP \(bu 2
\fI\%#593\fP: Allow bind address of 127.0.0.1 in \fB_cluster_setup\fP for
single nodes
.IP \(bu 2
\fI\%#624\fP: Enable compaction daemon by default
.IP \(bu 2
\fI\%#626\fP: Allow enable node decom using string "true"
.IP \(bu 2
(mango) Configurable default limit, defaults to 25.
.IP \(bu 2
(mango) _design documents ignored when querying _all_docs
.IP \(bu 2
(mango) add $allMatch selector
.IP \(bu 2
Add local.d/default.d directories by default and document
.IP \(bu 2
Improved INSTALL.* text files
.UNINDENT
.UNINDENT
.UNINDENT
.SS Fixed Issues
.sp
The 2.1.0 release includes fixes for the following issues:
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1447\fP: X\-Couch\-Update\-NewRev header is missed if custom headers are
specified in response of _update handler (missed in 2.0 merge)
.IP \(bu 2
\fI\%COUCHDB\-2731\fP: Authentication DB was not considered a system DB
.IP \(bu 2
\fI\%COUCHDB\-3010\fP: (Superceded fix for replication exponential backoff)
.IP \(bu 2
\fI\%COUCHDB\-3090\fP: Error when handling empty "Access\-Control\-Request\-Headers"
header
.IP \(bu 2
\fI\%COUCHDB\-3100\fP: Fix documentation on require_valid_user
.IP \(bu 2
\fI\%COUCHDB\-3109\fP: 500 when include_docs=true for linked documents
.IP \(bu 2
\fI\%COUCHDB\-3113\fP: fabric:open_revs can return {ok, []}
.IP \(bu 2
\fI\%COUCHDB\-3149\fP: Exception written to the log if db deleted while there is a
change feed running
.IP \(bu 2
\fI\%COUCHDB\-3150\fP: Update all shards with stale=update_after
.IP \(bu 2
\fI\%COUCHDB\-3158\fP: Fix a crash when connection closes for _update
.IP \(bu 2
\fI\%COUCHDB\-3162\fP: Default ssl settings cause a crash
.IP \(bu 2
\fI\%COUCHDB\-3164\fP: Request fails when using
_changes?feed=eventsource&heartbeat=30000
.IP \(bu 2
\fI\%COUCHDB\-3168\fP: Replicator doesn\(aqt handle well writing documents to a target
db which has a small max_document_size
.IP \(bu 2
\fI\%COUCHDB\-3173\fP: Views return corrupt data for text fields containing non\-BMP
characters
.IP \(bu 2
\fI\%COUCHDB\-3174\fP: max_document_size setting can by bypassed by issuing
multipart/related requests
.IP \(bu 2
\fI\%COUCHDB\-3178\fP: Fabric does not send message when filtering lots of documents
.IP \(bu 2
\fI\%COUCHDB\-3181\fP: function_clause error when adding attachment to doc in _users
db
.IP \(bu 2
\fI\%COUCHDB\-3184\fP: couch_mrview_compactor:recompact/1 does not handle errors in
spawned process
.IP \(bu 2
\fI\%COUCHDB\-3193\fP: fabric:open_revs returns multiple results when one of the
shards has stem_interactive_updates=false
.IP \(bu 2
\fI\%COUCHDB\-3199\fP: Replicator VDU function doesn\(aqt acount for an already
malformed document in replicator db
.IP \(bu 2
\fI\%COUCHDB\-3202\fP: (mango) do not allow empty field names
.IP \(bu 2
\fI\%COUCHDB\-3220\fP: Handle timeout in _revs_diff
.IP \(bu 2
\fI\%COUCHDB\-3222\fP: (Fix) HTTP code 500 instead of 400 for invalid key during
document creation
.IP \(bu 2
\fI\%COUCHDB\-3231\fP: Allow fixing users\(aq documents (type and roles)
.IP \(bu 2
\fI\%COUCHDB\-3232\fP: user context not passed down in fabric_view_all_docs
.IP \(bu 2
\fI\%COUCHDB\-3238\fP: os_process_limit documentation wrong
.IP \(bu 2
\fI\%COUCHDB\-3241\fP: race condition in couch_server if delete msg for a db is
received before open_result msg
.IP \(bu 2
\fI\%COUCHDB\-3245\fP: Make couchjs \-S option take effect again
.IP \(bu 2
\fI\%COUCHDB\-3252\fP: Include main\-coffee.js in release artifact (broken
CoffeeScript view server)
.IP \(bu 2
\fI\%COUCHDB\-3255\fP: Conflicts introduced by recreating docs with attachments
.IP \(bu 2
\fI\%COUCHDB\-3259\fP: Don\(aqt trap exits in couch_file
.IP \(bu 2
\fI\%COUCHDB\-3264\fP: POST to _all_docs does not respect conflicts=true
.IP \(bu 2
\fI\%COUCHDB\-3269\fP: view response can \(aqhang\(aq with filter and limit specified
.IP \(bu 2
\fI\%COUCHDB\-3271\fP: Replications crash with \(aqkaboom\(aq exit
.IP \(bu 2
\fI\%COUCHDB\-3274\fP: eof in couch_file can be incorrect after error
.IP \(bu 2
\fI\%COUCHDB\-3277\fP: Replication manager crashes when it finds _replicator db
shards which are not part of a mem3 db
.IP \(bu 2
\fI\%COUCHDB\-3286\fP: Validation function throwing unexpected json crashes with
function_clause
.IP \(bu 2
\fI\%COUCHDB\-3289\fP: handle error clause when calling fabric:open_revs
.IP \(bu 2
\fI\%COUCHDB\-3291\fP: Excessively long document IDs prevent replicator from making
progress
.IP \(bu 2
\fI\%COUCHDB\-3293\fP: Allow limiting length of document ID (for CouchDB proper)
.IP \(bu 2
\fI\%COUCHDB\-3305\fP: (mango) don\(aqt crash with invalid input to built in reducer
function
.IP \(bu 2
\fI\%COUCHDB\-3362\fP: DELETE attachment on non\-existing document creates the
document, rather than returning 404
.IP \(bu 2
\fI\%COUCHDB\-3364\fP: Don\(aqt crash compactor when compacting process fails.
.IP \(bu 2
\fI\%COUCHDB\-3367\fP: Require server admin user for db/_compact and db_view_cleanup
endpoints
.IP \(bu 2
\fI\%COUCHDB\-3376\fP: Fix mem3_shards under load
.IP \(bu 2
\fI\%COUCHDB\-3378\fP: Fix mango full text detection
.IP \(bu 2
\fI\%COUCHDB\-3379\fP: Fix couch_auth_cache reinitialization logic
.IP \(bu 2
\fI\%COUCHDB\-3400\fP: Notify couch_index_processes on all shards when ddoc updated
.IP \(bu 2
\fI\%COUCHDB\-3402\fP: race condition in mem3 startup
.IP \(bu 2
\fI\%#511\fP: (mango) \ Return false for empty list
.IP \(bu 2
\fI\%#595\fP: Return 409 to PUT attachment with non\-existent rev
.IP \(bu 2
\fI\%#623\fP: Ensure replicator _active_tasks entry reports recent pending
changes value
.IP \(bu 2
\fI\%#627\fP: Pass UserCtx to fabric\(aqs all_docs from mango query
.IP \(bu 2
\fI\%#631\fP: fix couchdb_os_proc_pool eunit timeouts
.IP \(bu 2
\fI\%#644\fP: Make couch_event_sup:stop/1 synchronous
.IP \(bu 2
\fI\%#645\fP: Pass db open options to fabric_view_map for _view and _list
queries on _users DB
.IP \(bu 2
\fI\%#648\fP: Fix couch_replicator_changes_reader:process_change
.IP \(bu 2
\fI\%#649\fP: Avoid a race when restarting an index updater
.IP \(bu 2
\fI\%#667\fP: Prevent a terrible race condition
.IP \(bu 2
\fI\%#677\fP: Make replication filter fetch error for _replicate return a
404
.IP \(bu 2
Fix CORS \fBmax_age\fP configuration parameter via Access\-Control\-Max\-Age
.IP \(bu 2
Chunk missing revisions before attempting to save on target (improves
replication for very conflicted, very deep revision tree documents)
.IP \(bu 2
Allow w parameter for attachments
.IP \(bu 2
Return "Bad Request" when count in \fB/_uuids\fP exceeds max
.IP \(bu 2
Fix crashes when replicator db is deleted
.IP \(bu 2
Skip internal replication if changes already replicated
.IP \(bu 2
Fix encoding issues on \fB_update/../doc_id\fP and PUT attachments
.UNINDENT
.SS 2.0.x Branch
.INDENT 0.0
.IP \(bu 2
\fI\%Version 2.0.0\fP
.IP \(bu 2
\fI\%Upgrade Notes\fP
.IP \(bu 2
\fI\%Known Issues\fP
.IP \(bu 2
\fI\%Breaking Changes\fP
.UNINDENT
.SS Version 2.0.0
.INDENT 0.0
.IP \(bu 2
Native clustering is now supported. Rather than use CouchDB replication
between multiple, distinct CouchDB servers, configure a cluster of CouchDB
nodes. These nodes will use an optimized Erlang\-driven \(aqinternal replication\(aq
to ensure data durability and accessibility. Combine a clustered CouchDB with
a load balancer (such as \fBhaproxy\fP) to scale CouchDB out horizontally. More
details of the clustering feature are available in the \fIcluster\fP\&.
.IP \(bu 2
\fIFuton\fP replaced by brand\-new, completely re\-engineered \fIFauxton\fP interface.
URL remains the same.
.IP \(bu 2
The new Mango Query Server provides a simple JSON\-based way to perform CouchDB
queries without JavaScript or MapReduce. Mango Queries have a similar indexing
speed advantage over JavaScript Queries than the Erlang Queries have (2x\-10x
faster indexing depending on doc size and system configuration). We recommend
all new apps start using Mango as a default. Further details are available
in the \fI_find, _index and _explain API\fP\&.
.IP \(bu 2
Mango \fIselectors\fP can be used in _changes
feeds instead of JavaScript MapReduce filters. Mango has been tested to be
up to an order of magnitude (10x) faster than JavaScript in this application.
.IP \(bu 2
\fIRewrite rules\fP for URLs can be performed using
JavaScript functions.
.IP \(bu 2
\fIMultiple queries\fP can be made of a
view with a single HTTP request.
.IP \(bu 2
Views can be queried with sorting turned off ( \fBsorted=false\fP) for a
performance boost.
.IP \(bu 2
The global changes feed has been enhanced. It is now resumable and persistent.
.IP \(bu 2
New endpoints added (documentation forthcoming):
.INDENT 2.0
.IP \(bu 2
\fIapi/server/membership\fP shows all nodes in a cluster
.IP \(bu 2
\fB/_bulk_get\fP speeds up the replication protocol over low\-latency
connections
.IP \(bu 2
\fB/_node/\fP api to access individual nodes\(aq configuration and compaction
features
.IP \(bu 2
\fB/_cluster_setup\fP api to set up a cluster from scratch.
.IP \(bu 2
\fB/_up\fP api to signal health of a node to a load\-balancer
.IP \(bu 2
\fB/db/_local_docs\fP and \fB/db/_design_docs\fP (similar to \fB/db/_all_docs\fP)
.UNINDENT
.IP \(bu 2
The \fB/_log\fP endpoint was removed.
.IP \(bu 2
"Backend" interface on port 5986 used for specific cluster admin tasks. Of
interest are the \fB_nodes\fP and \fB_dbs\fP databases visible only through this
interface.
.IP \(bu 2
Support added for Erlang/OTP 17.x, 18.x and 19
.IP \(bu 2
New streamlined build system written for Unix\-like systems and Microsoft
Windows
.IP \(bu 2
\fIConfiguration\fP has moved from \fB/_config\fP to
\fB/_node/{node\-name}/_config\fP
.IP \(bu 2
\fBinstance_start_time\fP now always reports \fB"0"\fP\&.
.UNINDENT
.SS Upgrade Notes
.INDENT 0.0
.IP \(bu 2
The update sequences returned by the \fIapi/db/changes\fP feed are no longer
integers. They can be any JSON value. Applications should treat them as opaque
values and return them to CouchDB as\-is.
.IP \(bu 2
Temporary views are no longer supported.
.IP \(bu 2
It is possible to have multiple replicator databases.
\fBreplicator/db\fP config option has been removed.
Instead \fB_replicator\fP and any database names ending
with the \fB/_replicator\fP suffix will be recognized as
replicator databases by the system.
.IP \(bu 2
Note that the semantics of some API calls have changed due to the introduction
of the clustering feature. Specifically, make note of the difference between
receiving a \fB201\fP and a \fB202\fP when storing a document.
.IP \(bu 2
\fBall_or_nothing\fP is no longer supported by the \fIbulk_docs\fP API
.IP \(bu 2
After updating a design document containing a \fBshow\fP, an immediate GET to
that same \fBshow\fP function may still return results from the previous
definition. This is due to design document caching, which may take a few
seconds to fully evict, or longer (up to ~30s) for a clustered installation.
.UNINDENT
.SS Known Issues
.sp
All \fI\%known issues\fP filed against the 2.0 release are contained within the
official \fICouchDB JIRA instance\fP or \fICouchDB GitHub Issues\fP\&.
.sp
The following are some highlights of known issues for which fixes did not land
in time for the 2.0.0 release:
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-2980\fP: The replicator (whether invoked via \fB_replicate\fP or a
document stored in the \fB_replicator\fP database) understands two kinds of
source and target:
.INDENT 2.0
.IP 1. 3
A URL (e.g., \fBhttps://foo:bar@foo.com/db1\fP), called a "remote" source or
target
.IP 2. 3
A database name (e.g., \fBdb1\fP), called a "local" source or target.
.UNINDENT
.sp
Whenever the latter type is used, this refers to a local unclustered
database, not a clustered one.
.sp
In a future release we hope to support "local" source or target specs to
clustered databases. For now, we recommend always using the URL format for
both source and target specifications.
.IP \(bu 2
\fI\%COUCHDB\-3034\fP: CouchDB will occasionally return 500 errors when multiple
clients attempt to PUT or DELETE the same database concurrently.
.IP \(bu 2
\fI\%COUCHDB\-3119\fP: Adding nodes to a cluster fails if the Erlang node name
is not \fBcouchdb\fP (of the form \fBcouchdb@hostname\fP\&.)
.IP \(bu 2
\fI\%COUCHDB\-3050\fP: Occasionally the \fBdev/run\fP script used for development
purposes to start a local 3\-node cluster will fail to start one or more
nodes.
.IP \(bu 2
\fI\%COUCHDB\-2817\fP: The compaction daemon will only compact views for shards
that contain the design document.
.IP \(bu 2
\fI\%COUCHDB\-2804\fP: The fast_view optimization is not enabled on the clustered
interface.
.IP \(bu 2
\fI\%#656\fP: The OAuth 1.0 support is broken and deprecated. It will be
removed in a future version of CouchDB.
.UNINDENT
.SS Breaking Changes
.sp
The following changes in 2.0 represent a significant deviation from
CouchDB 1.x and may alter behaviour of systems designed to work with
older versions of CouchDB:
.INDENT 0.0
.IP \(bu 2
\fI\%#620\fP: \fBPOST /dbname\fP no longer returns an ETag response header,
in compliance with RFC 7231, Section 7.2.
.UNINDENT
.SS 1.7.x Branch
.INDENT 0.0
.IP \(bu 2
\fI\%Version 1.7.2\fP
.IP \(bu 2
\fI\%Version 1.7.1\fP
.IP \(bu 2
\fI\%Version 1.7.0\fP
.UNINDENT
.SS Version 1.7.2
.SS Security
.INDENT 0.0
.IP \(bu 2
\fICVE 2018\-8007\fP
.UNINDENT
.SS Version 1.7.1
.SS Bug Fix
.INDENT 0.0
.IP \(bu 2
\fI\%#974\fP: Fix access to /db/_all_docs for database members.
.UNINDENT
.SS Version 1.7.0
.SS Security
.INDENT 0.0
.IP \(bu 2
\fICVE 2017\-12635\fP
.IP \(bu 2
\fICVE 2017\-12636\fP
.UNINDENT
.SS API Changes
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1356\fP: Return username on \fBPOST /_session\fP\&.
.IP \(bu 2
\fI\%COUCHDB\-1876\fP: Fix duplicated Content\-Type for show/update functions.
.IP \(bu 2
\fI\%COUCHDB\-2310\fP: Implement \fBPOST /{db}/_bulk_get\fP\&.
.IP \(bu 2
\fI\%COUCHDB\-2375\fP: \fI\%400 Bad Request\fP returned when invalid revision specified.
.IP \(bu 2
\fI\%COUCHDB\-2845\fP: \fI\%400 Bad Request\fP returned when \fIrevs\fP is not a list.
.UNINDENT
.SS Build
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1964\fP: Replace etap test suite with EUnit.
.IP \(bu 2
\fI\%COUCHDB\-2225\fP: Enforce that shared libraries can be built by the system.
.IP \(bu 2
\fI\%COUCHDB\-2761\fP: Support glibc >= 2.20.
.IP \(bu 2
\fI\%COUCHDB\-2747\fP: Support Erlang 18.
.IP \(bu 2
\fI\%#5b9742c\fP: Support Erlang 19.
.IP \(bu 2
\fI\%#1545bf4\fP: Remove broken benchmarks.
.UNINDENT
.SS Database Core
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-2534\fP: Improve checks for db admin/member.
.IP \(bu 2
\fI\%COUCHDB\-2735\fP: Duplicate document _ids created under high edit load.
.UNINDENT
.SS Documentation
.INDENT 0.0
.IP \(bu 2
\fI\%#c3c9588\fP: Improve documentation of \fIcacert_file\fP ssl option.
.IP \(bu 2
\fI\%#3266f23\fP: Clarify the purpose of tombstones.
.IP \(bu 2
\fI\%#75887d9\fP: Improve CouchDB Replication Protocol definition.
.IP \(bu 2
\fI\%#3b1dc0f\fP: Remove mention of \fIgroup_level=exact\fP\&.
.IP \(bu 2
\fI\%#2a11daa\fP: Remove mention of "Test Suite" in Futon.
.IP \(bu 2
\fI\%#01c60f1\fP: Clarify type of key, startkey and endkey params.
.UNINDENT
.SS Futon
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-241\fP: Support document copying.
.IP \(bu 2
\fI\%COUCHDB\-1011\fP: Run replication filtered by document ids from Futon.
.IP \(bu 2
\fI\%COUCHDB\-1275\fP: Unescape database names in Futon recently used list.
.IP \(bu 2
\fI\%#f18f82a\fP: Update jquery.ui to 1.10.4 with fixes of potential
XSS issues.
.UNINDENT
.SS HTTP Server
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-2430\fP: Disable Nagle\(aqs algorithm by default.
.IP \(bu 2
\fI\%COUCHDB\-2583\fP: Don\(aqt drop connection by the endpoints which doesn\(aqt require
any payload.
.IP \(bu 2
\fI\%COUCHDB\-2673\fP: Properly escape Location: HTTP header.
.IP \(bu 2
\fI\%COUCHDB\-2677\fP: Wrong Expires header weekday.
.IP \(bu 2
\fI\%COUCHDB\-2783\fP: Bind both to IPv4 and IPv6.
.IP \(bu 2
\fI\%#f30f3dd\fP: Support for user configurable SSL ciphers.
.UNINDENT
.SS Query Server
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1447\fP: Custom response headers from design functions get merged with
default ones.
.IP \(bu 2
\fI\%#7779c11\fP: Upgrade Coffeescript to version 1.10.
.UNINDENT
.SS jquery.couch.js
.INDENT 0.0
.IP \(bu 2
\fI\%#f9095e7\fP: Fix document copying.
.UNINDENT
.SS 1.6.x Branch
.INDENT 0.0
.IP \(bu 2
\fI\%Upgrade Notes\fP
.IP \(bu 2
\fI\%Version 1.6.0\fP
.UNINDENT
.SS Upgrade Notes
.sp
The \fIProxy Authentication\fP handler was renamed to
\fBproxy_authentication_handler\fP to follow the \fB*_authentication_handler\fP form
of all other handlers. The old \fBproxy_authentification_handler\fP name is marked
as deprecated and will be removed in future releases. It\(aqs strongly recommended
to update \fBhttpd/authentication_handlers\fP option with new value
in case if you had used such handler.
.SS Version 1.6.0
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-2200\fP: support Erlang/OTP 17.0 \fI\%#35e16032\fP
.IP \(bu 2
Fauxton: many improvements in our experimental new user interface, including
switching the code editor from CodeMirror to Ace as well as better support
for various browsers.
.IP \(bu 2
Add the \fBmax_count\fP option (\fIconfig/uuids\fP) to allow rate\-limiting
the amount of UUIDs that can be requested from the \fIapi/server/uuids\fP
handler in a single request (\fICVE 2014\-2668\fP).
.IP \(bu 2
\fI\%COUCHDB\-1986\fP: increase socket buffer size to improve replication speed
for large documents and attachments, and fix tests on BSD\-like systems.
\fI\%#9a0e561b\fP
.IP \(bu 2
\fI\%COUCHDB\-1953\fP: improve performance of multipart/related requests.
\fI\%#ce3e89dc\fP
.IP \(bu 2
\fI\%COUCHDB\-2221\fP: verify that authentication\-related configuration settings
are well\-formed. \fI\%#dbe769c6\fP
.IP \(bu 2
\fI\%COUCHDB\-1922\fP: fix CORS exposed headers. \fI\%#4f619833\fP
.IP \(bu 2
Rename \fBproxy_authentification_handler\fP to \fBproxy_authentication_handler\fP\&.
\fI\%#c66ac4a8\fP
.IP \(bu 2
\fI\%COUCHDB\-1795\fP: ensure the startup script clears the pid file on termination.
\fI\%#818ef4f9\fP
.IP \(bu 2
\fI\%COUCHDB\-1962\fP: replication can now be performed without having write access
to the source database (\fI\%#1d5fe2aa\fP), the replication checkpoint
interval is now configurable (\fI\%#0693f98e\fP).
.IP \(bu 2
\fI\%COUCHDB\-2025\fP: add support for SOCKS5 proxies for replication.
\fI\%#fcd76c9\fP
.IP \(bu 2
\fI\%COUCHDB\-1930\fP: redirect to the correct page after submitting a new document
with a different ID than the one suggested by Futon. \fI\%#4906b591\fP
.IP \(bu 2
\fI\%COUCHDB\-1923\fP: add support for \fIattachments\fP and \fIatt_encoding_info\fP options
(formerly only available on the documents API) to the view API.
\fI\%#ca41964b\fP
.IP \(bu 2
\fI\%COUCHDB\-1647\fP: for failed replications originating from a document in the
\fI_replicator\fP database, store the failure reason in the document.
\fI\%#08cac68b\fP
.IP \(bu 2
A number of improvements for the documentation.
.UNINDENT
.SS 1.5.x Branch
.INDENT 0.0
.IP \(bu 2
\fI\%Version 1.5.1\fP
.IP \(bu 2
\fI\%Version 1.5.0\fP
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
\fIrelease/1.5.1\fP contains important security fixes. Previous \fI1.5.x\fP
releases are not recommended for regular usage.
.UNINDENT
.UNINDENT
.SS Version 1.5.1
.INDENT 0.0
.IP \(bu 2
Add the \fBmax_count\fP option (\fIconfig/uuids\fP) to allow rate\-limiting
the amount of UUIDs that can be requested from the \fIapi/server/uuids\fP
handler in a single request (\fICVE 2014\-2668\fP).
.UNINDENT
.SS Version 1.5.0
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1781\fP: The official documentation has been overhauled. A lot of
content from other sources have been merged, and the index page
has been rebuilt to make the docs much more accessible.
\fI\%#54813a7\fP
.IP \(bu 2
A new administration UI, codenamed Fauxton, has been included as an
experimental preview. It can be accessed at \fB/_utils/fauxton/\fP\&. There
are too many improvements here to list them all. We are looking for
feedback from the community on this preview release.
.IP \(bu 2
\fI\%COUCHDB\-1888\fP: Fixed an issue where admin users would be restricted by
the \fBpublic_fields\fP feature.
.IP \(bu 2
Fixed an issue with the JavaScript CLI test runner. \fI\%#be76882\fP,
\fI\%#54813a7\fP
.IP \(bu 2
\fI\%COUCHDB\-1867\fP: An experimental plugin feature has been added. See
\fBsrc/couch_plugin/README.md\fP for details. We invite the community to
test and report any findings.
.IP \(bu 2
\fI\%COUCHDB\-1894\fP: An experimental Node.js\-based query server runtime
has been added. See \fIexperimental\fP for details. We invite the
community to test and report any findings.
.IP \(bu 2
\fI\%COUCHDB\-1901\fP: Better retry mechanism for transferring attachments
during replication. \fI\%#4ca2cec\fP
.UNINDENT
.SS 1.4.x Branch
.INDENT 0.0
.IP \(bu 2
\fI\%Upgrade Notes\fP
.IP \(bu 2
\fI\%Version 1.4.0\fP
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
\fIrelease/1.4.x\fP is affected by the issue described in \fIcve/2014\-2668\fP\&.
Upgrading to a more recent release is strongly recommended.
.UNINDENT
.UNINDENT
.SS Upgrade Notes
.sp
We now support Erlang/OTP R16B and R16B01; the minimum required version is R14B.
.sp
User document role values must now be strings. Other types of values will be
refused when saving the user document.
.SS Version 1.4.0
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1139\fP: it\(aqs possible to apply \fIlist\fP
functions to \fB_all_docs\fP view. \fI\%#54fd258e\fP
.IP \(bu 2
\fI\%COUCHDB\-1632\fP: Ignore epilogues in \fBmultipart/related\fP MIME attachments.
\fI\%#2b4ab67a\fP
.IP \(bu 2
\fI\%COUCHDB\-1634\fP: Reduce PBKDF2 work factor. \fI\%#f726bc4d\fP
.IP \(bu 2
\fI\%COUCHDB\-1684\fP: Support for server\-wide changes feed reporting on creation,
updates and deletion of databases. \fI\%#917d8988\fP
.IP \(bu 2
\fI\%COUCHDB\-1772\fP: Prevent invalid JSON output when using \fIall_or_nothing\fP
\fIof bulk API\fP\&. \fI\%#dfd39d57\fP
.IP \(bu 2
Add a \fBconfigurable whitelist\fP
of user document properties. \fI\%#8d7ab8b1\fP
.IP \(bu 2
\fI\%COUCHDB\-1852\fP: Support Last\-Event\-ID header in EventSource changes feeds.
\fI\%#dfd2199a\fP
.IP \(bu 2
Allow storing pre\-hashed admin passwords via \fIconfig API\fP\&.
\fI\%#c98ba561\fP
.IP \(bu 2
Automatic loading of CouchDB plugins. \fI\%#3fab6bb5\fP
.IP \(bu 2
Much improved documentation, including an \fIexpanded description\fP of \fIvalidate_doc_update\fP functions (commit:\fIef9ac469\fP) and
a description of how  CouchDB handles JSON \fInumber values\fP (\fI\%#bbd93f77\fP).
.IP \(bu 2
Split up \fIreplicator_db\fP tests into multiple independent tests.
.UNINDENT
.SS 1.3.x Branch
.INDENT 0.0
.IP \(bu 2
\fI\%Upgrade Notes\fP
.IP \(bu 2
\fI\%Version 1.3.1\fP
.IP \(bu 2
\fI\%Version 1.3.0\fP
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
\fIrelease/1.3.x\fP is affected by the issue described in
\fIcve/2014\-2668\fP\&. Upgrading to a more recent release is strongly
recommended.
.UNINDENT
.UNINDENT
.SS Upgrade Notes
.sp
You can upgrade your existing CouchDB 1.0.x installation to 1.3.0
without any specific steps or migration. When you run CouchDB, the
existing data and index files will be opened and used as normal.
.sp
The first time you run a compaction routine on your database within 1.3.0,
the data structure and indexes will be updated to the new version of the
CouchDB database format that can only be read by CouchDB 1.3.0 and later.
This step is not reversible. Once the data files have been updated and
migrated to the new version the data files will no longer work with a
CouchDB 1.0.x release.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
If you want to retain support for opening the data files in
CouchDB 1.0.x you must back up your data files before performing the
upgrade and compaction process.
.UNINDENT
.UNINDENT
.SS Version 1.3.1
.SS Replicator
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1788\fP: Tolerate missing source and target fields in _replicator docs.
\fI\%#869f42e2\fP
.UNINDENT
.SS Log System
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1794\fP: Fix bug in WARN level logging from 1.3.0.
.IP \(bu 2
Don\(aqt log about missing .compact files. \fI\%#06f1a8dc\fP
.UNINDENT
.SS View Server
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1792\fP: Fix the \-S option to couchjs to increase memory limits.
\fI\%#cfaa66cd\fP
.UNINDENT
.SS Miscellaneous
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1784\fP: Improvements to test suite and VPATH build system.
\fI\%#01afaa4f\fP
.IP \(bu 2
Improve documentation: better structure, improve language, less duplication.
.UNINDENT
.SS Version 1.3.0
.SS Database core
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1512\fP: Validate bind address before assignment. \fI\%#09ead8a0\fP
.IP \(bu 2
Restore \fBmax_document_size\fP protection. \fI\%#bf1eb135\fP
.UNINDENT
.SS Documentation
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1523\fP: Import CouchBase documentation and convert them into
\fI\%Sphinx docs\fP
.UNINDENT
.SS Futon
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-509\fP: Added view request duration to Futon. \fI\%#2d2c7d1e\fP
.IP \(bu 2
\fI\%COUCHDB\-627\fP: Support all timezones. \fI\%#b1a049bb\fP
.IP \(bu 2
\fI\%COUCHDB\-1383\fP: Futon view editor won\(aqt allow you to save original view after
saving a revision. \fI\%#ce48342\fP
.IP \(bu 2
\fI\%COUCHDB\-1470\fP: Futon raises pop\-up on attempt to navigate to missed/deleted
document. \fI\%#5da40eef\fP
.IP \(bu 2
\fI\%COUCHDB\-1473\fP, \fI\%COUCHDB\-1472\fP: Disable buttons for actions that the user
doesn\(aqt have permissions to. \fI\%#7156254d\fP
.UNINDENT
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-431\fP: Introduce experimental \fICORS support\fP\&.
\fI\%#b90e4021\fP
.IP \(bu 2
\fI\%COUCHDB\-764\fP, \fI\%COUCHDB\-514\fP, \fI\%COUCHDB\-430\fP: Fix sending HTTP headers from
\fB_list\fP function, \fI\%#2a74f88375\fP
.IP \(bu 2
\fI\%COUCHDB\-887\fP: Fix \fBbytes\fP and \fBoffset\fP parameters semantic for \fI_log\fP
resource (\fI\%explanation\fP)
\fI\%#ad700014\fP
.IP \(bu 2
\fI\%COUCHDB\-986\fP: Added Server\-Sent Events protocol to db changes API.
See \fI\%http://www.w3.org/TR/eventsource/\fP for details. \fI\%#093d2aa6\fP
.IP \(bu 2
\fI\%COUCHDB\-1026\fP: Database names are encoded with respect of special characters
in the rewriter now. \fI\%#272d6415\fP
.IP \(bu 2
\fI\%COUCHDB\-1097\fP: Allow \fIOPTIONS\fP request to shows and lists functions.
\fI\%#9f53704a\fP
.IP \(bu 2
\fI\%COUCHDB\-1210\fP: Files starting with underscore can be attached and updated now.
\fI\%#05858792\fP
.IP \(bu 2
\fI\%COUCHDB\-1277\fP: Better query parameter support and code clarity:
\fI\%#7e3c69ba\fP
.INDENT 2.0
.IP \(bu 2
Responses to documents created/modified via form data \fIPOST\fP to /db/doc or
copied with \fICOPY\fP should now include \fILocation\fP header.
.IP \(bu 2
Form data POST to /db/doc now includes an \fIETag\fP response header.
.IP \(bu 2
\fB?batch=ok\fP is now supported for \fICOPY\fP and \fIPOST\fP /db/doc updates.
.IP \(bu 2
\fB?new_edits=false\fP is now supported for more operations.
.UNINDENT
.IP \(bu 2
\fI\%COUCHDB\-1285\fP: Allow configuration of vendor and modules version in CouchDB
welcome message. \fI\%#3c24a94d\fP
.IP \(bu 2
\fI\%COUCHDB\-1321\fP: Variables in rewrite rules breaks OAuth authentication.
\fI\%#c307ba95\fP
.IP \(bu 2
\fI\%COUCHDB\-1337\fP: Use MD5 for attachment ETag header value. \fI\%#6d912c9f\fP
.IP \(bu 2
\fI\%COUCHDB\-1381\fP: Add jquery.couch support for Windows 8 Metro apps.
\fI\%#dfc5d37c\fP
.IP \(bu 2
\fI\%COUCHDB\-1441\fP: Limit recursion depth in the URL rewriter.
Defaults to a maximum of 100 invocations but is configurable.
\fI\%#d076976c\fP
.IP \(bu 2
\fI\%COUCHDB\-1442\fP: No longer rewrites the \fIX\-CouchDB\-Requested\-Path\fP during
recursive calls to the rewriter. \fI\%#56744f2f\fP
.IP \(bu 2
\fI\%COUCHDB\-1501\fP: \fIChanges feed\fP now can take special parameter
\fBsince=now\fP to emit changes since current point of time. \fI\%#3bbb2612\fP
.IP \(bu 2
\fI\%COUCHDB\-1502\fP: Allow users to delete own _users doc. \fI\%#f0d6f19bc8\fP
.IP \(bu 2
\fI\%COUCHDB\-1511\fP: CouchDB checks \fIroles\fP field for \fI_users\fP database documents
with more care. \fI\%#41205000\fP
.IP \(bu 2
\fI\%COUCHDB\-1537\fP: Include user name in show/list \fIETags\fP\&. \fI\%#ac320479\fP
.IP \(bu 2
Send a 202 response for \fI_restart\fP\&. \fI\%#b213e16f\fP
.IP \(bu 2
Make password hashing synchronous when using the /_config/admins API.
\fI\%#08071a80\fP
.IP \(bu 2
Add support to serve single file with CouchDB, \fI\%#2774531ff2\fP
.IP \(bu 2
Allow any 2xx code to indicate success, \fI\%#0d50103cfd\fP
.IP \(bu 2
Fix \fI_session\fP for IE7.
.IP \(bu 2
Restore 400 error for empty PUT, \fI\%#2057b895\fP
.IP \(bu 2
Return \fBX\-Couch\-Id\fP header if doc is created, \fI\%#98515bf0b9\fP
.IP \(bu 2
Support auth cookies with \fB:\fP characters, \fI\%#d9566c831d\fP
.UNINDENT
.SS Log System
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1380\fP: Minor fixes for logrotate support.
.IP \(bu 2
Improve file I/O error logging and handling, \fI\%#4b6475da\fP
.IP \(bu 2
Module Level Logging, \fI\%#b58f069167\fP
.IP \(bu 2
Log 5xx responses at error level, \fI\%#e896b0b7\fP
.IP \(bu 2
Log problems opening database at ERROR level except for auto\-created
system dbs, \fI\%#41667642f7\fP
.UNINDENT
.SS Replicator
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1248\fP: \fIHTTP 500\fP error now doesn\(aqt occurs when replicating with
\fB?doc_ids=null\fP\&. \fI\%#bea76dbf\fP
.IP \(bu 2
\fI\%COUCHDB\-1259\fP: Stabilize replication id, \fI\%#c6252d6d7f\fP
.IP \(bu 2
\fI\%COUCHDB\-1323\fP: Replicator now acts as standalone application.
\fI\%#f913ca6e\fP
.IP \(bu 2
\fI\%COUCHDB\-1363\fP: Fix rarely occurred, but still race condition in changes feed
if a quick burst of changes happens while replication is starting the
replication can go stale. \fI\%#573a7bb9\fP
.IP \(bu 2
\fI\%COUCHDB\-1557\fP: Upgrade some code to use BIFs bring good improvements for
replication.
.UNINDENT
.SS Security
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1060\fP: Passwords are now hashed using the PBKDF2 algorithm with a
configurable work factor. \fI\%#7d418134\fP
.UNINDENT
.SS Source Repository
.INDENT 0.0
.IP \(bu 2
The source repository was migrated from \fI\%SVN\fP to \fI\%Git\fP\&.
.UNINDENT
.SS Storage System
.INDENT 0.0
.IP \(bu 2
Fixed unnecessary conflict when deleting and creating a
document in the same batch.
.UNINDENT
.SS Test Suite
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1321\fP: Moved the JS test suite to the CLI.
.IP \(bu 2
\fI\%COUCHDB\-1338\fP: Start CouchDB with \fBport=0\fP\&. While CouchDB might be already
running on the default port 5984, port number 0 let the TCP stack figure out a
free port to run. \fI\%#127cbe3\fP
.IP \(bu 2
\fI\%COUCHDB\-1339\fP: Use shell trap to catch dying beam processes during test runs.
\fI\%#2921c78\fP
.IP \(bu 2
\fI\%COUCHDB\-1389\fP: Improved tracebacks printed by the JS CLI tests.
.IP \(bu 2
\fI\%COUCHDB\-1563\fP: Ensures urlPrefix is set in all ajax requests.
\fI\%#07a6af222\fP
.IP \(bu 2
Fix race condition for test running on faster hardware.
.IP \(bu 2
Improved the reliability of a number of tests.
.UNINDENT
.SS URL Rewriter & Vhosts
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1026\fP: Database name is encoded during rewriting
(allowing embedded /\(aqs, etc). \fI\%#272d6415\fP
.UNINDENT
.SS UUID Algorithms
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1373\fP: Added the utc_id algorithm \fI\%#5ab712a2\fP
.UNINDENT
.SS Query and View Server
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-111\fP: Improve the errors reported by the JavaScript view server
to provide a more friendly error report when something goes wrong.
\fI\%#0c619ed\fP
.IP \(bu 2
\fI\%COUCHDB\-410\fP: More graceful error handling for JavaScript validate_doc_update
functions.
.IP \(bu 2
\fI\%COUCHDB\-1372\fP: \fI_stats\fP built\-in reduce function no longer produces error for
empty view result.
.IP \(bu 2
\fI\%COUCHDB\-1444\fP: Fix missed_named_view error that occurs on existed design
documents and views. \fI\%#b59ac98b\fP
.IP \(bu 2
\fI\%COUCHDB\-1445\fP: CouchDB tries no more to delete view file if it couldn\(aqt open
it, even if the error is \fIemfile\fP\&.
.IP \(bu 2
\fI\%COUCHDB\-1483\fP: Update handlers requires valid doc ids. \fI\%#72ea7e38\fP
.IP \(bu 2
\fI\%COUCHDB\-1491\fP: Clean up view tables. \fI\%#c37204b7\fP
.IP \(bu 2
Deprecate E4X support, \fI\%#cdfdda2314\fP
.UNINDENT
.SS Windows
.INDENT 0.0
.IP \(bu 2
\fI\%COUCHDB\-1482\fP: Use correct linker flag to build \fIsnappy_nif.dll\fP on Windows.
\fI\%#a6eaf9f1\fP
.IP \(bu 2
Allows building cleanly on Windows without cURL, \fI\%#fb670f5712\fP
.UNINDENT
.SS 1.2.x Branch
.INDENT 0.0
.IP \(bu 2
\fI\%Upgrade Notes\fP
.IP \(bu 2
\fI\%Version 1.2.2\fP
.IP \(bu 2
\fI\%Version 1.2.1\fP
.IP \(bu 2
\fI\%Version 1.2.0\fP
.UNINDENT
.SS Upgrade Notes
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
This version drops support for the database format that was introduced in
version 0.9.0. Compact your older databases (that have not been compacted
for a long time) before upgrading, or they will become inaccessible.
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
\fIrelease/1.2.1\fP contains important security fixes. Previous \fI1.2.x\fP
releases are not recommended for regular usage.
.UNINDENT
.UNINDENT
.SS Security changes
.sp
The interface to the \fB_users\fP and \fB_replicator\fP databases have been
changed so that non\-administrator users can see less information:
.INDENT 0.0
.IP \(bu 2
In the \fB_users\fP database:
.INDENT 2.0
.IP \(bu 2
User documents can now only be read by the respective users, as well as
administrators. Other users cannot read these documents.
.IP \(bu 2
Views can only be defined and queried by administrator users.
.IP \(bu 2
The \fB_changes\fP feed can only be queried by administrator users.
.UNINDENT
.IP \(bu 2
In the \fB_replicator\fP database:
.INDENT 2.0
.IP \(bu 2
Documents now have a forced \fBowner\fP field that corresponds to the
authenticated user that created them.
.IP \(bu 2
Non\-owner users will not see confidential information like passwords or
OAuth tokens in replication documents; they can still see the other
contents of those documents. Administrators can see everything.
.IP \(bu 2
Views can only be defined and queried by administrators.
.UNINDENT
.UNINDENT
.SS Database Compression
.sp
The new optional (but enabled by default) compression of disk files requires
an upgrade of the on\-disk format (5 \-> 6) which occurs on creation for new
databases and views, and on compaction for existing files. This format is not
supported in previous releases, so rollback would require replication to the
previous CouchDB release or restoring from backup.
.sp
Compression can be disabled by setting \fBcompression = none\fP in your
\fBlocal.ini\fP \fB[couchdb]\fP section, but the on\-disk format will still be
upgraded.
.SS Version 1.2.2
.SS Build System
.INDENT 0.0
.IP \(bu 2
Fixed issue in \fIcouchdb\fP script where stopped status returns before process
exits.
.UNINDENT
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
Reset rewrite counter on new request, avoiding unnecessary request failures
due to bogus rewrite limit reports.
.UNINDENT
.SS Version 1.2.1
.SS Build System
.INDENT 0.0
.IP \(bu 2
Fix couchdb start script.
.IP \(bu 2
Win: fix linker invocations.
.UNINDENT
.SS Futon
.INDENT 0.0
.IP \(bu 2
Disable buttons that aren\(aqt available for the logged\-in user.
.UNINDENT
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
No longer rewrites the \fBX\-CouchDB\-Requested\-Path\fP during recursive
calls to the rewriter.
.IP \(bu 2
Limit recursion depth in the URL rewriter. Defaults to a maximum
of 100 invocations but is configurable.
.UNINDENT
.SS Security
.INDENT 0.0
.IP \(bu 2
Fixed \fIcve/2012\-5641\fP
.IP \(bu 2
Fixed \fIcve/2012\-5649\fP
.IP \(bu 2
Fixed \fIcve/2012\-5650\fP
.UNINDENT
.SS Replication
.INDENT 0.0
.IP \(bu 2
Fix potential timeouts.
.UNINDENT
.SS View Server
.INDENT 0.0
.IP \(bu 2
Change use of signals to avoid broken view groups.
.UNINDENT
.SS Version 1.2.0
.SS Authentication
.INDENT 0.0
.IP \(bu 2
Fix use of OAuth with VHosts and URL rewriting.
.IP \(bu 2
OAuth secrets can now be stored in the users system database
as an alternative to key value pairs in the .ini configuration.
By default this is disabled (secrets are stored in the .ini)
but can be enabled via the .ini configuration key \fIuse_users_db\fP
in the \fIcouch_httpd_oauth\fP section.
.IP \(bu 2
Documents in the _users database are no longer publicly
readable.
.IP \(bu 2
Confidential information in the _replication database is no
longer publicly readable.
.IP \(bu 2
Password hashes are now calculated by CouchDB. Clients are no
longer required to do this manually.
.IP \(bu 2
Cookies used for authentication can be made persistent by enabling
the .ini configuration key \fIallow_persistent_cookies\fP in the
\fIcouch_httpd_auth\fP section.
.UNINDENT
.SS Build System
.INDENT 0.0
.IP \(bu 2
cURL is no longer required to build CouchDB as it is only
used by the command line JS test runner. If cURL is available
when building CouchJS you can enable the HTTP bindings by
passing \-H on the command line.
.IP \(bu 2
Temporarily made \fImake check\fP pass with R15B. A more thorough
fix is in the works (\fI\%COUCHDB\-1424\fP).
.IP \(bu 2
Fixed \-\-with\-js\-include and \-\-with\-js\-lib options.
.IP \(bu 2
Added \-\-with\-js\-lib\-name option.
.UNINDENT
.SS Futon
.INDENT 0.0
.IP \(bu 2
The \fIStatus\fP screen (active tasks) now displays two new task status
fields: \fIStarted on\fP and \fIUpdated on\fP\&.
.IP \(bu 2
Futon remembers view code every time it is saved, allowing to save an
edit that amounts to a revert.
.UNINDENT
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
Added a native JSON parser.
.IP \(bu 2
The _active_tasks API now offers more granular fields. Each
task type is now able to expose different properties.
.IP \(bu 2
Added built\-in changes feed filter \fI_view\fP\&.
.IP \(bu 2
Fixes to the \fI_changes\fP feed heartbeat option which caused
heartbeats to be missed when used with a filter. This caused
timeouts of continuous pull replications with a filter.
.IP \(bu 2
Properly restart the SSL socket on configuration changes.
.UNINDENT
.SS OAuth
.INDENT 0.0
.IP \(bu 2
Updated bundled \fIerlang_oauth\fP library to the latest version.
.UNINDENT
.SS Replicator
.INDENT 0.0
.IP \(bu 2
A new replicator implementation. It offers more performance and
configuration options.
.IP \(bu 2
Passing non\-string values to query_params is now a 400 bad
request. This is to reduce the surprise that all parameters
are converted to strings internally.
.IP \(bu 2
Added optional field \fIsince_seq\fP to replication objects/documents.
It allows to bootstrap a replication from a specific source sequence
number.
.IP \(bu 2
Simpler replication cancellation. In addition to the current method,
replications can now be canceled by specifying the replication ID
instead of the original replication object/document.
.UNINDENT
.SS Storage System
.INDENT 0.0
.IP \(bu 2
Added optional database and view index file compression (using Google\(aqs
snappy or zlib\(aqs deflate). This feature is enabled by default, but it
can be disabled by adapting local.ini accordingly. The on\-disk format
is upgraded on compaction and new DB/view creation to support this.
.IP \(bu 2
Several performance improvements, most notably regarding database writes
and view indexing.
.IP \(bu 2
Computation of the size of the latest MVCC snapshot data and all its
supporting metadata, both for database and view index files. This
information is exposed as the \fIdata_size\fP attribute in the database and
view group information URIs.
.IP \(bu 2
The size of the buffers used for database and view compaction is now
configurable.
.IP \(bu 2
Added support for automatic database and view compaction. This feature
is disabled by default, but it can be enabled via the .ini configuration.
.IP \(bu 2
Performance improvements for the built\-in changes feed filters \fI_doc_ids\fP
and \fI_design\fP\&.
.UNINDENT
.SS View Server
.INDENT 0.0
.IP \(bu 2
Add CoffeeScript (\fI\%http://coffeescript.org/\fP) as a first class view server
language.
.IP \(bu 2
Fixed old index file descriptor leaks after a view cleanup.
.IP \(bu 2
The requested_path property keeps the pre\-rewrite path even when no VHost
configuration is matched.
.IP \(bu 2
Fixed incorrect reduce query results when using pagination parameters.
.IP \(bu 2
Made icu_driver work with Erlang R15B and later.
.UNINDENT
.SS 1.1.x Branch
.INDENT 0.0
.IP \(bu 2
\fI\%Upgrade Notes\fP
.IP \(bu 2
\fI\%Version 1.1.2\fP
.IP \(bu 2
\fI\%Version 1.1.1\fP
.IP \(bu 2
\fI\%Version 1.1.0\fP
.UNINDENT
.SS Upgrade Notes
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
\fIrelease/1.1.2\fP contains important security fixes. Previous \fI1.1.x\fP
releases are not recommended for regular usage.
.UNINDENT
.UNINDENT
.SS Version 1.1.2
.SS Build System
.INDENT 0.0
.IP \(bu 2
Don\(aqt \fIln\fP the \fIcouchjs\fP install target on Windows
.IP \(bu 2
Remove ICU version dependency on Windows.
.IP \(bu 2
Improve SpiderMonkey version detection.
.UNINDENT
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
ETag of attachment changes only when the attachment changes, not
the document.
.IP \(bu 2
Fix retrieval of headers larger than 4k.
.IP \(bu 2
Allow OPTIONS HTTP method for list requests.
.IP \(bu 2
Don\(aqt attempt to encode invalid json.
.UNINDENT
.SS Log System
.INDENT 0.0
.IP \(bu 2
Improvements to log messages for file\-related errors.
.UNINDENT
.SS Replicator
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Fix pull replication of documents with many revisions.
.IP \(bu 2
Fix replication from an HTTP source to an HTTP target.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Security
.INDENT 0.0
.IP \(bu 2
Fixed \fIcve/2012\-5641\fP
.IP \(bu 2
Fixed \fIcve/2012\-5649\fP
.IP \(bu 2
Fixed \fIcve/2012\-5650\fP
.UNINDENT
.SS View Server
.INDENT 0.0
.IP \(bu 2
Avoid invalidating view indexes when running out of file descriptors.
.UNINDENT
.SS Version 1.1.1
.INDENT 0.0
.IP \(bu 2
Support SpiderMonkey 1.8.5
.IP \(bu 2
Add configurable maximum to the number of bytes returned by _log.
.IP \(bu 2
Allow CommonJS modules to be an empty string.
.IP \(bu 2
Bump minimum Erlang version to R13B02.
.IP \(bu 2
Do not run deleted validate_doc_update functions.
.IP \(bu 2
ETags for views include current sequence if include_docs=true.
.IP \(bu 2
Fix bug where duplicates can appear in _changes feed.
.IP \(bu 2
Fix bug where update handlers break after conflict resolution.
.IP \(bu 2
Fix bug with _replicator where include "filter" could crash couch.
.IP \(bu 2
Fix crashes when compacting large views.
.IP \(bu 2
Fix file descriptor leak in _log
.IP \(bu 2
Fix missing revisions in _changes?style=all_docs.
.IP \(bu 2
Improve handling of compaction at max_dbs_open limit.
.IP \(bu 2
JSONP responses now send "text/javascript" for Content\-Type.
.IP \(bu 2
Link to ICU 4.2 on Windows.
.IP \(bu 2
Permit forward slashes in path to update functions.
.IP \(bu 2
Reap couchjs processes that hit reduce_overflow error.
.IP \(bu 2
Status code can be specified in update handlers.
.IP \(bu 2
Support provides() in show functions.
.IP \(bu 2
_view_cleanup when ddoc has no views now removes all index files.
.IP \(bu 2
max_replication_retry_count now supports "infinity".
.IP \(bu 2
Fix replication crash when source database has a document with empty ID.
.IP \(bu 2
Fix deadlock when assigning couchjs processes to serve requests.
.IP \(bu 2
Fixes to the document multipart PUT API.
.IP \(bu 2
Fixes regarding file descriptor leaks for databases with views.
.UNINDENT
.SS Version 1.1.0
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
All CHANGES for 1.0.2 and 1.0.3 also apply to 1.1.0.
.UNINDENT
.UNINDENT
.SS Externals
.INDENT 0.0
.IP \(bu 2
Added OS Process module to manage daemons outside of CouchDB.
.IP \(bu 2
Added HTTP Proxy handler for more scalable externals.
.UNINDENT
.SS Futon
.INDENT 0.0
.IP \(bu 2
Added a "change password"\-feature to Futon.
.UNINDENT
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
Native SSL support.
.IP \(bu 2
Added support for HTTP range requests for attachments.
.IP \(bu 2
Added built\-in filters for \fI_changes\fP: \fI_doc_ids\fP and \fI_design\fP\&.
.IP \(bu 2
Added configuration option for TCP_NODELAY aka "Nagle".
.IP \(bu 2
Allow POSTing arguments to \fI_changes\fP\&.
.IP \(bu 2
Allow \fIkeys\fP parameter for GET requests to views.
.IP \(bu 2
Allow wildcards in vhosts definitions.
.IP \(bu 2
More granular ETag support for views.
.IP \(bu 2
More flexible URL rewriter.
.IP \(bu 2
Added support for recognizing "Q values" and media parameters in
HTTP Accept headers.
.IP \(bu 2
Validate doc ids that come from a PUT to a URL.
.UNINDENT
.SS Replicator
.INDENT 0.0
.IP \(bu 2
Added \fI_replicator\fP database to manage replications.
.IP \(bu 2
Fixed issues when an endpoint is a remote database accessible via SSL.
.IP \(bu 2
Added support for continuous by\-doc\-IDs replication.
.IP \(bu 2
Fix issue where revision info was omitted when replicating attachments.
.IP \(bu 2
Integrity of attachment replication is now verified by MD5.
.UNINDENT
.SS Storage System
.INDENT 0.0
.IP \(bu 2
Multiple micro\-optimizations when reading data.
.UNINDENT
.SS URL Rewriter & Vhosts
.INDENT 0.0
.IP \(bu 2
Fix for variable substitution
.UNINDENT
.SS View Server
.INDENT 0.0
.IP \(bu 2
Added CommonJS support to map functions.
.IP \(bu 2
Added \fIstale=update_after\fP query option that triggers a view update after
returning a \fIstale=ok\fP response.
.IP \(bu 2
Warn about empty result caused by \fIstartkey\fP and \fIendkey\fP limiting.
.IP \(bu 2
Built\-in reduce function \fI_sum\fP now accepts lists of integers as input.
.IP \(bu 2
Added view query aliases start_key, end_key, start_key_doc_id and
end_key_doc_id.
.UNINDENT
.SS 1.0.x Branch
.INDENT 0.0
.IP \(bu 2
\fI\%Upgrade Notes\fP
.IP \(bu 2
\fI\%Version 1.0.4\fP
.IP \(bu 2
\fI\%Version 1.0.3\fP
.IP \(bu 2
\fI\%Version 1.0.2\fP
.IP \(bu 2
\fI\%Version 1.0.1\fP
.IP \(bu 2
\fI\%Version 1.0.0\fP
.UNINDENT
.SS Upgrade Notes
.sp
Note, to replicate with a 1.0 CouchDB instance you must first upgrade in\-place
your current CouchDB to 1.0 or 0.11.1 \-\- backporting so that 0.10.x can
replicate to 1.0 wouldn\(aqt be that hard. All that is required is patching the
replicator to use the \fBapplication/json\fP content type.
.INDENT 0.0
.IP \(bu 2
\fB_log\fP and \fB_temp_views\fP are now admin\-only resources.
.IP \(bu 2
\fB_bulk_docs\fP now requires a valid \fIContent\-Type\fP header of
\fBapplication/json\fP\&.
.IP \(bu 2
\fIJSONP\fP is disabled by default. An .ini option was added to selectively
enable it.
.IP \(bu 2
The \fBkey\fP, \fBstartkey\fP and \fBendkey\fP properties of the request object
passed to \fIlist\fP and \fIshow\fP functions now
contain JSON objects representing the URL encoded string values in the query
string. Previously, these properties contained strings which needed to be
converted to JSON before using.
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
\fIrelease/1.0.4\fP contains important security fixes. Previous \fI1.0.x\fP
releases are not recommended for regular usage.
.UNINDENT
.UNINDENT
.SS Version 1.0.4
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
Fix missing revisions in \fB_changes?style=all_docs\fP\&.
.IP \(bu 2
Fix validation of attachment names.
.UNINDENT
.SS Log System
.INDENT 0.0
.IP \(bu 2
Fix file descriptor leak in \fB_log\fP\&.
.UNINDENT
.SS Replicator
.INDENT 0.0
.IP \(bu 2
Fix a race condition where replications can go stale
.UNINDENT
.SS Security
.INDENT 0.0
.IP \(bu 2
Fixed \fIcve/2012\-5641\fP
.IP \(bu 2
Fixed \fIcve/2012\-5649\fP
.IP \(bu 2
Fixed \fIcve/2012\-5650\fP
.UNINDENT
.SS View System
.INDENT 0.0
.IP \(bu 2
Avoid invalidating view indexes when running out of file descriptors.
.UNINDENT
.SS Version 1.0.3
.SS General
.INDENT 0.0
.IP \(bu 2
Fixed compatibility issues with Erlang R14B02.
.UNINDENT
.SS Etap Test Suite
.INDENT 0.0
.IP \(bu 2
Etap tests no longer require use of port 5984. They now use a randomly
selected port so they won\(aqt clash with a running CouchDB.
.UNINDENT
.SS Futon
.INDENT 0.0
.IP \(bu 2
Made compatible with jQuery 1.5.x.
.UNINDENT
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
Fix bug that allows invalid UTF\-8 after valid escapes.
.IP \(bu 2
The query parameter \fIinclude_docs\fP now honors the parameter \fIconflicts\fP\&.
This applies to queries against map views, _all_docs and _changes.
.IP \(bu 2
Added support for inclusive_end with reduce views.
.UNINDENT
.SS Replicator
.INDENT 0.0
.IP \(bu 2
Enabled replication over IPv6.
.IP \(bu 2
Fixed for crashes in continuous and filtered changes feeds.
.IP \(bu 2
Fixed error when restarting replications in OTP R14B02.
.IP \(bu 2
Upgrade ibrowse to version 2.2.0.
.IP \(bu 2
Fixed bug when using a filter and a limit of 1.
.UNINDENT
.SS Security
.INDENT 0.0
.IP \(bu 2
Fixed OAuth signature computation in OTP R14B02.
.IP \(bu 2
Handle passwords with : in them.
.UNINDENT
.SS Storage System
.INDENT 0.0
.IP \(bu 2
More performant queries against _changes and _all_docs when using the
\fIinclude_docs\fP parameter.
.UNINDENT
.SS Windows
.INDENT 0.0
.IP \(bu 2
Windows builds now require ICU >= 4.4.0 and Erlang >= R14B03. See
\fI\%COUCHDB\-1152\fP, and \fI\%COUCHDB\-963\fP + OTP\-9139 for more information.
.UNINDENT
.SS Version 1.0.2
.SS Futon
.INDENT 0.0
.IP \(bu 2
Make test suite work with Safari and Chrome.
.IP \(bu 2
Fixed animated progress spinner.
.IP \(bu 2
Fix raw view document link due to overzealous URI encoding.
.IP \(bu 2
Spell javascript correctly in loadScript(uri).
.UNINDENT
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
Allow reduce=false parameter in map\-only views.
.IP \(bu 2
Fix parsing of Accept headers.
.IP \(bu 2
Fix for multipart GET APIs when an attachment was created during a
local\-local replication. See \fI\%COUCHDB\-1022\fP for details.
.UNINDENT
.SS Log System
.INDENT 0.0
.IP \(bu 2
Reduce lengthy stack traces.
.IP \(bu 2
Allow logging of native <xml> types.
.UNINDENT
.SS Replicator
.INDENT 0.0
.IP \(bu 2
Updated ibrowse library to 2.1.2 fixing numerous replication issues.
.IP \(bu 2
Make sure that the replicator respects HTTP settings defined in the config.
.IP \(bu 2
Fix error when the ibrowse connection closes unexpectedly.
.IP \(bu 2
Fix authenticated replication (with HTTP basic auth) of design documents
with attachments.
.IP \(bu 2
Various fixes to make replication more resilient for edge\-cases.
.UNINDENT
.SS Storage System
.INDENT 0.0
.IP \(bu 2
Fix leaking file handles after compacting databases and views.
.IP \(bu 2
Fix databases forgetting their validation function after compaction.
.IP \(bu 2
Fix occasional timeout errors after successfully compacting large databases.
.IP \(bu 2
Fix occasional error when writing to a database that has just been compacted.
.IP \(bu 2
Fix occasional timeout errors on systems with slow or heavily loaded IO.
.IP \(bu 2
Fix for OOME when compactions include documents with many conflicts.
.IP \(bu 2
Fix for missing attachment compression when MIME types included parameters.
.IP \(bu 2
Preserve purge metadata during compaction to avoid spurious view rebuilds.
.IP \(bu 2
Fix spurious conflicts introduced when uploading an attachment after
a doc has been in a conflict. See \fI\%COUCHDB\-902\fP for details.
.IP \(bu 2
Fix for frequently edited documents in multi\-master deployments being
duplicated in _changes and _all_docs.  See \fI\%COUCHDB\-968\fP for details on how
to repair.
.IP \(bu 2
Significantly higher read and write throughput against database and
view index files.
.UNINDENT
.SS View Server
.INDENT 0.0
.IP \(bu 2
Don\(aqt trigger view updates when requesting \fI_design/doc/_info\fP\&.
.IP \(bu 2
Fix for circular references in CommonJS requires.
.IP \(bu 2
Made isArray() function available to functions executed in the query server.
.IP \(bu 2
Documents are now sealed before being passed to map functions.
.IP \(bu 2
Force view compaction failure when duplicated document data exists. When
this error is seen in the logs users should rebuild their views from
scratch to fix the issue. See \fI\%COUCHDB\-999\fP for details.
.UNINDENT
.SS Version 1.0.1
.SS Authentication
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B Enable basic\-auth popup when required to access the server, to prevent
people from getting locked out.
.UNINDENT
.UNINDENT
.SS Build and System Integration
.INDENT 0.0
.IP \(bu 2
Included additional source files for distribution.
.UNINDENT
.SS Futon
.INDENT 0.0
.IP \(bu 2
User interface element for querying stale (cached) views.
.UNINDENT
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
Expose \fIcommitted_update_seq\fP for monitoring purposes.
.IP \(bu 2
Show fields saved along with _deleted=true. Allows for auditing of deletes.
.IP \(bu 2
More robust Accept\-header detection.
.UNINDENT
.SS Replicator
.INDENT 0.0
.IP \(bu 2
Added support for replication via an HTTP/HTTPS proxy.
.IP \(bu 2
Fix pull replication of attachments from 0.11 to 1.0.x.
.IP \(bu 2
Make the _changes feed work with non\-integer seqnums.
.UNINDENT
.SS Storage System
.INDENT 0.0
.IP \(bu 2
Fix data corruption bug \fI\%COUCHDB\-844\fP\&. Please see
\fI\%http://couchdb.apache.org/notice/1.0.1.html\fP for details.
.UNINDENT
.SS Version 1.0.0
.SS Security
.INDENT 0.0
.IP \(bu 2
Added authentication caching, to avoid repeated opening and closing of the
users database for each request requiring authentication.
.UNINDENT
.SS Storage System
.INDENT 0.0
.IP \(bu 2
Small optimization for reordering result lists.
.IP \(bu 2
More efficient header commits.
.IP \(bu 2
Use O_APPEND to save lseeks.
.IP \(bu 2
Faster implementation of pread_iolist(). Further improves performance on
concurrent reads.
.UNINDENT
.SS View Server
.INDENT 0.0
.IP \(bu 2
Faster default view collation.
.IP \(bu 2
Added option to include update_seq in view responses.
.UNINDENT
.SS 0.11.x Branch
.INDENT 0.0
.IP \(bu 2
\fI\%Upgrade Notes\fP
.IP \(bu 2
\fI\%Version 0.11.2\fP
.IP \(bu 2
\fI\%Version 0.11.1\fP
.IP \(bu 2
\fI\%Version 0.11.0\fP
.UNINDENT
.SS Upgrade Notes
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
\fIrelease/0.11.2\fP contains important security fixes. Previous \fI0.11.x\fP
releases are not recommended for regular usage.
.UNINDENT
.UNINDENT
.SS Changes Between 0.11.0 and 0.11.1
.INDENT 0.0
.IP \(bu 2
\fB_log\fP and \fB_temp_views\fP are now admin\-only resources.
.IP \(bu 2
\fB_bulk_docs\fP now requires a valid \fIContent\-Type\fP header of
\fBapplication/json\fP\&.
.IP \(bu 2
\fIJSONP\fP is disabled by default. An .ini option was added to selectively
enable it.
.IP \(bu 2
The \fBkey\fP, \fBstartkey\fP and \fBendkey\fP properties of the request object
passed to \fIlist\fP and \fIshow\fP functions now
contain JSON objects representing the URL encoded string values in the query
string. Previously, these properties contained strings which needed to be
converted to JSON before using.
.UNINDENT
.SS Changes Between 0.10.x and 0.11.0
.SS show, list, update and validation functions
.sp
The \fBreq\fP argument to show, list, update and validation functions now contains
the member method with the specified HTTP method of the current request.
Previously, this member was called \fBverb\fP\&. \fBmethod\fP is following \fI\%RFC 2616\fP
(HTTP 1.1) closer.
.SS _admins \-> _security
.sp
The \fI/db/_admins\fP handler has been removed and replaced with a
\fI/db/_security\fP object. Any existing \fI_admins\fP will be
dropped and need to be added to the security object again. The reason for this
is that the old system made no distinction between names and roles, while the
new one does, so there is no way to automatically upgrade the old admins list.
.sp
The security object has 2 special fields, \fBadmins\fP and \fBreaders\fP, which
contain lists of names and roles which are admins or readers on that database.
Anything else may be stored in other fields on the security object. The entire
object is made available to validation functions.
.SS json2.js
.sp
JSON handling in the query server has been upgraded to use \fI\%json2.js\fP\&.
This allows us to use faster native JSON serialization when it is available.
.sp
In previous versions, attempts to serialize undefined would throw an exception,
causing the doc that emitted undefined to be dropped from the view index.
The new behavior is to serialize undefined as null. Applications depending on
the old behavior will need to explicitly check for undefined.
.sp
Another change is that E4X\(aqs XML objects will not automatically be
stringified. XML users will need to call \fBmy_xml_object.toXMLString()\fP
to return a string value. \fI\%#8d3b7ab3\fP
.SS WWW\-Authenticate
.sp
The default configuration has been changed to avoid causing basic\-auth popups
which result from sending the WWW\-Authenticate header. To enable basic\-auth
popups, uncomment the \fBhttpd/WWW\-Authenticate\fP line in
\fIlocal.ini\fP\&.
.SS Query server line protocol
.sp
The query server line protocol has changed for all functions except
\fImap\fP, \fIreduce\fP, and
\fIrereduce\fP\&. This allows us to cache the entire design
document in the query server process, which results in faster performance for
common operations. It also gives more flexibility to query server
implementators and shouldn\(aqt require major changes in the future when adding
new query server features.
.SS UTF8 JSON
.sp
JSON request bodies are validated for proper UTF\-8 before saving, instead of
waiting to fail on subsequent read requests.
.SS _changes line format
.sp
Continuous changes are now newline delimited, instead of having each line
followed by a comma.
.SS Version 0.11.2
.SS Authentication
.INDENT 0.0
.IP \(bu 2
User documents can now be deleted by admins or the user.
.UNINDENT
.SS Futon
.INDENT 0.0
.IP \(bu 2
Add some Futon files that were missing from the Makefile.
.UNINDENT
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
Better error messages on invalid URL requests.
.UNINDENT
.SS Replicator
.INDENT 0.0
.IP \(bu 2
Fix bug when pushing design docs by non\-admins, which was hanging the
replicator for no good reason.
.IP \(bu 2
Fix bug when pulling design documents from a source that requires
basic\-auth.
.UNINDENT
.SS Security
.INDENT 0.0
.IP \(bu 2
Avoid potential DOS attack by guarding all creation of atoms.
.IP \(bu 2
Fixed \fIcve/2010\-2234\fP
.UNINDENT
.SS Version 0.11.1
.SS Build and System Integration
.INDENT 0.0
.IP \(bu 2
Output of \fIcouchdb \-\-help\fP has been improved.
.IP \(bu 2
Fixed compatibility with the Erlang R14 series.
.IP \(bu 2
Fixed warnings on Linux builds.
.IP \(bu 2
Fixed build error when aclocal needs to be called during the build.
.IP \(bu 2
Require ICU 4.3.1.
.IP \(bu 2
Fixed compatibility with Solaris.
.UNINDENT
.SS Configuration System
.INDENT 0.0
.IP \(bu 2
Fixed timeout with large .ini files.
.UNINDENT
.SS Futon
.INDENT 0.0
.IP \(bu 2
Use "expando links" for over\-long document values in Futon.
.IP \(bu 2
Added continuous replication option.
.IP \(bu 2
Added option to replicating test results anonymously to a community
CouchDB instance.
.IP \(bu 2
Allow creation and deletion of config entries.
.IP \(bu 2
Fixed display issues with doc ids that have escaped characters.
.IP \(bu 2
Fixed various UI issues.
.UNINDENT
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
Mask passwords in active tasks and logging.
.IP \(bu 2
Update mochijson2 to allow output of BigNums not in float form.
.IP \(bu 2
Added support for X\-HTTP\-METHOD\-OVERRIDE.
.IP \(bu 2
Better error message for database names.
.IP \(bu 2
Disable jsonp by default.
.IP \(bu 2
Accept gzip encoded standalone attachments.
.IP \(bu 2
Made max_concurrent_connections configurable.
.IP \(bu 2
Made changes API more robust.
.IP \(bu 2
Send newly generated document rev to callers of an update function.
.UNINDENT
.SS JavaScript Clients
.INDENT 0.0
.IP \(bu 2
Added tests for couch.js and jquery.couch.js
.IP \(bu 2
Added changes handler to jquery.couch.js.
.IP \(bu 2
Added cache busting to jquery.couch.js if the user agent is msie.
.IP \(bu 2
Added support for multi\-document\-fetch (via _all_docs) to jquery.couch.js.
.IP \(bu 2
Added attachment versioning to jquery.couch.js.
.IP \(bu 2
Added option to control ensure_full_commit to jquery.couch.js.
.IP \(bu 2
Added list functionality to jquery.couch.js.
.IP \(bu 2
Fixed issues where bulkSave() wasn\(aqt sending a POST body.
.UNINDENT
.SS Log System
.INDENT 0.0
.IP \(bu 2
Log HEAD requests as HEAD, not GET.
.IP \(bu 2
Keep massive JSON blobs out of the error log.
.IP \(bu 2
Fixed a timeout issue.
.UNINDENT
.SS Replication System
.INDENT 0.0
.IP \(bu 2
Refactored various internal APIs related to attachment streaming.
.IP \(bu 2
Fixed hanging replication.
.IP \(bu 2
Fixed keepalive issue.
.UNINDENT
.SS Security
.INDENT 0.0
.IP \(bu 2
Added authentication redirect URL to log in clients.
.IP \(bu 2
Fixed query parameter encoding issue in oauth.js.
.IP \(bu 2
Made authentication timeout configurable.
.IP \(bu 2
Temporary views are now admin\-only resources.
.UNINDENT
.SS Storage System
.INDENT 0.0
.IP \(bu 2
Don\(aqt require a revpos for attachment stubs.
.IP \(bu 2
Added checking to ensure when a revpos is sent with an attachment stub,
it\(aqs correct.
.IP \(bu 2
Make file deletions async to avoid pauses during compaction and db
deletion.
.IP \(bu 2
Fixed for wrong offset when writing headers and converting them to blocks,
only triggered when header is larger than 4k.
.IP \(bu 2
Preserve _revs_limit and instance_start_time after compaction.
.UNINDENT
.SS Test Suite
.INDENT 0.0
.IP \(bu 2
Made the test suite overall more reliable.
.UNINDENT
.SS View Server
.INDENT 0.0
.IP \(bu 2
Provide a UUID to update functions (and all other functions) that they can
use to create new docs.
.IP \(bu 2
Upgrade CommonJS modules support to 1.1.1.
.IP \(bu 2
Fixed erlang filter funs and normalize filter fun API.
.IP \(bu 2
Fixed hang in view shutdown.
.UNINDENT
.SS URL Rewriter & Vhosts
.INDENT 0.0
.IP \(bu 2
Allow more complex keys in rewriter.
.IP \(bu 2
Allow global rewrites so system defaults are available in vhosts.
.IP \(bu 2
Allow isolation of databases with vhosts.
.IP \(bu 2
Fix issue with passing variables to query parameters.
.UNINDENT
.SS Version 0.11.0
.SS Build and System Integration
.INDENT 0.0
.IP \(bu 2
Updated and improved source documentation.
.IP \(bu 2
Fixed distribution preparation for building on Mac OS X.
.IP \(bu 2
Added support for building a Windows installer as part of \(aqmake dist\(aq.
.IP \(bu 2
Bug fix for building couch.app\(aqs module list.
.IP \(bu 2
ETap tests are now run during make distcheck. This included a number of
updates to the build system to properly support VPATH builds.
.IP \(bu 2
Gavin McDonald set up a build\-bot instance. More info can be found at
\fI\%http://ci.apache.org/buildbot.html\fP
.UNINDENT
.SS Futon
.INDENT 0.0
.IP \(bu 2
Added a button for view compaction.
.IP \(bu 2
JSON strings are now displayed as\-is in the document view, without the
escaping of new\-lines and quotes. That dramatically improves readability of
multi\-line strings.
.IP \(bu 2
Same goes for editing of JSON string values. When a change to a field value is
submitted, and the value is not valid JSON it is assumed to be a string. This
improves editing of multi\-line strings a lot.
.IP \(bu 2
Hitting tab in textareas no longer moves focus to the next form field, but
simply inserts a tab character at the current caret position.
.IP \(bu 2
Fixed some font declarations.
.UNINDENT
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
Provide Content\-MD5 header support for attachments.
.IP \(bu 2
Added URL Rewriter handler.
.IP \(bu 2
Added virtual host handling.
.UNINDENT
.SS Replication
.INDENT 0.0
.IP \(bu 2
Added option to implicitly create replication target databases.
.IP \(bu 2
Avoid leaking file descriptors on automatic replication restarts.
.IP \(bu 2
Added option to replicate a list of documents by id.
.IP \(bu 2
Allow continuous replication to be cancelled.
.UNINDENT
.SS Runtime Statistics
.INDENT 0.0
.IP \(bu 2
Statistics are now calculated for a moving window instead of non\-overlapping
timeframes.
.IP \(bu 2
Fixed a problem with statistics timers and system sleep.
.IP \(bu 2
Moved statistic names to a term file in the priv directory.
.UNINDENT
.SS Security
.INDENT 0.0
.IP \(bu 2
Fixed CVE\-2010\-0009: Apache CouchDB Timing Attack Vulnerability.
.IP \(bu 2
Added default cookie\-authentication and users database.
.IP \(bu 2
Added Futon user interface for user signup and login.
.IP \(bu 2
Added per\-database reader access control lists.
.IP \(bu 2
Added per\-database security object for configuration data in validation
functions.
.IP \(bu 2
Added proxy authentication handler
.UNINDENT
.SS Storage System
.INDENT 0.0
.IP \(bu 2
Adds batching of multiple updating requests, to improve throughput with many
writers. Removed the now redundant couch_batch_save module.
.IP \(bu 2
Adds configurable compression of attachments.
.UNINDENT
.SS View Server
.INDENT 0.0
.IP \(bu 2
Added optional \(aqraw\(aq binary collation for faster view builds where Unicode
collation is not important.
.IP \(bu 2
Improved view index build time by reducing ICU collation callouts.
.IP \(bu 2
Improved view information objects.
.IP \(bu 2
Bug fix for partial updates during view builds.
.IP \(bu 2
Move query server to a design\-doc based protocol.
.IP \(bu 2
Use json2.js for JSON serialization for compatiblity with native JSON.
.IP \(bu 2
Major refactoring of couchjs to lay the groundwork for disabling cURL
support. The new HTTP interaction acts like a synchronous XHR. Example usage
of the new system is in the JavaScript CLI test runner.
.UNINDENT
.SS 0.10.x Branch
.INDENT 0.0
.IP \(bu 2
\fI\%Upgrade Notes\fP
.IP \(bu 2
\fI\%Version 0.10.2\fP
.IP \(bu 2
\fI\%Version 0.10.1\fP
.IP \(bu 2
\fI\%Version 0.10.0\fP
.UNINDENT
.SS Upgrade Notes
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
\fIrelease/0.10.2\fP contains important security fixes. Previous \fI0.10.x\fP
releases are not recommended for regular usage.
.UNINDENT
.UNINDENT
.SS Modular Configuration Directories
.sp
CouchDB now loads configuration from the following places (\fI\%glob(7)\fP syntax)
in order:
.INDENT 0.0
.IP \(bu 2
PREFIX/default.ini
.IP \(bu 2
PREFIX/default.d/*
.IP \(bu 2
PREFIX/local.ini
.IP \(bu 2
PREFIX/local.d/*
.UNINDENT
.sp
The configuration options for \fIcouchdb\fP script have changed to:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-a FILE     add configuration FILE to chain
\-A DIR      add configuration DIR to chain
\-n          reset configuration file chain (including system default)
\-c          print configuration file chain and exit
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Show and List API change
.sp
Show and List functions must have a new structure in 0.10.
See \fI\%Formatting_with_Show_and_List\fP for details.
.SS Stricter enforcing of reduciness in reduce\-functions
.sp
Reduce functions are now required to reduce the number of values for a key.
.SS View query reduce parameter strictness
.sp
CouchDB now considers the parameter \fBreduce=false\fP to be an error for queries
of map\-only views, and responds with status code 400.
.SS Version 0.10.2
.SS Build and System Integration
.INDENT 0.0
.IP \(bu 2
Fixed distribution preparation for building on Mac OS X.
.UNINDENT
.SS Security
.INDENT 0.0
.IP \(bu 2
Fixed \fIcve/2010\-0009\fP
.UNINDENT
.SS Replicator
.INDENT 0.0
.IP \(bu 2
Avoid leaking file descriptors on automatic replication restarts.
.UNINDENT
.SS Version 0.10.1
.SS Build and System Integration
.INDENT 0.0
.IP \(bu 2
Test suite now works with the distcheck target.
.UNINDENT
.SS Replicator
.INDENT 0.0
.IP \(bu 2
Stability enhancements regarding redirects, timeouts, OAuth.
.UNINDENT
.SS Query Server
.INDENT 0.0
.IP \(bu 2
Avoid process leaks
.IP \(bu 2
Allow list and view to span languages
.UNINDENT
.SS Stats
.INDENT 0.0
.IP \(bu 2
Eliminate new process flood on system wake
.UNINDENT
.SS Version 0.10.0
.SS Build and System Integration
.INDENT 0.0
.IP \(bu 2
Changed \fIcouchdb\fP script configuration options.
.IP \(bu 2
Added default.d and local.d configuration directories to load sequence.
.UNINDENT
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
Added optional cookie\-based authentication handler.
.IP \(bu 2
Added optional two\-legged OAuth authentication handler.
.UNINDENT
.SS Storage Format
.INDENT 0.0
.IP \(bu 2
Add move headers with checksums to the end of database files for extra robust
storage and faster storage.
.UNINDENT
.SS View Server
.INDENT 0.0
.IP \(bu 2
Added native Erlang views for high\-performance applications.
.UNINDENT
.SS 0.9.x Branch
.INDENT 0.0
.IP \(bu 2
\fI\%Upgrade Notes\fP
.IP \(bu 2
\fI\%Version 0.9.2\fP
.IP \(bu 2
\fI\%Version 0.9.1\fP
.IP \(bu 2
\fI\%Version 0.9.0\fP
.UNINDENT
.SS Upgrade Notes
.SS Response to Bulk Creation/Updates
.sp
The response to a bulk creation / update now looks like this
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
    {"id": "0", "rev": "3682408536"},
    {"id": "1", "rev": "3206753266"},
    {"id": "2", "error": "conflict", "reason": "Document update conflict."}
]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Database File Format
.sp
The database file format has changed. CouchDB itself does yet not provide any
tools for migrating your data. In the meantime, you can use third\-party scripts
to deal with the migration, such as the dump/load tools that come with the
development version (trunk) of \fI\%couchdb\-python\fP\&.
.SS Renamed "count" to "limit"
.sp
The view query API has been changed: \fBcount\fP has become \fBlimit\fP\&.
This is a better description of what the parameter does, and should be a simple
update in any client code.
.SS Moved View URLs
.sp
The view URLs have been moved to design document resources. This means that
paths that used to be like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
http://hostname:5984/mydb/_view/designname/viewname?limit=10
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will now look like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
http://hostname:5984/mydb/_design/designname/_view/viewname?limit=10.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
See the \fI\%REST, Hypermedia, and CouchApps\fP  thread on dev for details.
.SS Attachments
.sp
Names of attachments are no longer allowed to start with an underscore.
.SS Error Codes
.sp
Some refinements have been made to error handling. CouchDB will send 400 instead
of 500 on invalid query parameters. Most notably, document update conflicts now
respond with \fI409 Conflict\fP instead of \fI412 Precondition Failed\fP\&. The error code
for when attempting to create a database that already exists is now 412
instead of 409.
.SS ini file format
.sp
CouchDB 0.9 changes sections and configuration variable names in configuration
files. Old .ini files won\(aqt work. Also note that CouchDB now ships with two .ini
files where 0.8 used couch.ini there are now \fIdefault.ini\fP and \fIlocal.ini\fP\&.
\fIdefault.ini\fP contains CouchDB\(aqs standard configuration values. local.ini is
meant for local changes. \fIlocal.ini\fP is not overwritten on CouchDB updates, so
your edits are safe. In addition, the new runtime configuration system persists
changes to the configuration in \fIlocal.ini\fP\&.
.SS Version 0.9.2
.SS Build and System Integration
.INDENT 0.0
.IP \(bu 2
Remove branch callbacks to allow building couchjs against newer versions of
Spidermonkey.
.UNINDENT
.SS Replication
.INDENT 0.0
.IP \(bu 2
Fix replication with 0.10 servers initiated by an 0.9 server (\fI\%COUCHDB\-559\fP).
.UNINDENT
.SS Version 0.9.1
.SS Build and System Integration
.INDENT 0.0
.IP \(bu 2
PID file directory is now created by the SysV/BSD daemon scripts.
.IP \(bu 2
Fixed the environment variables shown by the configure script.
.IP \(bu 2
Fixed the build instructions shown by the configure script.
.IP \(bu 2
Updated ownership and permission advice in \fIREADME\fP for better security.
.UNINDENT
.SS Configuration and stats system
.INDENT 0.0
.IP \(bu 2
Corrected missing configuration file error message.
.IP \(bu 2
Fixed incorrect recording of request time.
.UNINDENT
.SS Database Core
.INDENT 0.0
.IP \(bu 2
Document validation for underscore prefixed variables.
.IP \(bu 2
Made attachment storage less sparse.
.IP \(bu 2
Fixed problems when a database with delayed commits pending is considered
idle, and subject to losing changes when shutdown. (\fI\%COUCHDB\-334\fP)
.UNINDENT
.SS External Handlers
.INDENT 0.0
.IP \(bu 2
Fix POST requests.
.UNINDENT
.SS Futon
.INDENT 0.0
.IP \(bu 2
Redirect when loading a deleted view URI from the cookie.
.UNINDENT
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
Attachment requests respect the "rev" query\-string parameter.
.UNINDENT
.SS JavaScript View Server
.INDENT 0.0
.IP \(bu 2
Useful JavaScript Error messages.
.UNINDENT
.SS Replication
.INDENT 0.0
.IP \(bu 2
Added support for Unicode characters transmitted as UTF\-16 surrogate pairs.
.IP \(bu 2
URL\-encode attachment names when necessary.
.IP \(bu 2
Pull specific revisions of an attachment, instead of just the latest one.
.IP \(bu 2
Work around a rare chunk\-merging problem in ibrowse.
.IP \(bu 2
Work with documents containing Unicode characters outside the Basic
Multilingual Plane.
.UNINDENT
.SS Version 0.9.0
.SS Build and System Integration
.INDENT 0.0
.IP \(bu 2
The \fIcouchdb\fP script now supports system chainable configuration files.
.IP \(bu 2
The Mac OS X daemon script now redirects STDOUT and STDERR like SysV/BSD.
.IP \(bu 2
The build and system integration have been improved for portability.
.IP \(bu 2
Added COUCHDB_OPTIONS to etc/default/couchdb file.
.IP \(bu 2
Remove COUCHDB_INI_FILE and COUCHDB_PID_FILE from etc/default/couchdb file.
.IP \(bu 2
Updated \fIconfigure.ac\fP to manually link \fIlibm\fP for portability.
.IP \(bu 2
Updated \fIconfigure.ac\fP to extended default library paths.
.IP \(bu 2
Removed inets configuration files.
.IP \(bu 2
Added command line test runner.
.IP \(bu 2
Created dev target for make.
.UNINDENT
.SS Configuration and stats system
.INDENT 0.0
.IP \(bu 2
Separate default and local configuration files.
.IP \(bu 2
HTTP interface for configuration changes.
.IP \(bu 2
Statistics framework with HTTP query API.
.UNINDENT
.SS Database Core
.INDENT 0.0
.IP \(bu 2
Faster B\-tree implementation.
.IP \(bu 2
Changed internal JSON term format.
.IP \(bu 2
Improvements to Erlang VM interactions under heavy load.
.IP \(bu 2
User context and administrator role.
.IP \(bu 2
Update validations with design document validation functions.
.IP \(bu 2
Document purge functionality.
.IP \(bu 2
Ref\-counting for database file handles.
.UNINDENT
.SS Design Document Resource Paths
.INDENT 0.0
.IP \(bu 2
Added httpd_design_handlers config section.
.IP \(bu 2
Moved _view to httpd_design_handlers.
.IP \(bu 2
Added ability to render documents as non\-JSON content\-types with _show and
_list functions, which are also httpd_design_handlers.
.UNINDENT
.SS Futon Utility Client
.INDENT 0.0
.IP \(bu 2
Added pagination to the database listing page.
.IP \(bu 2
Implemented attachment uploading from the document page.
.IP \(bu 2
Added page that shows the current configuration, and allows modification of
option values.
.IP \(bu 2
Added a JSON "source view" for document display.
.IP \(bu 2
JSON data in view rows is now syntax highlighted.
.IP \(bu 2
Removed the use of an iframe for better integration with browser history and
bookmarking.
.IP \(bu 2
Full database listing in the sidebar has been replaced by a short list of
recent databases.
.IP \(bu 2
The view editor now allows selection of the view language if there is more
than one configured.
.IP \(bu 2
Added links to go to the raw view or document URI.
.IP \(bu 2
Added status page to display currently running tasks in CouchDB.
.IP \(bu 2
JavaScript test suite split into multiple files.
.IP \(bu 2
Pagination for reduce views.
.UNINDENT
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
Added client side UUIDs for idempotent document creation
.IP \(bu 2
HTTP COPY for documents
.IP \(bu 2
Streaming of chunked attachment PUTs to disk
.IP \(bu 2
Remove negative count feature
.IP \(bu 2
Add include_docs option for view queries
.IP \(bu 2
Add multi\-key view post for views
.IP \(bu 2
Query parameter validation
.IP \(bu 2
Use stale=ok to request potentially cached view index
.IP \(bu 2
External query handler module for full\-text or other indexers.
.IP \(bu 2
Etags for attachments, views, shows and lists
.IP \(bu 2
Show and list functions for rendering documents and views as developer
controlled content\-types.
.IP \(bu 2
Attachment names may use slashes to allow uploading of nested directories
(useful for static web hosting).
.IP \(bu 2
Option for a view to run over design documents.
.IP \(bu 2
Added newline to JSON responses. Closes bike\-shed.
.UNINDENT
.SS Replication
.INDENT 0.0
.IP \(bu 2
Using ibrowse.
.IP \(bu 2
Checkpoint replications so failures are less expensive.
.IP \(bu 2
Automatically retry of failed replications.
.IP \(bu 2
Stream attachments in pull\-replication.
.UNINDENT
.SS 0.8.x Branch
.INDENT 0.0
.IP \(bu 2
\fI\%Version 0.8.1\-incubating\fP
.IP \(bu 2
\fI\%Version 0.8.0\-incubating\fP
.UNINDENT
.SS Version 0.8.1\-incubating
.SS Build and System Integration
.INDENT 0.0
.IP \(bu 2
The \fIcouchdb\fP script no longer uses \fIawk\fP for configuration checks as this
was causing portability problems.
.IP \(bu 2
Updated \fIsudo\fP example in \fIREADME\fP to use the \fI\-i\fP option, this fixes
problems when invoking from a directory the \fIcouchdb\fP user cannot access.
.UNINDENT
.SS Database Core
.INDENT 0.0
.IP \(bu 2
Fix for replication problems where the write queues can get backed up if the
writes aren\(aqt happening fast enough to keep up with the reads. For a large
replication, this can exhaust memory and crash, or slow down the machine
dramatically. The fix keeps only one document in the write queue at a time.
.IP \(bu 2
Fix for databases sometimes incorrectly reporting that they contain 0
documents after compaction.
.IP \(bu 2
CouchDB now uses ibrowse instead of inets for its internal HTTP client
implementation. This means better replication stability.
.UNINDENT
.SS Futon
.INDENT 0.0
.IP \(bu 2
The view selector dropdown should now work in Opera and Internet Explorer
even when it includes optgroups for design documents. (\fI\%COUCHDB\-81\fP)
.UNINDENT
.SS JavaScript View Server
.INDENT 0.0
.IP \(bu 2
Sealing of documents has been disabled due to an incompatibility with
SpiderMonkey 1.9.
.IP \(bu 2
Improve error handling for undefined values emitted by map functions.
(\fI\%COUCHDB\-83\fP)
.UNINDENT
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
Fix for chunked responses where chunks were always being split into multiple
TCP packets, which caused problems with the test suite under Safari, and in
some other cases.
.IP \(bu 2
Fix for an invalid JSON response body being returned for some kinds of
views. (\fI\%COUCHDB\-84\fP)
.IP \(bu 2
Fix for connections not getting closed after rejecting a chunked request.
(\fI\%COUCHDB\-55\fP)
.IP \(bu 2
CouchDB can now be bound to IPv6 addresses.
.IP \(bu 2
The HTTP \fIServer\fP header now contains the versions of CouchDB and Erlang.
.UNINDENT
.SS Version 0.8.0\-incubating
.SS Build and System Integration
.INDENT 0.0
.IP \(bu 2
CouchDB can automatically respawn following a server crash.
.IP \(bu 2
Database server no longer refuses to start with a stale PID file.
.IP \(bu 2
System logrotate configuration provided.
.IP \(bu 2
Improved handling of ICU shared libraries.
.IP \(bu 2
The \fIcouchdb\fP script now automatically enables SMP support in Erlang.
.IP \(bu 2
The \fIcouchdb\fP and \fIcouchjs\fP scripts have been improved for portability.
.IP \(bu 2
The build and system integration have been improved for portability.
.UNINDENT
.SS Database Core
.INDENT 0.0
.IP \(bu 2
The view engine has been completely decoupled from the storage engine. Index
data is now stored in separate files, and the format of the main database
file has changed.
.IP \(bu 2
Databases can now be compacted to reclaim space used for deleted documents
and old document revisions.
.IP \(bu 2
Support for incremental map/reduce views has been added.
.IP \(bu 2
To support map/reduce, the structure of design documents has changed. View
values are now JSON objects containing at least a \fImap\fP member, and
optionally a \fIreduce\fP member.
.IP \(bu 2
View servers are now identified by name (for example \fIjavascript\fP) instead of
by media type.
.IP \(bu 2
Automatically generated document IDs are now based on proper UUID generation
using the crypto module.
.IP \(bu 2
The field \fIcontent\-type\fP in the JSON representation of attachments has been
renamed to \fIcontent_type\fP (underscore).
.UNINDENT
.SS Futon
.INDENT 0.0
.IP \(bu 2
When adding a field to a document, Futon now just adds a field with an
autogenerated name instead of prompting for the name with a dialog. The name
is automatically put into edit mode so that it can be changed immediately.
.IP \(bu 2
Fields are now sorted alphabetically by name when a document is displayed.
.IP \(bu 2
Futon can be used to create and update permanent views.
.IP \(bu 2
The maximum number of rows to display per page on the database page can now
be adjusted.
.IP \(bu 2
Futon now uses the XMLHTTPRequest API asynchronously to communicate with the
CouchDB HTTP server, so that most operations no longer block the browser.
.IP \(bu 2
View results sorting can now be switched between ascending and descending by
clicking on the \fIKey\fP column header.
.IP \(bu 2
Fixed a bug where documents that contained a \fI@\fP character could not be
viewed. (\fI\%COUCHDB\-12\fP)
.IP \(bu 2
The database page now provides a \fICompact\fP button to trigger database
compaction. (\fI\%COUCHDB\-38\fP)
.IP \(bu 2
Fixed portential double encoding of document IDs and other URI segments in
many instances. (\fI\%COUCHDB\-39\fP)
.IP \(bu 2
Improved display of attachments.
.IP \(bu 2
The JavaScript Shell has been removed due to unresolved licensing issues.
.UNINDENT
.SS JavaScript View Server
.INDENT 0.0
.IP \(bu 2
SpiderMonkey is no longer included with CouchDB, but rather treated as a
normal external dependency. A simple C program (\fI_couchjs\fP) is provided that
links against an existing SpiderMonkey installation and uses the interpreter
embedding API.
.IP \(bu 2
View functions using the default JavaScript view server can now do logging
using the global \fIlog(message)\fP function. Log messages are directed into the
CouchDB log at \fIINFO\fP level. (\fI\%COUCHDB\-59\fP)
.IP \(bu 2
The global \fImap(key, value)\fP function made available to view code has been
renamed to \fIemit(key, value)\fP\&.
.IP \(bu 2
Fixed handling of exceptions raised by view functions.
.UNINDENT
.SS HTTP Interface
.INDENT 0.0
.IP \(bu 2
CouchDB now uses MochiWeb instead of inets for the HTTP server
implementation. Among other things, this means that the extra configuration
files needed for inets (such as \fIcouch_httpd.conf\fP) are no longer used.
.IP \(bu 2
The HTTP interface now completely supports the \fIHEAD\fP method. (\fI\%COUCHDB\-3\fP)
.IP \(bu 2
Improved compliance of \fIEtag\fP handling with the HTTP specification.
(\fI\%COUCHDB\-13\fP)
.IP \(bu 2
Etags are no longer included in responses to document \fIGET\fP requests that
include query string parameters causing the JSON response to change without
the revision or the URI having changed.
.IP \(bu 2
The bulk document update API has changed slightly on both the request and the
response side. In addition, bulk updates are now atomic.
.IP \(bu 2
CouchDB now uses \fITCP_NODELAY\fP to fix performance problems with persistent
connections on some platforms due to nagling.
.IP \(bu 2
Including a \fI?descending=false\fP query string parameter in requests to views
no longer raises an error.
.IP \(bu 2
Requests to unknown top\-level reserved URLs (anything with a leading
underscore) now return a \fIunknown_private_path\fP error instead of the
confusing \fIillegal_database_name\fP\&.
.IP \(bu 2
The Temporary view handling now expects a JSON request body, where the JSON
is an object with at least a \fImap\fP member, and optional \fIreduce\fP and
\fIlanguage\fP members.
.IP \(bu 2
Temporary views no longer determine the view server based on the Content\-Type
header of the \fIPOST\fP request, but rather by looking for a \fIlanguage\fP member
in the JSON body of the request.
.IP \(bu 2
The status code of responses to \fIDELETE\fP requests is now 200 to reflect that
that the deletion is performed synchronously.
.UNINDENT
.SS Security Issues Information
.SS CVE\-2010\-0009: Apache CouchDB Timing Attack Vulnerability
.INDENT 0.0
.TP
.B Date
31.03.2010
.TP
.B Affected
Apache CouchDB 0.8.0 to 0.10.1
.TP
.B Severity
Important
.TP
.B Vendor
The Apache Software Foundation
.UNINDENT
.SS Description
.sp
Apache CouchDB versions prior to version \fI0.11.0\fP are
vulnerable to timing attacks, also known as side\-channel information leakage,
due to using simple break\-on\-inequality string comparisons when verifying hashes
and passwords.
.SS Mitigation
.sp
All users should upgrade to CouchDB \fI0.11.0\fP\&.
Upgrades from the \fI0.10.x\fP series should be seamless.
Users on earlier versions should consult with
\fIupgrade notes\fP\&.
.SS Example
.sp
A canonical description of the attack can be found in
\fI\%http://codahale.com/a\-lesson\-in\-timing\-attacks/\fP
.SS Credit
.sp
This issue was discovered by \fIJason Davies\fP of the Apache CouchDB development
team.
.SS CVE\-2010\-2234: Apache CouchDB Cross Site Request Forgery Attack
.INDENT 0.0
.TP
.B Date
21.02.2010
.TP
.B Affected
Apache CouchDB 0.8.0 to 0.11.1
.TP
.B Severity
Important
.TP
.B Vendor
The Apache Software Foundation
.UNINDENT
.SS Description
.sp
Apache CouchDB versions prior to version \fI0.11.1\fP are
vulnerable to \fI\%Cross Site Request Forgery\fP (CSRF) attacks.
.SS Mitigation
.sp
All users should upgrade to CouchDB \fI0.11.2\fP
or \fI1.0.1\fP\&.
.sp
Upgrades from the \fI0.11.x\fP and
\fI0.10.x\fP series should be seamless.
.sp
Users on earlier versions should consult with upgrade notes.
.SS Example
.sp
A malicious website can \fIPOST\fP arbitrary JavaScript code to well
known CouchDB installation URLs (like \fI\%http://localhost:5984/\fP)
and make the browser execute the injected JavaScript in the
security context of CouchDB\(aqs admin interface Futon.
.sp
Unrelated, but in addition the JSONP API has been turned off
by default to avoid potential information leakage.
.SS Credit
.sp
This CSRF issue was discovered by a source that wishes to stay
anonymous.
.SS CVE\-2010\-3854: Apache CouchDB Cross Site Scripting Issue
.INDENT 0.0
.TP
.B Date
28.01.2011
.TP
.B Affected
Apache CouchDB 0.8.0 to 1.0.1
.TP
.B Severity
Important
.TP
.B Vendor
The Apache Software Foundation
.UNINDENT
.SS Description
.sp
Apache CouchDB versions prior to version \fI1.0.2\fP are
vulnerable to \fI\%Cross Site Scripting\fP (XSS) attacks.
.SS Mitigation
.sp
All users should upgrade to CouchDB \fI1.0.2\fP\&.
.sp
Upgrades from the \fI0.11.x\fP and
\fI0.10.x\fP series should be seamless.
.sp
Users on earlier versions should consult with upgrade notes.
.SS Example
.sp
Due to inadequate validation of request parameters and cookie data in Futon,
CouchDB\(aqs web\-based administration UI, a malicious site can execute arbitrary
code in the context of a user\(aqs browsing session.
.SS Credit
.sp
This XSS issue was discovered by a source that wishes to stay anonymous.
.SS CVE\-2012\-5641: Information disclosure via unescaped backslashes in URLs on Windows
.INDENT 0.0
.TP
.B Date
14.01.2013
.TP
.B Affected
All Windows\-based releases of Apache CouchDB, up to and including
1.0.3, 1.1.1, and 1.2.0 are vulnerable.
.TP
.B Severity
Moderate
.TP
.B Vendor
The Apache Software Foundation
.UNINDENT
.SS Description
.sp
A specially crafted request could be used to access content directly that
would otherwise be protected by inbuilt CouchDB security mechanisms. This
request could retrieve in binary form any CouchDB database, including the
\fI_users\fP or \fI_replication\fP databases, or any other file that the user account
used to run CouchDB might have read access to on the local filesystem. This
exploit is due to a vulnerability in the included MochiWeb HTTP library.
.SS Mitigation
.sp
Upgrade to a supported CouchDB release that includes this fix, such as:
.INDENT 0.0
.IP \(bu 2
\fI1.0.4\fP
.IP \(bu 2
\fI1.1.2\fP
.IP \(bu 2
\fI1.2.1\fP
.IP \(bu 2
\fI1.3.x\fP
.UNINDENT
.sp
All listed releases have included a specific fix for the MochiWeb component.
.SS Work\-Around
.sp
Users may simply exclude any file\-based web serving components directly
within their configuration file, typically in \fIlocal.ini\fP\&. On a default
CouchDB installation, this requires amending the
\fBhttpd_global_handlers/favicon.ico\fP and
\fBhttpd_global_handlers/_utils\fP lines within
\fBhttpd_global_handlers\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_global_handlers]
favicon.ico = {couch_httpd_misc_handlers, handle_welcome_req, <<"Forbidden">>}
_utils = {couch_httpd_misc_handlers, handle_welcome_req, <<"Forbidden">>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If additional handlers have been added, such as to support Adobe\(aqs Flash
\fIcrossdomain.xml\fP files, these would also need to be excluded.
.SS Acknowledgement
.sp
The issue was found and reported by Sriram Melkote to the upstream MochiWeb
project.
.SS References
.INDENT 0.0
.IP \(bu 2
\fI\%https://github.com/melkote/mochiweb/commit/ac2bf\fP
.UNINDENT
.SS CVE\-2012\-5649: JSONP arbitrary code execution with Adobe Flash
.INDENT 0.0
.TP
.B Date
14.01.2013
.TP
.B Affected
Releases up to and including 1.0.3, 1.1.1, and 1.2.0 are vulnerable,
if administrators have enabled JSONP.
.TP
.B Severity
Moderate
.TP
.B Vendor
The Apache Software Foundation
.UNINDENT
.SS Description
.sp
A hand\-crafted JSONP callback and response can be used to run arbitrary code
inside client\-side browsers via Adobe Flash.
.SS Mitigation
.sp
Upgrade to a supported CouchDB release that includes this fix, such as:
.INDENT 0.0
.IP \(bu 2
\fI1.0.4\fP
.IP \(bu 2
\fI1.1.2\fP
.IP \(bu 2
\fI1.2.1\fP
.IP \(bu 2
\fI1.3.x\fP
.UNINDENT
.sp
All listed releases have included a specific fix.
.SS Work\-Around
.sp
Disable JSONP or don\(aqt enable it since it\(aqs disabled by default.
.SS CVE\-2012\-5650: DOM based Cross\-Site Scripting via Futon UI
.INDENT 0.0
.TP
.B Date
14.01.2013
.TP
.B Affected
Apache CouchDB releases up to and including 1.0.3, 1.1.1,
and 1.2.0 are vulnerable.
.TP
.B Severity
Moderate
.TP
.B Vendor
The Apache Software Foundation
.UNINDENT
.SS Description
.sp
Query parameters passed into the browser\-based test suite are not sanitised,
and can be used to load external resources. An attacker may execute JavaScript
code in the browser, using the context of the remote user.
.SS Mitigation
.sp
Upgrade to a supported CouchDB release that includes this fix, such as:
.INDENT 0.0
.IP \(bu 2
\fI1.0.4\fP
.IP \(bu 2
\fI1.1.2\fP
.IP \(bu 2
\fI1.2.1\fP
.IP \(bu 2
\fI1.3.x\fP
.UNINDENT
.sp
All listed releases have included a specific fix.
.SS Work\-Around
.sp
Disable the Futon user interface completely, by adapting \fIlocal.ini\fP and
restarting CouchDB:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_global_handlers]
_utils = {couch_httpd_misc_handlers, handle_welcome_req, <<"Forbidden">>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Or by removing the UI test suite components:
.INDENT 0.0
.IP \(bu 2
share/www/verify_install.html
.IP \(bu 2
share/www/couch_tests.html
.IP \(bu 2
share/www/custom_test.html
.UNINDENT
.SS Acknowledgement
.sp
This vulnerability was discovered & reported to the Apache Software Foundation
by \fI\%Frederik Braun\fP\&.
.SS CVE\-2014\-2668: DoS (CPU and memory consumption) via the count parameter to /_uuids
.INDENT 0.0
.TP
.B Date
26.03.2014
.TP
.B Affected
Apache CouchDB releases up to and including 1.3.1, 1.4.0,
and 1.5.0 are vulnerable.
.TP
.B Severity
Moderate
.TP
.B Vendor
The Apache Software Foundation
.UNINDENT
.SS Description
.sp
The \fIapi/server/uuids\fP resource\(aqs \fIcount\fP query parameter is able to take
unreasonable huge numeric value which leads to exhaustion of server resources
(CPU and memory) and to DoS as the result.
.SS Mitigation
.sp
Upgrade to a supported CouchDB release that includes this fix, such as:
.INDENT 0.0
.IP \(bu 2
\fI1.5.1\fP
.IP \(bu 2
\fI1.6.0\fP
.UNINDENT
.sp
All listed releases have included a specific fix to
.SS Work\-Around
.sp
Disable the \fIapi/server/uuids\fP handler completely, by adapting
\fIlocal.ini\fP and restarting CouchDB:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[httpd_global_handlers]
_uuids =
.ft P
.fi
.UNINDENT
.UNINDENT
.SS CVE\-2017\-12635: Apache CouchDB Remote Privilege Escalation
.INDENT 0.0
.TP
.B Date
14.11.2017
.TP
.B Affected
All Versions of Apache CouchDB
.TP
.B Severity
Critical
.TP
.B Vendor
The Apache Software Foundation
.UNINDENT
.SS Description
.sp
Due to differences in CouchDB’s Erlang\-based JSON parser and JavaScript\-based
JSON parser, it is possible to submit _users documents with duplicate keys for
\fIroles\fP used for access control within the database, including the special case
\fI_admin\fP role, that denotes administrative users. In combination with
\fICVE\-2017\-12636\fP (Remote Code Execution), this can be used
to give non\-admin users access to arbitrary shell commands on the server as the
database system user.
.SS Mitigation
.sp
All users should upgrade to CouchDB \fI1.7.1\fP or
\fI2.1.1\fP\&.
.sp
Upgrades from previous 1.x and 2.x versions in the same series should be
seamless.
.sp
Users on earlier versions, or users upgrading from 1.x to 2.x should consult
with upgrade notes.
.SS Example
.sp
The JSON parser differences result in behaviour that if two \fIroles\fP keys
are available in the JSON, the second one will be used for authorising the
document write, but the first \fIroles\fP key is used for subsequent authorisation
for the newly created user. By design, users can not assign themselves roles.
The vulnerability allows non\-admin users to give themselves admin privileges.
.sp
We addressed this issue by updating the way CouchDB parses JSON in Erlang,
mimicking the JavaScript behaviour of picking the last key, if duplicates exist.
.SS Credit
.sp
This issue was discovered by \fI\%Max Justicz\fP\&.
.SS CVE\-2017\-12636: Apache CouchDB Remote Code Execution
.INDENT 0.0
.TP
.B Date
14.11.2017
.TP
.B Affected
All Versions of Apache CouchDB
.TP
.B Severity
Critical
.TP
.B Vendor
The Apache Software Foundation
.UNINDENT
.SS Description
.sp
CouchDB administrative users can configure the database server via HTTP(S). Some
of the configuration options include paths for operating system\-level binaries
that are subsequently launched by CouchDB. This allows a CouchDB admin user to
execute arbitrary shell commands as the CouchDB user, including downloading
and executing scripts from the public internet.
.SS Mitigation
.sp
All users should upgrade to CouchDB \fI1.7.1\fP or
\fI2.1.1\fP\&.
.sp
Upgrades from previous 1.x and 2.x versions in the same series should be
seamless.
.sp
Users on earlier versions, or users upgrading from 1.x to 2.x should consult
with upgrade notes.
.SS Credit
.sp
This issue was discovered by \fI\%Joan Touzet\fP of the CouchDB Security team during
the investigation of \fICVE\-2017\-12635\fP\&.
.SS CVE\-2018\-8007: Apache CouchDB Remote Code Execution
.INDENT 0.0
.TP
.B Date
30.04.2018
.TP
.B Affected
All Versions of Apache CouchDB
.TP
.B Severity
Low
.TP
.B Vendor
The Apache Software Foundation
.UNINDENT
.SS Description
.sp
CouchDB administrative users can configure the database server via HTTP(S). Due
to insufficient validation of administrator\-supplied configuration settings via
the HTTP API, it is possible for a CouchDB administrator user to escalate their
privileges to that of the operating system\(aqs user that CouchDB runs under, by
bypassing the backlist of configuration settings that are not allowed to be
modified via the HTTP API.
.sp
This privilege escalation effectively allows a CouchDB admin user to gain
arbitrary remote code execution, bypassing
\fICVE\-2017\-12636\fP
.SS Mitigation
.sp
All users should upgrade to CouchDB \fI1.7.2\fP or
\fI2.1.2\fP\&.
.sp
Upgrades from previous 1.x and 2.x versions in the same series should be
seamless.
.sp
Users on earlier versions, or users upgrading from 1.x to 2.x should consult
with upgrade notes.
.SS Credit
.sp
This issue was discovered by Francesco Oddo of \fI\%MDSec Labs\fP\&.
.SS Reporting New Security Problems with Apache CouchDB
.sp
The Apache Software Foundation takes a very active stance in eliminating
security problems and denial of service attacks against Apache CouchDB.
.sp
We strongly encourage folks to report such problems to our private security
mailing list first, before disclosing them in a public forum.
.sp
Please note that the security mailing list should only be used for reporting
undisclosed security vulnerabilities in Apache CouchDB and managing the
process of fixing such vulnerabilities. We cannot accept regular bug reports
or other queries at this address. All mail sent to this address that does not
relate to an undisclosed security problem in the Apache CouchDB source code
will be ignored.
.sp
If you need to report a bug that isn\(aqt an undisclosed security vulnerability,
please use the \fI\%bug reporting page\fP\&.
.sp
Questions about:
.INDENT 0.0
.IP \(bu 2
How to configure CouchDB securely
.IP \(bu 2
If a vulnerability applies to your particular application
.IP \(bu 2
Obtaining further information on a published vulnerability
.IP \(bu 2
Availability of patches and/or new releases
.UNINDENT
.sp
should be address to the \fI\%users mailing list\fP\&. Please see the \fI\%mailing
lists page\fP for details of how to subscribe.
.sp
The private security mailing address is: \fI\%security@couchdb.apache.org\fP
.sp
Please read \fI\%how the Apache Software Foundation handles security\fP reports to
know what to expect.
.sp
Note that all networked servers are subject to denial of service attacks,
and we cannot promise magic workarounds to generic problems (such as a client
streaming lots of data to your server, or re\-requesting the same URL
repeatedly). In general our philosophy is to avoid any attacks which can
cause the server to consume resources in a non\-linear relationship to the
size of inputs.
.SS About CouchDB Documentation
.SS License
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

                                Apache License
                          Version 2.0, January 2004
                       http://www.apache.org/licenses/

  TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

  1. Definitions.

     "License" shall mean the terms and conditions for use, reproduction,
     and distribution as defined by Sections 1 through 9 of this document.

     "Licensor" shall mean the copyright owner or entity authorized by
     the copyright owner that is granting the License.

     "Legal Entity" shall mean the union of the acting entity and all
     other entities that control, are controlled by, or are under common
     control with that entity. For the purposes of this definition,
     "control" means (i) the power, direct or indirect, to cause the
     direction or management of such entity, whether by contract or
     otherwise, or (ii) ownership of fifty percent (50%) or more of the
     outstanding shares, or (iii) beneficial ownership of such entity.

     "You" (or "Your") shall mean an individual or Legal Entity
     exercising permissions granted by this License.

     "Source" form shall mean the preferred form for making modifications,
     including but not limited to software source code, documentation
     source, and configuration files.

     "Object" form shall mean any form resulting from mechanical
     transformation or translation of a Source form, including but
     not limited to compiled object code, generated documentation,
     and conversions to other media types.

     "Work" shall mean the work of authorship, whether in Source or
     Object form, made available under the License, as indicated by a
     copyright notice that is included in or attached to the work
     (an example is provided in the Appendix below).

     "Derivative Works" shall mean any work, whether in Source or Object
     form, that is based on (or derived from) the Work and for which the
     editorial revisions, annotations, elaborations, or other modifications
     represent, as a whole, an original work of authorship. For the purposes
     of this License, Derivative Works shall not include works that remain
     separable from, or merely link (or bind by name) to the interfaces of,
     the Work and Derivative Works thereof.

     "Contribution" shall mean any work of authorship, including
     the original version of the Work and any modifications or additions
     to that Work or Derivative Works thereof, that is intentionally
     submitted to Licensor for inclusion in the Work by the copyright owner
     or by an individual or Legal Entity authorized to submit on behalf of
     the copyright owner. For the purposes of this definition, "submitted"
     means any form of electronic, verbal, or written communication sent
     to the Licensor or its representatives, including but not limited to
     communication on electronic mailing lists, source code control systems,
     and issue tracking systems that are managed by, or on behalf of, the
     Licensor for the purpose of discussing and improving the Work, but
     excluding communication that is conspicuously marked or otherwise
     designated in writing by the copyright owner as "Not a Contribution."

     "Contributor" shall mean Licensor and any individual or Legal Entity
     on behalf of whom a Contribution has been received by Licensor and
     subsequently incorporated within the Work.

  2. Grant of Copyright License. Subject to the terms and conditions of
     this License, each Contributor hereby grants to You a perpetual,
     worldwide, non\-exclusive, no\-charge, royalty\-free, irrevocable
     copyright license to reproduce, prepare Derivative Works of,
     publicly display, publicly perform, sublicense, and distribute the
     Work and such Derivative Works in Source or Object form.

  3. Grant of Patent License. Subject to the terms and conditions of
     this License, each Contributor hereby grants to You a perpetual,
     worldwide, non\-exclusive, no\-charge, royalty\-free, irrevocable
     (except as stated in this section) patent license to make, have made,
     use, offer to sell, sell, import, and otherwise transfer the Work,
     where such license applies only to those patent claims licensable
     by such Contributor that are necessarily infringed by their
     Contribution(s) alone or by combination of their Contribution(s)
     with the Work to which such Contribution(s) was submitted. If You
     institute patent litigation against any entity (including a
     cross\-claim or counterclaim in a lawsuit) alleging that the Work
     or a Contribution incorporated within the Work constitutes direct
     or contributory patent infringement, then any patent licenses
     granted to You under this License for that Work shall terminate
     as of the date such litigation is filed.

  4. Redistribution. You may reproduce and distribute copies of the
     Work or Derivative Works thereof in any medium, with or without
     modifications, and in Source or Object form, provided that You
     meet the following conditions:

     (a) You must give any other recipients of the Work or
         Derivative Works a copy of this License; and

     (b) You must cause any modified files to carry prominent notices
         stating that You changed the files; and

     (c) You must retain, in the Source form of any Derivative Works
         that You distribute, all copyright, patent, trademark, and
         attribution notices from the Source form of the Work,
         excluding those notices that do not pertain to any part of
         the Derivative Works; and

     (d) If the Work includes a "NOTICE" text file as part of its
         distribution, then any Derivative Works that You distribute must
         include a readable copy of the attribution notices contained
         within such NOTICE file, excluding those notices that do not
         pertain to any part of the Derivative Works, in at least one
         of the following places: within a NOTICE text file distributed
         as part of the Derivative Works; within the Source form or
         documentation, if provided along with the Derivative Works; or,
         within a display generated by the Derivative Works, if and
         wherever such third\-party notices normally appear. The contents
         of the NOTICE file are for informational purposes only and
         do not modify the License. You may add Your own attribution
         notices within Derivative Works that You distribute, alongside
         or as an addendum to the NOTICE text from the Work, provided
         that such additional attribution notices cannot be construed
         as modifying the License.

     You may add Your own copyright statement to Your modifications and
     may provide additional or different license terms and conditions
     for use, reproduction, or distribution of Your modifications, or
     for any such Derivative Works as a whole, provided Your use,
     reproduction, and distribution of the Work otherwise complies with
     the conditions stated in this License.

  5. Submission of Contributions. Unless You explicitly state otherwise,
     any Contribution intentionally submitted for inclusion in the Work
     by You to the Licensor shall be under the terms and conditions of
     this License, without any additional terms or conditions.
     Notwithstanding the above, nothing herein shall supersede or modify
     the terms of any separate license agreement you may have executed
     with Licensor regarding such Contributions.

  6. Trademarks. This License does not grant permission to use the trade
     names, trademarks, service marks, or product names of the Licensor,
     except as required for reasonable and customary use in describing the
     origin of the Work and reproducing the content of the NOTICE file.

  7. Disclaimer of Warranty. Unless required by applicable law or
     agreed to in writing, Licensor provides the Work (and each
     Contributor provides its Contributions) on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
     implied, including, without limitation, any warranties or conditions
     of TITLE, NON\-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
     PARTICULAR PURPOSE. You are solely responsible for determining the
     appropriateness of using or redistributing the Work and assume any
     risks associated with Your exercise of permissions under this License.

  8. Limitation of Liability. In no event and under no legal theory,
     whether in tort (including negligence), contract, or otherwise,
     unless required by applicable law (such as deliberate and grossly
     negligent acts) or agreed to in writing, shall any Contributor be
     liable to You for damages, including any direct, indirect, special,
     incidental, or consequential damages of any character arising as a
     result of this License or out of the use or inability to use the
     Work (including but not limited to damages for loss of goodwill,
     work stoppage, computer failure or malfunction, or any and all
     other commercial damages or losses), even if such Contributor
     has been advised of the possibility of such damages.

  9. Accepting Warranty or Additional Liability. While redistributing
     the Work or Derivative Works thereof, You may choose to offer,
     and charge a fee for, acceptance of support, warranty, indemnity,
     or other liability obligations and/or rights consistent with this
     License. However, in accepting such obligations, You may act only
     on Your own behalf and on Your sole responsibility, not on behalf
     of any other Contributor, and only if You agree to indemnify,
     defend, and hold each Contributor harmless for any liability
     incurred by, or claims asserted against, such Contributor by reason
     of your accepting any such warranty or additional liability.

  END OF TERMS AND CONDITIONS

  APPENDIX: How to apply the Apache License to your work.

     To apply the Apache License to your work, attach the following
     boilerplate notice, with the fields enclosed by brackets "[]"
     replaced with your own identifying information. (Don\(aqt include
     the brackets!)  The text should be enclosed in the appropriate
     comment syntax for the file format. We also recommend that a
     file or class name and description of purpose be included on the
     same "printed page" as the copyright notice for easier
     identification within third\-party archives.

  Copyright [yyyy] [name of copyright owner]

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE\-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

.ft P
.fi
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2018, Apache Software Foundation
.\" Generated by docutils manpage writer.
.
